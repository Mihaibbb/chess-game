[{"A:\\Js\\Chess\\chess-1.3\\chess\\src\\index.js":"1","A:\\Js\\Chess\\chess-1.3\\chess\\src\\App.js":"2","A:\\Js\\Chess\\chess-1.3\\chess\\src\\reportWebVitals.js":"3","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Home.jsx":"4","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Board.jsx":"5","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\RightSide.jsx":"6","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\LeftSide.jsx":"7","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\PreviousButton.jsx":"8","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\ResetButton.jsx":"9","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Classic.jsx":"10","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Online.jsx":"11","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\OnlineBoard.jsx":"12","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Computer.jsx":"13","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\ComputerBoard.jsx":"14","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\OnlineSocket.jsx":"15"},{"size":524,"mtime":1636133587167,"results":"16","hashOfConfig":"17"},{"size":4095,"mtime":1638010447270,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1636133587168,"results":"19","hashOfConfig":"17"},{"size":8813,"mtime":1638142714811,"results":"20","hashOfConfig":"17"},{"size":63709,"mtime":1639419676778,"results":"21","hashOfConfig":"17"},{"size":738,"mtime":1639421021403,"results":"22","hashOfConfig":"17"},{"size":449,"mtime":1636133511488,"results":"23","hashOfConfig":"17"},{"size":475,"mtime":1636201334185,"results":"24","hashOfConfig":"17"},{"size":856,"mtime":1638010859104,"results":"25","hashOfConfig":"17"},{"size":978,"mtime":1638010771173,"results":"26","hashOfConfig":"17"},{"size":3365,"mtime":1639422231449,"results":"27","hashOfConfig":"17"},{"size":62553,"mtime":1639421634207,"results":"28","hashOfConfig":"17"},{"size":1104,"mtime":1639421055827,"results":"29","hashOfConfig":"17"},{"size":76533,"mtime":1639420254732,"results":"30","hashOfConfig":"17"},{"size":833,"mtime":1638227062650,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"33sp7y",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"A:\\Js\\Chess\\chess-1.3\\chess\\src\\index.js",[],["72","73"],"A:\\Js\\Chess\\chess-1.3\\chess\\src\\App.js",["74","75","76"],"import React, { useEffect, useState } from \"react\";\r\nimport Home from \"./Components/Home\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Classic from \"./Components/Classic\";\r\nimport Online from \"./Components/Online\";\r\nimport Computer from \"./Components/Computer\";\r\n\r\nexport default function App() {\r\n\r\n    const [userSocket, setUserSocket] = useState(null);\r\n    const [playerColor, setPlayerColor] = useState(localStorage.getItem(\"computer-player-color\") ? localStorage.getItem(\"computer-player-color\") : null);\r\n    const [playerDifficulty, setPlayerDifficulty] = useState(localStorage.getItem(\"computer-player-difficulty\") ? JSON.parse(localStorage.getItem(\"computer-player-difficulty\")) : null);\r\n\r\n    let id;\r\n\r\n    useEffect(() => {\r\n       \r\n        const socket = io(\"http://localhost:8000\");\r\n        \r\n        socket.on('connect', () => {\r\n            \r\n            console.log('connected', socket.id, socket);\r\n            setUserSocket(socket);\r\n            if (JSON.parse(localStorage.getItem(\"socket\")) == null) localStorage.setItem(\"socket\", JSON.stringify(socket.id));\r\n            id = socket.id;\r\n        });\r\n\r\n        socket.on(\"ok\", data => console.log(data));\r\n\r\n    }, []);\r\n\r\n    const getColor = (color) => {\r\n        setPlayerColor(color);\r\n        \r\n        if (localStorage.length !== 0) {\r\n            for (let i = 0, len = localStorage.length; i < len; i++) {\r\n                const key = localStorage.key(i);\r\n                console.log(key);\r\n                if (key === null) continue;\r\n                if (key.search(\"computer-\") !== -1) localStorage.removeItem(key);\r\n            }\r\n        }\r\n        localStorage.setItem(\"computer-player-color\", color);\r\n        // window.location.href = `${window.location.href}computer`;\r\n    };\r\n\r\n    const getDifficulty = (difficulty) => {\r\n        setPlayerDifficulty(difficulty);\r\n        console.log(difficulty);\r\n        \r\n        if (localStorage.length !== 0) {\r\n            for (let i = 0, len = localStorage.length; i < len; i++) {\r\n                const key = localStorage.key(i);\r\n                if (key === null) continue;\r\n                if (key.search(\"computer-\") !== -1) localStorage.removeItem(key);\r\n            }\r\n        }\r\n\r\n        localStorage.setItem(\"computer-player-difficulty\", JSON.stringify(difficulty));\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(playerColor);\r\n        if (playerColor === null || playerDifficulty === null) return;\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n    \r\n                    <Route exact path=\"/\">\r\n                        <Home id={userSocket.id} getColor={getColor} getDifficulty={getDifficulty}/>\r\n                    </Route>\r\n    \r\n                    <Route path=\"/classic\">\r\n                        <Classic />\r\n                    </Route>\r\n    \r\n                    <Route path=\"/computer\">\r\n                        <Computer color={playerColor} difficulty={playerDifficulty}/>\r\n                    </Route>\r\n    \r\n                    <Route path={`/:id`}>\r\n                        <Online socket={userSocket}/>\r\n                    </Route>\r\n            \r\n                </Switch>\r\n            </Router>\r\n            \r\n        );\r\n        \r\n    }, [playerColor, playerDifficulty]);\r\n\r\n    \r\n\r\n \r\n \r\n    return userSocket && userSocket.connected && userSocket.id !== undefined && (\r\n        <Router>\r\n            <Switch>\r\n\r\n                <Route exact path=\"/\">\r\n                    <Home id={userSocket.id} getColor={getColor} getDifficulty={getDifficulty}/>\r\n                </Route>\r\n\r\n                <Route path=\"/classic\">\r\n                    <Classic />\r\n                </Route>\r\n\r\n                <Route path=\"/computer\">\r\n                    <Computer color={playerColor} difficulty={playerDifficulty}/>\r\n                </Route>\r\n\r\n                <Route path={`/:id`}>\r\n                    <Online socket={userSocket}/>\r\n                </Route>\r\n        \r\n            </Switch>\r\n        </Router>\r\n        \r\n    );\r\n  \r\n};\r\n","A:\\Js\\Chess\\chess-1.3\\chess\\src\\reportWebVitals.js",[],"A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Home.jsx",["77","78","79","80","81"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUsers, faUser, faRobot, faDesktop, faCheck, faChessPawn, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport '../styles/game-modes.css';\r\n\r\nimport selectS from \"../sounds/select.mp3\";\r\nimport clickS from \"../sounds/click.mp3\";\r\n\r\nexport default function Home({id, getColor, getDifficulty}) {\r\n\r\n    console.log(id);\r\n    if (localStorage.length !== 0) {\r\n        for (let i = 0, len = localStorage.length; i < len; i++) {\r\n            const key = localStorage.key(i);\r\n            if (key === null) continue;\r\n            if (key.search(\"computer-\") === -1) localStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    const [stop, setStop] = useState(false);\r\n    const [clickStop, setClickStop] = useState(false);\r\n    const [computerColor, setComputerColor] = useState(null);\r\n    const [computerDifficulty, setComputerDifficulty] = useState(\"easy\");\r\n\r\n    const inputLinkRef = useRef(null);\r\n    const copyButtonRef = useRef(null);\r\n    const copyIconRef = useRef(null);\r\n    const colorButtons = useRef([]);\r\n\r\n    const selectSound = new Audio(selectS);\r\n    const pointSound = new Audio(clickS);\r\n\r\n    const hoverSound = () => {\r\n        selectSound.pause();\r\n        selectSound.currentTime = 0;\r\n        selectSound.play();\r\n    };\r\n\r\n    const copyLink = (e) => {\r\n        setClickStop(false);\r\n        inputLinkRef?.current.select();\r\n        inputLinkRef?.current.setSelectionRange(0, 1000);\r\n\r\n        navigator.clipboard.writeText(inputLinkRef?.current.value);\r\n        copyButtonRef?.current.classList.add(\"sent\");\r\n        setTimeout(() => copyButtonRef?.current.firstChild.classList.add('rotate'), 400);\r\n        // copyButtonRef?.current.addEventListener('transitionend', () => {\r\n        //     copyButtonRef?.current.classList.add('rotate');\r\n        // });\r\n\r\n        setTimeout(() => {\r\n            inputLinkRef?.current.blur();\r\n            setClickStop(true);\r\n        }, 150);\r\n    };\r\n\r\n    const clickSound = (path) => {\r\n        if (path === `/${id}` && (stop || !clickStop)) return;\r\n        pointSound.pause();\r\n        pointSound.currentTime = 0;\r\n        pointSound.play();\r\n        pointSound.addEventListener('ended', () => {\r\n            if (path === `/${id}`) {\r\n                localStorage.removeItem(\"board\");\r\n                localStorage.removeItem(\"current-move\")\r\n            }\r\n            window.location.href = path;\r\n        });\r\n    \r\n    };  \r\n\r\n    const playComputer = (e, color) => {\r\n        let newTarget = e.target;\r\n\r\n        while (!newTarget.classList.contains('piece-button')) {\r\n            newTarget = newTarget.parentElement;\r\n        }\r\n\r\n        setComputerColor(color);\r\n        getColor(color);\r\n        // window.location.href = `${window.location.href}computer`;\r\n        [...newTarget.parentElement.childNodes].forEach(childNode => {\r\n            childNode.classList.remove('clicked');\r\n        });\r\n        newTarget.classList.add('clicked');\r\n    };\r\n\r\n    const startComputerGame = () => {\r\n        console.log(computerColor);\r\n        // window.location.href = `${window.location.href}computer`;\r\n    };\r\n\r\n    const changeDifficulty = (e) => {\r\n        const difficulty = e.target.innerText.toLowerCase();\r\n        setComputerDifficulty(difficulty);\r\n        e.target.parentElement.childNodes.forEach(child => child.classList.remove('active'));\r\n        e.target.classList.add('active');\r\n        getDifficulty(difficulty);\r\n    };\r\n\r\n    return (\r\n       \r\n        <div className=\"home-content\">\r\n             \r\n            <div className=\"classic-mode game-mode\" onMouseEnter={() => hoverSound()} onClick={() => clickSound(\"/classic\")}>\r\n                <div className=\"title\">\r\n                    <h2>Classic</h2>\r\n\r\n                    <div className=\"icon\">\r\n                        <FontAwesomeIcon icon={faUser} \r\n                            color=\"#fff\"\r\n                            className=\"mode-icon\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n           \r\n            <div className=\"online-mode game-mode\" onMouseEnter={() => hoverSound()} onClick={() => clickSound(`/${id}`)}>\r\n                \r\n                <div className=\"title\">\r\n                    <h2>Online</h2>\r\n\r\n                    <div className=\"icon\">\r\n                        <FontAwesomeIcon \r\n                            icon={faUsers} \r\n                            color=\"#fff\"\r\n                            className=\"mode-icon\"\r\n                        />\r\n                    </div>\r\n\r\n                    \r\n                </div>      \r\n               \r\n                <div className=\"link-container\">\r\n                    <p className=\"link-text\">Link with your friend: </p>\r\n                    <div className=\"link\">\r\n                        <label htmlFor=\"link-input\">\r\n                            <input type=\"text\" className=\"link-input\" value={`${window.location.href}${id}`} ref={inputLinkRef} onFocus={e => setStop(true)} onBlur={e => setStop(false)} readOnly/>\r\n                        </label>\r\n\r\n                        <div className=\"copy-button\" onClick={(e) => copyLink(e)} ref={copyButtonRef}>\r\n                            <FontAwesomeIcon \r\n                                icon={faCheck}\r\n                                className=\"fa copy-icon\"\r\n                                ref={copyIconRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n                <div className=\"icon\">\r\n                    \r\n                </div>\r\n\r\n                <div className=\"icon\">\r\n                    \r\n                </div>\r\n               \r\n            </div>\r\n\r\n            <div className=\"computer-mode game-mode\" onMouseEnter={() => hoverSound()}>\r\n                <div className=\"title\">\r\n                        <h2>Computer</h2>\r\n\r\n                        <div className=\"icon\">\r\n                            <FontAwesomeIcon icon={faDesktop} \r\n                                color=\"#fff\"\r\n                                className=\"mode-icon\"\r\n                            />\r\n                        </div>\r\n                </div>\r\n\r\n                <div className=\"colors\">\r\n                    <div className=\"white piece-button clicked\" onClick={(e) => playComputer(e, 1)}>\r\n                        <FontAwesomeIcon \r\n                            icon={faChessQueen}\r\n                            color=\"#fff\"\r\n                            className=\"choose-piece\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"black piece-button\" onClick={(e) => playComputer(e, -1)} >\r\n                        <FontAwesomeIcon \r\n                            icon={faChessQueen}\r\n                            color=\"#000\"\r\n                            className=\"choose-piece\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"random piece-button\">\r\n                        <div className=\"child\" onClick={(e) => playComputer(e, Math.random() < 0.5 ? 1 : -1)}>\r\n                            <FontAwesomeIcon \r\n                                icon={faChessQueen}\r\n                                color=\"#fff\"\r\n                                className=\"choose-piece\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"child\">\r\n                            <FontAwesomeIcon \r\n                                icon={faChessQueen}\r\n                                color=\"#000\"\r\n                                className=\"choose-piece\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"difficulties\">\r\n                    <div className=\"difficulty active\" onClick={(e) => changeDifficulty(e)}>Easy</div>\r\n                    <div className=\"difficulty\" onClick={(e) => changeDifficulty(e)}>Medium</div>\r\n                    <div className=\"difficulty\" onClick={(e) => changeDifficulty(e)}>Hard</div>\r\n                    <div className=\"difficulty\" onClick={(e) => changeDifficulty(e)}>Very Hard</div>\r\n                </div>\r\n\r\n                <div className=\"start\">\r\n                    <Link to=\"/computer\">\r\n                        <button className=\"start-button\" onClick={() => startComputerGame()}>Start game!</button>\r\n                    </Link>\r\n                    \r\n                </div>\r\n                <div className=\"icon\"></div>\r\n                <div className=\"icon\"></div>\r\n                </div>\r\n\r\n        </div>\r\n    );\r\n};","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Board.jsx",["82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\n\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function Board({ color, prevButtons, random }) {\r\n\r\n    const setColor = color;\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"next-moves\") !== null ? JSON.parse(localStorage.getItem(\"next-moves\")) : []);\r\n \r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    console.log(boardRef.current);\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n        console.log(prevButtons, prevMoves, lastMove.pieceCode);\r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n        setNewVirtualBoard(currBoard);\r\n\r\n        if (prevButtons.classList.contains('prev-button')) {\r\n            const newNextMoves = [...nextMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n            localStorage.setItem(\"prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n            localStorage.setItem(\"next-moves\", JSON.stringify(newNextMoves));\r\n\r\n            setPrevMoves(prevMoves.slice(0, -1));\r\n            setNextMoves(newNextMoves);\r\n\r\n        } else  {\r\n            console.log('ok from here');\r\n            const newPrevMoves = [...prevMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n\r\n            localStorage.setItem(\"prev-moves\", JSON.stringify(newPrevMoves));\r\n            localStorage.setItem(\"next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n            setNextMoves(nextMoves.slice(0, -1));\r\n            setPrevMoves(newPrevMoves);\r\n        }\r\n\r\n        localStorage.setItem(\"current-move\", -currentMove);\r\n        localStorage.setItem(\"board\", JSON.stringify(currBoard));\r\n        \r\n        setCurrentMove(-currentMove);\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0 && frontElement === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove);\r\n        const check = checkCheckOptimised(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n            console.log(cloneIcon, prevMoves);\r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0) || (squareDOM && pieceCode === -1 && currentX === 7)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n            } else { \r\n                setPawnTransform(null);\r\n            }\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            console.log(oldX, oldY, currentX, currentY);\r\n\r\n            console.log(cloneVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n\r\n            console.log(cloneVirtualBoard);\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            console.log(checkMateOpponent);\r\n            if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            localStorage.setItem(\"current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        console.log(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        if (!isFromCheckMate) console.log(previewVirtualBoard.current);\r\n\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n        const pieceCode = kCode / (-6);\r\n\r\n        let check = false;\r\n\r\n        const kingPossibleSquares = [\r\n            [currentX - 1, currentY - 1],\r\n            [currentX - 1, currentY],\r\n            [currentX - 1, currentY + 1],\r\n            [currentX, currentY - 1],\r\n            [currentX, currentY + 1],\r\n            [currentX + 1, currentY - 1],\r\n            [currentX + 1, currentY],\r\n            [currentX + 1, currentY + 1]\r\n        ];\r\n\r\n        console.log(previewVirtualBoard.current, pieceCode);\r\n\r\n        kingPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === -kCode && square !== null) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        // Pawns \r\n\r\n        const pawnPossibleSquares = [\r\n            [currentX + (pieceCode * setColor), currentY - (pieceCode * setColor)],\r\n            [currentX + (pieceCode * setColor), currentY + (pieceCode * setColor)]\r\n        ];\r\n        \r\n        console.log(pawnPossibleSquares);\r\n\r\n        pawnPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                console.log('check');\r\n                check = true;\r\n            }\r\n        });\r\n        \r\n        // Rows\r\n\r\n        if (currentX > 0) {\r\n            for (let i = currentX - 1; i >= 0; i--) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n                \r\n                console.log(5 * pieceCode, rowSquare);\r\n\r\n                if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\r\n                    if (!isFromCheckMate) {\r\n                        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                        checkCheckmate(kCode, newVirtualBoard);\r\n                        previewVirtualBoard.current = oldBoard;\r\n                    }\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentX < ROWS - 1) {\r\n            for (let i = currentX + 1; i < ROWS; i++) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n\r\n                console.log(5 * pieceCode, rowSquare);\r\n               \r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\r\n                   \r\n                    if (!isFromCheckMate) {\r\n                        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                        const checkMate = checkCheckmate(kCode, newVirtualBoard);\r\n                        console.log(checkMate);\r\n                        if (checkMate) setGameRunning(false);\r\n                        previewVirtualBoard.current = oldBoard;\r\n                    }\r\n                    console.log(\"here in if\")\r\n                    \r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Columns \r\n\r\n        if (currentY > 0) {\r\n            for (let i = currentY - 1; i >= 0; i--) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    \r\n                    if (!isFromCheckMate) {\r\n                        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                        checkCheckmate(kCode, newVirtualBoard);\r\n                        previewVirtualBoard.current = oldBoard;\r\n                        \r\n                    }\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentY < COLUMNS - 1) {\r\n            for (let i = currentX + 1; i < COLUMNS; i++) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    \r\n                    if (!isFromCheckMate) {\r\n                        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                        checkCheckmate(kCode, newVirtualBoard);\r\n                        previewVirtualBoard.current = oldBoard;\r\n                    }\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top left\r\n        \r\n        if (currentX > 0 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top right\r\n\r\n        if (currentX > 0 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom left\r\n\r\n        if (currentX < ROWS - 1 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom right\r\n\r\n        if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                console.log(newX, newY, square, 5 * pieceCode);\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    \r\n                    if (!isFromCheckMate) {\r\n                        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                        checkCheckmate(kCode, newVirtualBoard);\r\n                        previewVirtualBoard.current = oldBoard;\r\n                    }\r\n                    check = true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Knight moves\r\n\r\n        const knightPossibleMoves = [\r\n            [currentX - 2, currentY - 1],\r\n            [currentX - 2, currentY + 1],\r\n            [currentX + 2, currentY - 1],\r\n            [currentX + 2, currentY + 1],\r\n            [currentX - 1, currentY - 2],\r\n            [currentX - 1, currentY + 2],\r\n            [currentX + 1, currentY - 2],\r\n            [currentX + 1, currentY + 2]\r\n        ];\r\n\r\n        \r\n        \r\n        knightPossibleMoves.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode * 3) { \r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        return check;\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                \r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n\r\n\r\n                console.log(newBoard, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = -1;\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheckOptimised(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n                \r\n            });\r\n        });\r\n        \r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n       if (checkMate) setGameRunning(false);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\RightSide.jsx",[],"A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\LeftSide.jsx",[],"A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\PreviousButton.jsx",[],"A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\ResetButton.jsx",["100"],"import React, { Component } from \"react\";\r\n\r\nexport default class ResetButton extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.computerGame = this.props.computerGame;\r\n    }\r\n\r\n    resetGame() {\r\n        if (this.computerGame) { \r\n            for (let i = 0, len = localStorage.length; i < len; i++) {\r\n                const key = localStorage.key(i);\r\n                console.log(key);\r\n                if (key === null) continue;\r\n                if (key.search(\"computer-\") !== -1) localStorage.removeItem(key);\r\n            }\r\n        }\r\n        else localStorage.clear();\r\n        window.location.reload();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"reset-button\" onClick={() => this.resetGame()}>\r\n                <h2>Reset Game</h2>\r\n            </div>\r\n        );\r\n    }\r\n \r\n};","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Classic.jsx",["101","102"],"import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport Board from './Board';\r\nimport RightSide from \"./RightSide\";\r\nimport LeftSide from \"./LeftSide\";\r\n\r\nimport '../styles/home.css';\r\n\r\nexport default function Classic() {\r\n\r\n    const [buttonsTarget, setButtonsTarget] = useState(null);\r\n    const [random, setRandom] = useState(null);\r\n\r\n    const returnButtonsClick = (e) => {\r\n\r\n        let newTarget = e.target;\r\n\r\n        while (!newTarget.classList.contains('button')) {\r\n            newTarget = newTarget.parentElement;\r\n        }\r\n\r\n        setButtonsTarget(newTarget);\r\n        setRandom(Math.random());\r\n    };\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"game\">\r\n                <LeftSide />\r\n                <Board color={1} prevButtons={buttonsTarget} random={random}/>\r\n                <RightSide clickButton={returnButtonsClick} computerGame={false}/>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n};","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Online.jsx",["103","104","105","106","107","108","109"],"import React, {useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport Board from './Board';\r\nimport OnlineBoard from \"./OnlineBoard\";\r\nimport RightSide from \"./RightSide\";\r\nimport LeftSide from \"./LeftSide\";\r\n\r\nimport '../styles/home.css';\r\n\r\nexport default function Online({ socket }) {\r\n\r\n    const { id } = useParams();\r\n\r\n    const [color, setColor] = useState(null);\r\n    const [buttonsTarget, setButtonsTarget] = useState(null);\r\n    const [random, setRandom] = useState(null);\r\n    const [done, setDone] = useState(true);\r\n    const [numberOfPlayers, setNumberOfPlayers] = useState(null);\r\n\r\n    let players;\r\n\r\n    socket.on(\"rooms\", rooms => {\r\n        const isThisRoom = [...Object.keys(rooms)].filter(room => room == id);\r\n        if (isThisRoom === undefined) return null;\r\n    });\r\n\r\n    socket.emit(\"create-room\", id);\r\n\r\n    socket.emit(\"get-players\");\r\n\r\n    socket.on(\"players\", player => {\r\n        console.log(player, id, socket.id, JSON.parse(localStorage.getItem(\"socket\")));\r\n        const ownColor = localStorage.getItem(\"player\") !== null ? localStorage.getItem(\"player\") : player === 1 ? 1 : -1;\r\n        setColor(ownColor);\r\n        if (parseInt(ownColor) === -1) {\r\n            for (let i = 0; i < localStorage.length; i++) {\r\n                const key = localStorage.key(i);\r\n                console.log(key);\r\n                if (key.includes('online-')) localStorage.removeItem(key);\r\n            }\r\n        }\r\n        \r\n        if (localStorage.getItem(\"player\") === null) localStorage.setItem(\"player\", player === 1 ? player : -1);\r\n        setNumberOfPlayers(player);\r\n        // if (localStorage.getItem(\"id\") === null) localStorage.setItem(\"id\", parseInt(id));\r\n        // else if (localStorage.getItem(\"id\") !== parseInt(id) && localStorage.length !== 0) {\r\n        //     localStorage.removeItem(\"id\");\r\n        //     localStorage.clear();\r\n        //     // window.location.reload();\r\n        // }\r\n    });\r\n   \r\n    // if (id != JSON.parse(localStorage.getItem(\"socket\"))) return null;\r\n    // Request for room's players\r\n\r\n    const returnButtonsClick = (e) => {\r\n\r\n        let newTarget = e.target;\r\n\r\n        while (!newTarget.classList.contains('button')) {\r\n            newTarget = newTarget.parentElement;\r\n        }\r\n\r\n        setButtonsTarget(newTarget);\r\n        setRandom(Math.random());\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (numberOfPlayers === null) return null;\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"game\">\r\n                    <LeftSide />\r\n                    <OnlineBoard color={color} prevButtons={buttonsTarget} random={random} socket={socket} oppId=\"ij3YC-_VZmKbEahoAABH\" players={numberOfPlayers} />\r\n                    <RightSide clickButton={returnButtonsClick}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }, [numberOfPlayers])\r\n\r\n    \r\n    return color && (\r\n        <div className=\"content\">\r\n            <div className=\"game\">\r\n                <LeftSide />\r\n                <OnlineBoard color={color} prevButtons={buttonsTarget} random={random} socket={socket} oppId=\"ij3YC-_VZmKbEahoAABH\" players={numberOfPlayers} />\r\n                <RightSide clickButton={returnButtonsClick} empty={true}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\OnlineBoard.jsx",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\nimport OnlineSocket from \"./OnlineSocket\";\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function OnlineBoard({ color, prevButtons, random, socket, oppId, players }) {\r\n\r\n    const setColor = color;\r\n    console.log(players);\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"online-current-move\") === null ? 1 : localStorage.getItem(\"online-current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"online-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"online-board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n   \r\n    const [sendPiece, setSendPiece] = useState(null);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n           \r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n               \r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                       \r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                      \r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                   \r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            \r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n     \r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        \r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n      \r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n               \r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                       \r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n       \r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        \r\n        \r\n        setActivePiece(null);\r\n       \r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        if (currentMove != setColor) return;\r\n        if (players !== 2) return;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n      \r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n\r\n        const check = checkCheckOptimised(kingSquare, currentMove * 6);\r\n        console.log(check, previewVirtualBoard.current);\r\n\r\n        let sound = \"move\";\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n         \r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n                sound = \"take\";\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0) || (squareDOM && pieceCode === -1 && currentX === 7)) {\r\n                \r\n               \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n              \r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n            } else { \r\n                setPawnTransform(null);\r\n            }\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            // Checking if it's rocade\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                \r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n              \r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n            \r\n            const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n         \r\n            if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            \r\n            const mirrorOldX = 7 - oldX;\r\n            const mirrorOldY = 7 - oldY;\r\n            const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\r\n           \r\n            const mirrorNewX = 7 - currentX;\r\n            const mirrorNewY = 7 - currentY;\r\n            const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\r\n            \r\n            setSendPiece(mirrorOldIdx + mirrorNewIdx + pieceCode);\r\n            socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode, sound);\r\n            \r\n            \r\n\r\n            localStorage.setItem(\"online-current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n\r\n\r\n            localStorage.setItem(\"online-board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n      \r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n           \r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        \r\n        previewVirtualBoard.current = newBoard;\r\n    \r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"online-board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n         \r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n          \r\n            return possibleMovesCheck.some(currSquare => {\r\n               \r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n        const pieceCode = kCode / (-6);\r\n\r\n        let check = false;\r\n\r\n        const kingPossibleSquares = [\r\n            [currentX - 1, currentY - 1],\r\n            [currentX - 1, currentY],\r\n            [currentX - 1, currentY + 1],\r\n            [currentX, currentY - 1],\r\n            [currentX, currentY + 1],\r\n            [currentX + 1, currentY - 1],\r\n            [currentX + 1, currentY],\r\n            [currentX + 1, currentY + 1]\r\n        ];\r\n\r\n        console.log(previewVirtualBoard.current, pieceCode);\r\n\r\n        kingPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === -kCode && square !== null) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        // Pawns \r\n\r\n        const pawnPossibleSquares = [\r\n            [currentX + (pieceCode * setColor), currentY - (pieceCode * setColor)],\r\n            [currentX + (pieceCode * setColor), currentY + (pieceCode * setColor)]\r\n        ];\r\n        \r\n        console.log(pawnPossibleSquares);\r\n\r\n        pawnPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                console.log('check');\r\n                check = true;\r\n            }\r\n        });\r\n        \r\n        // Rows\r\n\r\n        if (currentX > 0) {\r\n            for (let i = currentX - 1; i >= 0; i--) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentX < ROWS - 1) {\r\n            for (let i = currentX + 1; i < ROWS; i++) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n\r\n                console.log(rowSquare, pieceCode, previewVirtualBoard.current);\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) {\r\n                        const checkMate = checkCheckmate(kCode, newVirtualBoard);\r\n                        console.log(checkMate);\r\n                    }\r\n                    console.log(\"here in if\")\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Columns \r\n\r\n        if (currentY > 0) {\r\n            for (let i = currentY - 1; i >= 0; i--) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentY < COLUMNS - 1) {\r\n            for (let i = currentX + 1; i < COLUMNS; i++) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top left\r\n        \r\n        if (currentX > 0 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top right\r\n\r\n        if (currentX > 0 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom left\r\n\r\n        if (currentX < ROWS - 1 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom right\r\n\r\n        if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Knight moves\r\n\r\n        const knightPossibleMoves = [\r\n            [currentX - 2, currentY - 1],\r\n            [currentX - 2, currentY + 1],\r\n            [currentX + 2, currentY - 1],\r\n            [currentX + 2, currentY + 1],\r\n            [currentX - 1, currentY - 2],\r\n            [currentX - 1, currentY + 2],\r\n            [currentX + 1, currentY - 2],\r\n            [currentX + 1, currentY + 2]\r\n        ];\r\n\r\n        \r\n        \r\n        knightPossibleMoves.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode * 3) { \r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        return check;\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                \r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n\r\n\r\n                console.log(newBoard, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = -1;\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheckOptimised(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n                \r\n            });\r\n        });\r\n        \r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n       if (checkMate) setGameRunning(false);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n       \r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n         \r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        socket.on('send-piece', (oldIdx, newIdx, pieceCode, sound) => {\r\n            const iconContainerElement = currSquareElement.current[oldIdx].firstChild;\r\n            console.log('use effect', newVirtualBoard, sendPiece);\r\n            const cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n            const serverOldX = parseInt(oldIdx / 8);\r\n            const serverOldY = oldIdx % 8;\r\n            cloneVirtualBoard[serverOldX][serverOldY] = 0;\r\n            const serverNewX = parseInt(newIdx / 8);\r\n            const serverNewY = newIdx % 8;\r\n            cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\r\n\r\n            pieceSound.pause();\r\n            pieceCapture.pause();\r\n            pieceSound.currentTime = 0;\r\n            pieceCapture.currentTime = 0;\r\n            iconContainerElement.classList.add('opponent');\r\n            iconContainerElement.style.setProperty(\"--element-left\", `${(serverNewY - serverOldY) * 100}px`);\r\n            iconContainerElement.style.setProperty(\"--element-top\", `${(serverNewX - serverOldX) * 100}px`)\r\n            iconContainerElement.classList.add('changed-move');\r\n\r\n            previewVirtualBoard.current = cloneDeep(cloneVirtualBoard);\r\n\r\n\r\n            iconContainerElement.addEventListener(\"transitionend\", () => {\r\n                if (sound === \"move\") pieceSound.play();\r\n                else pieceCapture.play();\r\n                iconContainerElement.style.zIndex = 'initial';\r\n                iconContainerElement.style.position = 'initial';\r\n                iconContainerElement.style.left = `initial`;\r\n                iconContainerElement.style.top = `initial`;\r\n                iconContainerElement.style.transform = 'initial';\r\n                localStorage.setItem(\"online-current-move\", -currentMove);\r\n                setCurrentMove(-currentMove);\r\n                localStorage.setItem(\"online-board\", JSON.stringify(cloneVirtualBoard));\r\n                setNewVirtualBoard(cloneVirtualBoard);      \r\n            });\r\n        });\r\n        \r\n    }, [sendPiece]);\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\Computer.jsx",["134","135"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport ComputerBoard from \"./ComputerBoard\";\r\nimport LeftSide from \"./LeftSide\";\r\nimport RightSide from \"./RightSide\";\r\n\r\nimport '../styles/home.css';\r\n\r\nexport default function Computer({ color, difficulty }) {\r\n\r\n    console.log(difficulty);\r\n\r\n    const [buttonsTarget, setButtonsTarget] = useState(null);\r\n    const [random, setRandom] = useState(null);\r\n\r\n    const returnButtonsClick = (e) => {\r\n\r\n        let newTarget = e.target;\r\n\r\n        while (!newTarget.classList.contains('button')) {\r\n            newTarget = newTarget.parentElement;\r\n        }\r\n\r\n        setButtonsTarget(newTarget);\r\n        setRandom(Math.random());\r\n    };\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"game\">\r\n                <LeftSide />\r\n                <ComputerBoard color={!color ? 1 : color} prevButtons={buttonsTarget} random={random} difficulty={!difficulty ? \"easy\" : difficulty} />\r\n                <RightSide clickButton={returnButtonsClick} computerGame={true}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\ComputerBoard.jsx",["136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\nimport { isArray } from \"lodash\";\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function ComputerBoard({ color, prevButtons, random, difficulty }) {\r\n\r\n    const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\r\n    localStorage.setItem(\"set-color\", setColor);\r\n    const currDifficulty = localStorage.getItem(\"computer-difficulty\") !== null ? difficulty : JSON.parse(localStorage.getItem(\"computer-difficulty\"));\r\n    localStorage.setItem(\"computer-difficulty\", JSON.stringify(difficulty));\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\r\n    const [movedFirst, setMovedFirst] = useState(false);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    console.log(virtualBoard);\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n        console.log(prevButtons, prevMoves, lastMove.pieceCode);\r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n        setNewVirtualBoard(currBoard);\r\n\r\n        if (prevButtons.classList.contains('prev-button')) {\r\n            const newNextMoves = [...nextMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\r\n\r\n            setPrevMoves(prevMoves.slice(0, -1));\r\n            setNextMoves(newNextMoves);\r\n\r\n        } else  {\r\n            console.log('ok from here');\r\n            const newPrevMoves = [...prevMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n            setNextMoves(nextMoves.slice(0, -1));\r\n            setPrevMoves(newPrevMoves);\r\n        }\r\n\r\n        localStorage.setItem(\"computer-current-move\", -currentMove);\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\r\n        \r\n        setCurrentMove(-currentMove);\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0 && frontElement === 0) possibleMoves.push(newFrontCoords);\r\n            \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n\r\n        \r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 15;\r\n        const y = e.clientY - 15;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        if (setColor != currentMove) {\r\n            console.log('here', setColor, currentMove);\r\n            return;\r\n        }\r\n\r\n        const oldBoard = cloneDeep(newVirtualBoard);\r\n        const otherBoard = cloneDeep(newVirtualBoard);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === setColor * 6 && !checkOppositeColor(iconColor, setColor)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove,  previewVirtualBoard.current);\r\n        const check = checkCheckOptimised(kingSquare, setColor * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n            console.log(cloneIcon, prevMoves);\r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n            let skipComputerMove = false;\r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1) || (squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1) || (squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1) || (squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n                skipComputerMove = true;\r\n\r\n            } else setPawnTransform(null);\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n            console.log(oldX, oldY, currentX, currentY);\r\n            console.log(cloneVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n\r\n            console.log(cloneVirtualBoard);\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            // console.log(checkMateOpponent);\r\n            // if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            localStorage.setItem(\"computer-current-move\", -currentMove);\r\n            // setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            if (!skipComputerMove) computerMove(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const computerMove = (newBoard) => {\r\n        console.log('none', currentMove);\r\n        let currMove = currentMove;\r\n        setCurrentMove(-currMove);\r\n\r\n        const possibleMoves = getAllMoves(-currMove, newBoard);\r\n        console.log(possibleMoves)\r\n        if (possibleMoves.length === 0) {\r\n            setGameRunning(false);\r\n            return;\r\n        }\r\n\r\n        let newPossibleMoves, newMove;\r\n\r\n        if (currDifficulty === \"easy\") {\r\n            newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n            newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\r\n           \r\n        } else if (currDifficulty === \"medium\") {\r\n            \r\n            let minNum = { number: Number.POSITIVE_INFINITY };\r\n            possibleMoves.forEach(move => {\r\n                move.moves.forEach(possMove => {\r\n                    if (newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < minNum.number) {\r\n                        minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]); \r\n                        newMove = possMove;\r\n                        newPossibleMoves = move; \r\n                    }\r\n                });\r\n            });\r\n\r\n            if (minNum.number === Number.POSITIVE_INFINITY) {\r\n                newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n                newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\r\n            }\r\n            \r\n        } else if (currDifficulty === \"hard\") {\r\n            \r\n            let minNum = { number: Number.POSITIVE_INFINITY };\r\n            possibleMoves.forEach(move => {\r\n                move.moves.forEach(possMove => {\r\n                    if (newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < minNum.number) {\r\n                        if (Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < 0) {\r\n                            minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]); \r\n                            newMove = possMove;\r\n                            newPossibleMoves = move;\r\n                        } else if (!isDefensed(newBoard, move.idx, possMove)) {\r\n                            console.log('no, is not defensed');\r\n\r\n\r\n                            minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]); \r\n                            newMove = possMove;\r\n                            newPossibleMoves = move;\r\n                        }\r\n                       \r\n                    }\r\n\r\n                });\r\n            });\r\n\r\n            if (minNum.number === Number.POSITIVE_INFINITY) {\r\n                newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n                newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\r\n            }\r\n\r\n        } else if (currDifficulty === \"very hard\") {\r\n            \r\n        }\r\n       \r\n        console.log(newMove);\r\n        let cloneVirtualBoard = cloneDeep(newBoard);\r\n\r\n        const oldX = parseInt(newPossibleMoves.idx / 8);\r\n        const oldY = newPossibleMoves.idx % 8;\r\n        const newX = parseInt(newMove / 8);\r\n        const newY = newMove % 8;\r\n\r\n        const iconContainerElement = currSquareElement.current[newPossibleMoves.idx].firstChild;\r\n        iconContainerElement.classList.add('opponent');\r\n        iconContainerElement.style.setProperty(\"--element-left\", `${(newY - oldY) * 100}px`);\r\n        iconContainerElement.style.setProperty(\"--element-top\", `${(newX - oldX) * 100}px`)\r\n        iconContainerElement.classList.add('changed-move');\r\n        \r\n        setTimeout(() => {\r\n            // iconContainerElement.classList.remove('opponent');\r\n            iconContainerElement.style.zIndex = 'initial';\r\n            iconContainerElement.style.position = 'initial';\r\n            iconContainerElement.style.left = `initial`;\r\n            iconContainerElement.style.top = `initial`;\r\n            iconContainerElement.style.transform = 'initial';\r\n            \r\n           \r\n            let sound;\r\n            if (cloneVirtualBoard[newX][newY] !== 0) sound = pieceCapture;\r\n            else sound = pieceSound;\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[newX][newY] = newPossibleMoves.piece;\r\n\r\n            localStorage.setItem(\"computer-current-move\", setColor);\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n            sound.play();\r\n            setCurrentMove(currMove);\r\n\r\n          \r\n        }, 750);\r\n    };\r\n\r\n    const isDefensed = (board, computerIdx, playerIdx) => {\r\n        const computerPiece = board[parseInt(computerIdx / 8)][computerIdx % 8];\r\n        const playerPiece = board[parseInt(playerIdx / 8)][playerIdx % 8];\r\n        \r\n        let squareBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => squareBoard.push(square));\r\n        });\r\n\r\n        const playerPiecesUnfiltered = squareBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, setColor) && square !== 0) return {\r\n                piece: square,\r\n                idx: idx\r\n            }\r\n        });\r\n\r\n        const playerPieces = playerPiecesUnfiltered.filter(square => square !== undefined);\r\n\r\n        console.log(playerPieces);\r\n\r\n        let cloneBoard = cloneDeep(board);\r\n        cloneBoard[parseInt(playerIdx / 8)][playerIdx % 8] = 0;\r\n\r\n        // Get possible moves for each piece\r\n\r\n        return playerPieces.some(piece => {\r\n            const playerPossibleMoves = getPossibleMoves(piece.piece, piece.idx, cloneBoard);\r\n            return playerPossibleMoves.some(move => move === playerIdx);\r\n        });\r\n    };\r\n\r\n\r\n    const getAllMoves = (color, newBoard) => {\r\n        let currBoard = [];\r\n\r\n        newBoard.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        let possibleMoves = [], allMoves = [];\r\n\r\n        currBoard.forEach((square, idx) => {\r\n            if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\r\n                piece: square, \r\n                idx: idx\r\n            });\r\n        });\r\n\r\n        possibleMoves.length !== 0 && possibleMoves.forEach(move => {\r\n            const currPossMoves = getPossibleMoves(move.piece, move.idx, newBoard);\r\n            console.log(move);\r\n            const currMoves = currPossMoves.length !== 0 && isArray(currPossMoves) ? currPossMoves.filter(currPieceMove => {\r\n                if (currPieceMove.rocade != null) return false;\r\n                let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\r\n                console.log(move.idx, currPieceMove);\r\n                previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\r\n                previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\r\n                let kingSquare;\r\n                console.log(newVirtualBoard);\r\n                previewVirtualBoard.current.forEach((row, rowIdx) => {\r\n                    row.forEach((square, squareIdx) => {\r\n                        if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\r\n                    });\r\n                });\r\n                \r\n                const isCheck = checkCheckOptimised(kingSquare, -setColor * 6);\r\n                previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\r\n                \r\n                return !isCheck;\r\n            }) : [];\r\n\r\n            console.log(currMoves);\r\n            \r\n            if (currMoves.length !== 0) {\r\n                allMoves.push({\r\n                    piece: move.piece,\r\n                    idx: move.idx, \r\n                    moves: currMoves\r\n                });\r\n            }\r\n        });\r\n\r\n        console.log(allMoves);\r\n\r\n        return allMoves;\r\n    };\r\n\r\n    const computerMoveFirst = () => {\r\n        let newBoard1 = cloneDeep(newVirtualBoard);\r\n        newBoard1[2][0] = 0;\r\n        newBoard1[0][1] = 3;\r\n        setNewVirtualBoard(newBoard1);\r\n        const possibleMoves = getAllMoves(currentMove, newBoard1);\r\n        console.log(possibleMoves, Math.random() * possibleMoves.length);\r\n        const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n        console.log(randomMove);\r\n        let cloneVirtualBoard = cloneDeep(newBoard1);\r\n\r\n        const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n        const oldY = randomPossibleMoves.idx % 8;\r\n        const newX = parseInt(randomMove / 8);\r\n        const newY = randomMove % 8;\r\n        console.log(newX, newY);\r\n\r\n        const iconContainerElement = currSquareElement.current[randomPossibleMoves.idx].firstChild;\r\n        iconContainerElement.classList.add('opponent');\r\n        iconContainerElement.style.setProperty(\"--element-left\", `${(newY - oldY) * 100}px`);\r\n        iconContainerElement.style.setProperty(\"--element-top\", `${(newX - oldX) * 100}px`)\r\n        iconContainerElement.classList.add('changed-move');\r\n        \r\n        setTimeout(() => {\r\n            // iconContainerElement.classList.remove('opponent');\r\n            iconContainerElement.style.zIndex = 'initial';\r\n            iconContainerElement.style.position = 'initial';\r\n            iconContainerElement.style.left = `initial`;\r\n            iconContainerElement.style.top = `initial`;\r\n            iconContainerElement.style.transform = 'initial';\r\n            \r\n           \r\n            let sound;\r\n            if (cloneVirtualBoard[newX][newY] !== 0) sound = pieceCapture;\r\n            else sound = pieceSound;\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n\r\n            localStorage.setItem(\"computer-current-move\", setColor);\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n            sound.play();\r\n            setCurrentMove(setColor);\r\n\r\n          \r\n        }, 750);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (setColor === -1) computerMoveFirst();\r\n    }, []);\r\n    \r\n       \r\n \r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        console.log(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        console.log(kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        console.log(oppositeSquaresClone);\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(oppositeSquares, kingSquare);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n            console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMoves);\r\n            return possibleMovesCheck.some(currSquare => {\r\n                \r\n                console.log(currSquare, kingSquare);\r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n        const pieceCode = kCode / (-6);\r\n\r\n        let check = false;\r\n\r\n        const kingPossibleSquares = [\r\n            [currentX - 1, currentY - 1],\r\n            [currentX - 1, currentY],\r\n            [currentX - 1, currentY + 1],\r\n            [currentX, currentY - 1],\r\n            [currentX, currentY + 1],\r\n            [currentX + 1, currentY - 1],\r\n            [currentX + 1, currentY],\r\n            [currentX + 1, currentY + 1]\r\n        ];\r\n\r\n        console.log(previewVirtualBoard.current, pieceCode);\r\n\r\n        kingPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === -kCode && square !== null) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        // Pawns \r\n\r\n        const pawnPossibleSquares = [\r\n            [currentX + (pieceCode * setColor), currentY - (pieceCode * setColor)],\r\n            [currentX + (pieceCode * setColor), currentY + (pieceCode * setColor)]\r\n        ];\r\n        \r\n        console.log(pawnPossibleSquares);\r\n\r\n        pawnPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                console.log('check');\r\n                check = true;\r\n            }\r\n        });\r\n        \r\n        // Rows\r\n\r\n        if (currentX > 0) {\r\n            for (let i = currentX - 1; i >= 0; i--) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentX < ROWS - 1) {\r\n            for (let i = currentX + 1; i < ROWS; i++) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n\r\n                console.log(rowSquare, pieceCode, previewVirtualBoard.current);\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) {\r\n                        const checkMate = checkCheckmate(kCode, newVirtualBoard);\r\n                        console.log(checkMate);\r\n                    }\r\n                    console.log(\"here in if\")\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Columns \r\n\r\n        if (currentY > 0) {\r\n            for (let i = currentY - 1; i >= 0; i--) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentY < COLUMNS - 1) {\r\n            for (let i = currentX + 1; i < COLUMNS; i++) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top left\r\n        \r\n        if (currentX > 0 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top right\r\n\r\n        if (currentX > 0 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom left\r\n\r\n        if (currentX < ROWS - 1 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom right\r\n\r\n        if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Knight moves\r\n\r\n        const knightPossibleMoves = [\r\n            [currentX - 2, currentY - 1],\r\n            [currentX - 2, currentY + 1],\r\n            [currentX + 2, currentY - 1],\r\n            [currentX + 2, currentY + 1],\r\n            [currentX - 1, currentY - 2],\r\n            [currentX - 1, currentY + 2],\r\n            [currentX + 1, currentY - 2],\r\n            [currentX + 1, currentY + 2]\r\n        ];\r\n\r\n        \r\n        \r\n        knightPossibleMoves.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode * 3) { \r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        return check;\r\n    };\r\n\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                \r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                console.log(newBoard, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = -1;\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheckOptimised(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n                \r\n            });\r\n        });\r\n        \r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n       if (checkMate) setGameRunning(false);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","A:\\Js\\Chess\\chess-1.3\\chess\\src\\Components\\OnlineSocket.jsx",[],{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":15,"column":9,"nodeType":"169","messageId":"170","endLine":15,"endColumn":11},{"ruleId":"171","severity":1,"message":"172","line":26,"column":18,"nodeType":"173","endLine":26,"endColumn":27},{"ruleId":"171","severity":1,"message":"174","line":91,"column":8,"nodeType":"175","endLine":91,"endColumn":39,"suggestions":"176"},{"ruleId":"167","severity":1,"message":"177","line":1,"column":27,"nodeType":"169","messageId":"170","endLine":1,"endColumn":36},{"ruleId":"167","severity":1,"message":"178","line":4,"column":27,"nodeType":"169","messageId":"170","endLine":4,"endColumn":34},{"ruleId":"167","severity":1,"message":"179","line":4,"column":56,"nodeType":"169","messageId":"170","endLine":4,"endColumn":67},{"ruleId":"167","severity":1,"message":"180","line":24,"column":12,"nodeType":"169","messageId":"170","endLine":24,"endColumn":30},{"ruleId":"167","severity":1,"message":"181","line":29,"column":11,"nodeType":"169","messageId":"170","endLine":29,"endColumn":23},{"ruleId":"167","severity":1,"message":"182","line":12,"column":7,"nodeType":"169","messageId":"170","endLine":12,"endColumn":14},{"ruleId":"167","severity":1,"message":"183","line":47,"column":12,"nodeType":"169","messageId":"170","endLine":47,"endColumn":30},{"ruleId":"167","severity":1,"message":"184","line":47,"column":32,"nodeType":"169","messageId":"170","endLine":47,"endColumn":53},{"ruleId":"167","severity":1,"message":"185","line":52,"column":26,"nodeType":"169","messageId":"170","endLine":52,"endColumn":41},{"ruleId":"167","severity":1,"message":"186","line":63,"column":11,"nodeType":"169","messageId":"170","endLine":63,"endColumn":22},{"ruleId":"167","severity":1,"message":"187","line":103,"column":11,"nodeType":"169","messageId":"170","endLine":103,"endColumn":23},{"ruleId":"171","severity":1,"message":"188","line":163,"column":8,"nodeType":"175","endLine":163,"endColumn":16,"suggestions":"189"},{"ruleId":"167","severity":1,"message":"190","line":865,"column":19,"nodeType":"169","messageId":"170","endLine":865,"endColumn":20},{"ruleId":"167","severity":1,"message":"191","line":866,"column":19,"nodeType":"169","messageId":"170","endLine":866,"endColumn":20},{"ruleId":"192","severity":1,"message":"193","line":887,"column":138,"nodeType":"194","messageId":"195","endLine":887,"endColumn":140},{"ruleId":"192","severity":1,"message":"193","line":887,"column":158,"nodeType":"194","messageId":"195","endLine":887,"endColumn":160},{"ruleId":"167","severity":1,"message":"196","line":893,"column":17,"nodeType":"169","messageId":"170","endLine":893,"endColumn":25},{"ruleId":"167","severity":1,"message":"197","line":1017,"column":11,"nodeType":"169","messageId":"170","endLine":1017,"endColumn":24},{"ruleId":"198","severity":1,"message":"199","line":1025,"column":60,"nodeType":"200","messageId":"201","endLine":1025,"endColumn":62},{"ruleId":"198","severity":1,"message":"202","line":1033,"column":62,"nodeType":"200","messageId":"201","endLine":1033,"endColumn":64},{"ruleId":"167","severity":1,"message":"203","line":1060,"column":15,"nodeType":"169","messageId":"170","endLine":1060,"endColumn":23},{"ruleId":"198","severity":1,"message":"199","line":1364,"column":60,"nodeType":"200","messageId":"201","endLine":1364,"endColumn":62},{"ruleId":"198","severity":1,"message":"199","line":1444,"column":69,"nodeType":"200","messageId":"201","endLine":1444,"endColumn":71},{"ruleId":"167","severity":1,"message":"204","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"167","severity":1,"message":"177","line":1,"column":27,"nodeType":"169","messageId":"170","endLine":1,"endColumn":36},{"ruleId":"167","severity":1,"message":"205","line":1,"column":38,"nodeType":"169","messageId":"170","endLine":1,"endColumn":44},{"ruleId":"167","severity":1,"message":"206","line":3,"column":8,"nodeType":"169","messageId":"170","endLine":3,"endColumn":10},{"ruleId":"167","severity":1,"message":"207","line":5,"column":8,"nodeType":"169","messageId":"170","endLine":5,"endColumn":13},{"ruleId":"167","severity":1,"message":"208","line":19,"column":12,"nodeType":"169","messageId":"170","endLine":19,"endColumn":16},{"ruleId":"167","severity":1,"message":"209","line":19,"column":18,"nodeType":"169","messageId":"170","endLine":19,"endColumn":25},{"ruleId":"167","severity":1,"message":"210","line":22,"column":9,"nodeType":"169","messageId":"170","endLine":22,"endColumn":16},{"ruleId":"211","severity":1,"message":"212","line":25,"column":72,"nodeType":"213","messageId":"214","endLine":25,"endColumn":74},{"ruleId":"171","severity":1,"message":"215","line":83,"column":8,"nodeType":"175","endLine":83,"endColumn":25,"suggestions":"216"},{"ruleId":"167","severity":1,"message":"217","line":9,"column":8,"nodeType":"169","messageId":"170","endLine":9,"endColumn":20},{"ruleId":"167","severity":1,"message":"182","line":12,"column":7,"nodeType":"169","messageId":"170","endLine":12,"endColumn":14},{"ruleId":"167","severity":1,"message":"183","line":47,"column":12,"nodeType":"169","messageId":"170","endLine":47,"endColumn":30},{"ruleId":"167","severity":1,"message":"184","line":47,"column":32,"nodeType":"169","messageId":"170","endLine":47,"endColumn":53},{"ruleId":"167","severity":1,"message":"185","line":52,"column":26,"nodeType":"169","messageId":"170","endLine":52,"endColumn":41},{"ruleId":"167","severity":1,"message":"186","line":63,"column":11,"nodeType":"169","messageId":"170","endLine":63,"endColumn":22},{"ruleId":"167","severity":1,"message":"187","line":101,"column":11,"nodeType":"169","messageId":"170","endLine":101,"endColumn":23},{"ruleId":"211","severity":1,"message":"218","line":780,"column":25,"nodeType":"213","messageId":"214","endLine":780,"endColumn":27},{"ruleId":"167","severity":1,"message":"190","line":801,"column":19,"nodeType":"169","messageId":"170","endLine":801,"endColumn":20},{"ruleId":"167","severity":1,"message":"191","line":802,"column":19,"nodeType":"169","messageId":"170","endLine":802,"endColumn":20},{"ruleId":"167","severity":1,"message":"219","line":822,"column":19,"nodeType":"169","messageId":"170","endLine":822,"endColumn":28},{"ruleId":"192","severity":1,"message":"193","line":825,"column":138,"nodeType":"194","messageId":"195","endLine":825,"endColumn":140},{"ruleId":"192","severity":1,"message":"193","line":825,"column":158,"nodeType":"194","messageId":"195","endLine":825,"endColumn":160},{"ruleId":"167","severity":1,"message":"196","line":832,"column":17,"nodeType":"169","messageId":"170","endLine":832,"endColumn":25},{"ruleId":"167","severity":1,"message":"220","line":908,"column":17,"nodeType":"169","messageId":"170","endLine":908,"endColumn":35},{"ruleId":"167","severity":1,"message":"197","line":952,"column":11,"nodeType":"169","messageId":"170","endLine":952,"endColumn":24},{"ruleId":"198","severity":1,"message":"199","line":960,"column":60,"nodeType":"200","messageId":"201","endLine":960,"endColumn":62},{"ruleId":"198","severity":1,"message":"202","line":968,"column":62,"nodeType":"200","messageId":"201","endLine":968,"endColumn":64},{"ruleId":"167","severity":1,"message":"203","line":995,"column":15,"nodeType":"169","messageId":"170","endLine":995,"endColumn":23},{"ruleId":"167","severity":1,"message":"221","line":1018,"column":11,"nodeType":"169","messageId":"170","endLine":1018,"endColumn":21},{"ruleId":"198","severity":1,"message":"199","line":1029,"column":66,"nodeType":"200","messageId":"201","endLine":1029,"endColumn":68},{"ruleId":"198","severity":1,"message":"199","line":1319,"column":60,"nodeType":"200","messageId":"201","endLine":1319,"endColumn":62},{"ruleId":"198","severity":1,"message":"199","line":1399,"column":69,"nodeType":"200","messageId":"201","endLine":1399,"endColumn":71},{"ruleId":"171","severity":1,"message":"222","line":1525,"column":8,"nodeType":"175","endLine":1525,"endColumn":19,"suggestions":"223"},{"ruleId":"167","severity":1,"message":"177","line":1,"column":27,"nodeType":"169","messageId":"170","endLine":1,"endColumn":36},{"ruleId":"167","severity":1,"message":"205","line":1,"column":38,"nodeType":"169","messageId":"170","endLine":1,"endColumn":44},{"ruleId":"167","severity":1,"message":"182","line":12,"column":7,"nodeType":"169","messageId":"170","endLine":12,"endColumn":14},{"ruleId":"167","severity":1,"message":"183","line":50,"column":12,"nodeType":"169","messageId":"170","endLine":50,"endColumn":30},{"ruleId":"167","severity":1,"message":"184","line":50,"column":32,"nodeType":"169","messageId":"170","endLine":50,"endColumn":53},{"ruleId":"167","severity":1,"message":"185","line":55,"column":26,"nodeType":"169","messageId":"170","endLine":55,"endColumn":41},{"ruleId":"167","severity":1,"message":"224","line":62,"column":12,"nodeType":"169","messageId":"170","endLine":62,"endColumn":22},{"ruleId":"167","severity":1,"message":"225","line":62,"column":24,"nodeType":"169","messageId":"170","endLine":62,"endColumn":37},{"ruleId":"167","severity":1,"message":"186","line":67,"column":11,"nodeType":"169","messageId":"170","endLine":67,"endColumn":22},{"ruleId":"167","severity":1,"message":"187","line":107,"column":11,"nodeType":"169","messageId":"170","endLine":107,"endColumn":23},{"ruleId":"171","severity":1,"message":"188","line":167,"column":8,"nodeType":"175","endLine":167,"endColumn":16,"suggestions":"226"},{"ruleId":"211","severity":1,"message":"218","line":853,"column":22,"nodeType":"213","messageId":"214","endLine":853,"endColumn":24},{"ruleId":"167","severity":1,"message":"190","line":876,"column":19,"nodeType":"169","messageId":"170","endLine":876,"endColumn":20},{"ruleId":"167","severity":1,"message":"191","line":877,"column":19,"nodeType":"169","messageId":"170","endLine":877,"endColumn":20},{"ruleId":"192","severity":1,"message":"193","line":898,"column":138,"nodeType":"194","messageId":"195","endLine":898,"endColumn":140},{"ruleId":"192","severity":1,"message":"193","line":898,"column":158,"nodeType":"194","messageId":"195","endLine":898,"endColumn":160},{"ruleId":"167","severity":1,"message":"196","line":904,"column":17,"nodeType":"169","messageId":"170","endLine":904,"endColumn":25},{"ruleId":"167","severity":1,"message":"197","line":1028,"column":11,"nodeType":"169","messageId":"170","endLine":1028,"endColumn":24},{"ruleId":"198","severity":1,"message":"199","line":1036,"column":60,"nodeType":"200","messageId":"201","endLine":1036,"endColumn":62},{"ruleId":"198","severity":1,"message":"202","line":1044,"column":62,"nodeType":"200","messageId":"201","endLine":1044,"endColumn":64},{"ruleId":"167","severity":1,"message":"227","line":1173,"column":15,"nodeType":"169","messageId":"170","endLine":1173,"endColumn":28},{"ruleId":"167","severity":1,"message":"228","line":1174,"column":15,"nodeType":"169","messageId":"170","endLine":1174,"endColumn":26},{"ruleId":"198","severity":1,"message":"199","line":1182,"column":70,"nodeType":"200","messageId":"201","endLine":1182,"endColumn":72},{"ruleId":"171","severity":1,"message":"229","line":1315,"column":8,"nodeType":"175","endLine":1315,"endColumn":10,"suggestions":"230"},{"ruleId":"167","severity":1,"message":"203","line":1329,"column":15,"nodeType":"169","messageId":"170","endLine":1329,"endColumn":23},{"ruleId":"167","severity":1,"message":"221","line":1352,"column":11,"nodeType":"169","messageId":"170","endLine":1352,"endColumn":21},{"ruleId":"198","severity":1,"message":"199","line":1364,"column":66,"nodeType":"200","messageId":"201","endLine":1364,"endColumn":68},{"ruleId":"198","severity":1,"message":"199","line":1660,"column":60,"nodeType":"200","messageId":"201","endLine":1660,"endColumn":62},{"ruleId":"198","severity":1,"message":"199","line":1737,"column":69,"nodeType":"200","messageId":"201","endLine":1737,"endColumn":71},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","React Hook useEffect has a missing dependency: 'userSocket'. Either include it or remove the dependency array.","ArrayExpression",["233"],"'useEffect' is defined but never used.","'faRobot' is defined but never used.","'faChessPawn' is defined but never used.","'computerDifficulty' is assigned a value but never used.","'colorButtons' is assigned a value but never used.","'SQUARES' is assigned a value but never used.","'currentTotalCoords' is assigned a value but never used.","'setCurrentTotalCoords' is assigned a value but never used.","'setVirtualBoard' is assigned a value but never used.","'oldChildren' is assigned a value but never used.","'player1Color' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentMove', 'newVirtualBoard', 'nextMoves', 'prevButtons', and 'prevMoves'. Either include them or remove the dependency array. You can also do a functional update 'setPrevMoves(p => ...)' if you only need 'prevMoves' in the 'setPrevMoves' call.",["234"],"'x' is assigned a value but never used.","'y' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'newPiece' is assigned a value but never used.","'getContainers' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'totalIdx' is assigned a value but never used.","'Component' is defined but never used.","'useRef' is defined but never used.","'io' is defined but never used.","'Board' is defined but never used.","'done' is assigned a value but never used.","'setDone' is assigned a value but never used.","'players' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'buttonsTarget', 'color', 'random', and 'socket'. Either include them or remove the dependency array.",["235"],"'OnlineSocket' is defined but never used.","Expected '!==' and instead saw '!='.","'cloneIcon' is assigned a value but never used.","'oppositeKingSquare' is assigned a value but never used.","'checkCheck' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentMove', 'newVirtualBoard', 'pieceCapture', 'pieceSound', and 'socket'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentMove(c => ...)' if you only need 'currentMove' in the 'setCurrentMove' call.",["236"],"'movedFirst' is assigned a value but never used.","'setMovedFirst' is assigned a value but never used.",["237"],"'computerPiece' is assigned a value but never used.","'playerPiece' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'computerMoveFirst' and 'setColor'. Either include them or remove the dependency array.",["238"],"no-global-assign","no-unsafe-negation",{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"241","fix":"247"},{"desc":"248","fix":"249"},"Update the dependencies array to be: [playerColor, playerDifficulty, userSocket]",{"range":"250","text":"251"},"Update the dependencies array to be: [currentMove, newVirtualBoard, nextMoves, prevButtons, prevMoves, random]",{"range":"252","text":"253"},"Update the dependencies array to be: [buttonsTarget, color, numberOfPlayers, random, socket]",{"range":"254","text":"255"},"Update the dependencies array to be: [currentMove, newVirtualBoard, pieceCapture, pieceSound, sendPiece, socket]",{"range":"256","text":"257"},{"range":"258","text":"253"},"Update the dependencies array to be: [computerMoveFirst, setColor]",{"range":"259","text":"260"},[3304,3335],"[playerColor, playerDifficulty, userSocket]",[6923,6931],"[currentMove, newVirtualBoard, nextMoves, prevButtons, prevMoves, random]",[2929,2946],"[buttonsTarget, color, numberOfPlayers, random, socket]",[62097,62108],"[currentMove, newVirtualBoard, pieceCapture, pieceSound, sendPiece, socket]",[7518,7526],[55646,55648],"[computerMoveFirst, setColor]"]