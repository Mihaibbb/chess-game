{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\ComputerBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\nimport '../styles/board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function ComputerBoard({\n  color,\n  prevButtons,\n  random,\n  difficulty\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\n  localStorage.setItem(\"set-color\", setColor);\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\n  const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\n  const [movedFirst, setMovedFirst] = useState(false);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  };\n  console.log(virtualBoard);\n  const pieceSound = new Audio(pieceMoveSound);\n  const pieceCapture = new Audio(pieceCaptureSound);\n  pieceCapture.volume = 0.3;\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  console.log(squareWidth, squareHeight);\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\"; // Checking everytime prev/next button is pressed\n\n  useEffect(() => {\n    if (!prevButtons) return;\n    if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\n    if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\n    const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\n    console.log(prevButtons, prevMoves, lastMove.pieceCode);\n    const currBoard = cloneDeep(newVirtualBoard);\n    const oldX = parseInt(lastMove.oldIdx / 8);\n    const oldY = lastMove.oldIdx % 8;\n    const newX = parseInt(lastMove.newIdx / 8);\n    const newY = lastMove.newIdx % 8;\n    currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\n    currBoard[newX][newY] = lastMove.oldPieceCode;\n    setNewVirtualBoard(currBoard);\n\n    if (prevButtons.classList.contains('prev-button')) {\n      const newNextMoves = [...nextMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\n      localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\n      setPrevMoves(prevMoves.slice(0, -1));\n      setNextMoves(newNextMoves);\n    } else {\n      console.log('ok from here');\n      const newPrevMoves = [...prevMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\n      localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\n      setNextMoves(nextMoves.slice(0, -1));\n      setPrevMoves(newPrevMoves);\n    }\n\n    localStorage.setItem(\"computer-current-move\", -currentMove);\n    localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\n    setCurrentMove(-currentMove);\n  }, [random]); // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8;\n    console.log(currentX, currentY); // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      console.log(frontElement);\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      console.log(possibleMoves);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        console.log(newFrontX);\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          console.log('gdjigdfjhh');\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        console.log(smallRocadeEmpty, bigRocadeEmpty);\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    console.log(containerElement, square);\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    console.log(x, y, square, currentMove);\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        console.log(move, oldPreviewMoves);\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            console.log(currSquare);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n    console.log(squareRef.current);\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2, _squareRef$current3, _squareRef$current4;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    console.log((_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x, (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y);\n    const currentX = (_squareRef$current3 = squareRef.current) === null || _squareRef$current3 === void 0 ? void 0 : _squareRef$current3.x;\n    const currentY = (_squareRef$current4 = squareRef.current) === null || _squareRef$current4 === void 0 ? void 0 : _squareRef$current4.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    console.log(previewVirtualBoard.current);\n\n    if (setColor != currentMove) {\n      console.log('here', setColor, currentMove);\n      return;\n    }\n\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    console.log(kingSquare, currentMove);\n    const check = checkCheck(kingSquare, currentMove * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      console.log(cloneIcon, prevMoves);\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {\n        // squareDOM.innerHTML = '';\n        pieceSound.pause();\n        pieceCapture.play();\n      }\n      let newPiece = pieceCode;\n      let skipComputerMove = false; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1 || squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1 || squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1 || squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1) {\n        console.log('here');\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        console.log(leftContainers);\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n        skipComputerMove = true;\n      } else setPawnTransform(null);\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY]\n      }]);\n      setNextMoves([]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n        console.log(kingsMoved.current[dropPiecer]);\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n        console.log(rookMoved.current[2][\"right\"]);\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      console.log(oldX, oldY, currentX, currentY);\n      console.log(cloneVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode;\n      console.log(cloneVirtualBoard); // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      console.log(oppositeKingSquare); // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      // console.log(checkMateOpponent);\n      // if (checkMateOpponent) setGameRunning(false);\n\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      localStorage.setItem(\"computer-current-move\", -currentMove); // setCurrentMove(-currentMove);\n\n      localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n      if (!skipComputerMove) computerMove(cloneVirtualBoard);\n      console.log(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n      console.log(count, elementIdx);\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const computerMove = newBoard => {\n    console.log('none', currentMove);\n    let currMove = currentMove;\n    setCurrentMove(-currMove);\n    const possibleMoves = getAllMoves(-currMove, newBoard);\n    const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\n    console.log(randomMove);\n    let cloneVirtualBoard = cloneDeep(newBoard);\n    const oldX = parseInt(randomPossibleMoves.idx / 8);\n    const oldY = randomPossibleMoves.idx % 8;\n    const newX = parseInt(randomMove / 8);\n    const newY = randomMove % 8;\n    console.log(newX, newY);\n    cloneVirtualBoard[oldX][oldY] = 0;\n    cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\n    localStorage.setItem(\"computer-current-move\", setColor);\n    localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n    setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750);\n    setCurrentMove(currMove);\n  };\n\n  const getAllMoves = (color, newBoard) => {\n    let currBoard = [];\n    newBoard.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    let possibleMoves = [],\n        allMoves = [];\n    currBoard.forEach((square, idx) => {\n      if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\n        piece: square,\n        idx: idx\n      });\n    });\n    possibleMoves.forEach(move => {\n      const currPossMoves = getPossibleMoves(move.piece, move.idx, newVirtualBoard);\n      const currMoves = currPossMoves.filter(currPieceMove => {\n        let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\n        previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\n        previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\n        let kingSquare;\n        newVirtualBoard.forEach((row, rowIdx) => {\n          row.forEach((square, squareIdx) => {\n            if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\n          });\n        });\n        const isCheck = checkCheck(kingSquare, -setColor * 6);\n        previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\n        return !isCheck;\n      });\n\n      if (currMoves.length !== 0) {\n        allMoves.push({\n          piece: move.piece,\n          idx: move.idx,\n          moves: currMoves\n        });\n      }\n    });\n    return allMoves;\n  };\n\n  const computerMoveFirst = newBoard => {\n    if (movedFirst) return;\n    const possibleMoves = getAllMoves(currentMove, newBoard);\n    console.log(possibleMoves, Math.random() * possibleMoves.length);\n    const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\n    console.log(randomMove);\n    let cloneVirtualBoard = newBoard;\n    const oldX = parseInt(randomPossibleMoves.idx / 8);\n    const oldY = randomPossibleMoves.idx % 8;\n    const newX = parseInt(randomMove / 8);\n    const newY = randomMove % 8;\n    console.log(newX, newY);\n    cloneVirtualBoard[oldX][oldY] = 0;\n    cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\n    setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750);\n    setCurrentMove(-currentMove);\n    setMovedFirst(true);\n  };\n\n  if (setColor === -1) computerMoveFirst(newVirtualBoard);\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    console.log(newBoard);\n    previewVirtualBoard.current = newBoard;\n    console.log(newBoard);\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    console.log(kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    console.log(oppositeSquaresClone);\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    console.log(oppositeSquares, kingSquare); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMoves);\n      return possibleMovesCheck.some(currSquare => {\n        console.log(currSquare, kingSquare);\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8; // Checking same row\n\n    for (let i = 0; i < COLUMNS; i++) {\n      if (i === currentY) continue;\n      const sameRowSquare = previewVirtualBoard.current[currentX][i];\n      if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\n      if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\n      const newCoords = currentX * 8 + i;\n      const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n\n    for (let i = 0; i < ROWS; i++) {\n      if (i === currentX) continue;\n      const sameColumnSquare = previewVirtualBoard.current[i][currentY];\n      if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\n      if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\n      const newCoords = i * 8 + currentY;\n      const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    console.log(board);\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMovesCheckmate);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        console.log(previewVirtualBoard.current, kCode);\n        console.log(allInOneBoard);\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        console.log(kingSquare);\n        const newBoardCheck = checkCheck(kingSquare, kCode, true);\n        console.log(newBoardCheck, kingSquare, kCode);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    console.log(checkMate);\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    console.log(board, pieceCode);\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      console.log(oppPossibleMoves);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    console.log(virtualBoard);\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1405,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1419,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1412,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1435,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1428,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1401,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1448,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1463,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1464,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1465,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1467,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1468,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1469,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1470,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1462,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1460,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ComputerBoard, \"ymtWDXWKQeifkYZqd2fS2qjcGrQ=\");\n\n_c = ComputerBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/ComputerBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","pieceMoveSound","pieceCaptureSound","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","ComputerBoard","color","prevButtons","random","difficulty","setColor","localStorage","getItem","parseInt","setItem","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","JSON","parse","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","movedFirst","setMovedFirst","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","console","log","pieceSound","Audio","pieceCapture","volume","minX","current","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","style","width","squareHeight","height","player2Color","player1Color","classList","contains","length","lastMove","pieceCode","currBoard","oldX","oldY","newX","newIdx","newY","oldPieceCode","newNextMoves","stringify","slice","newPrevMoves","getPossibleMoves","coords","piece","Math","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","element","target","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheck","play","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","pause","newPiece","skipComputerMove","containers","leftContainers","map","pawnTransformPiece","rookSquare","rookInit","cloneVirtualBoard","oppositeKingSquare","newBoard","checkEqual","checkPat","computerMove","getContainers","mySquaresClone","mySquares","filter","result","elementIdx","count","currMove","getAllMoves","randomPossibleMoves","floor","randomMove","moves","allMoves","currPossMoves","currMoves","currPieceMove","oldPreviewVirtualBoard","rowIdx","squareIdx","isCheck","computerMoveFirst","transformPieceCode","Object","keys","key","piece1","piece2","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","checkCheckmate","checkCheckOptimised","sameRowSquare","squareMoves","squareMovePiece","sameColumnSquare","constantBoard","checkMate","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rows","realIdx","squareComponent","ref","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function ComputerBoard({ color, prevButtons, random, difficulty }) {\r\n\r\n    const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\r\n    localStorage.setItem(\"set-color\", setColor);\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\r\n    const [movedFirst, setMovedFirst] = useState(false);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    console.log(virtualBoard);\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n        console.log(prevButtons, prevMoves, lastMove.pieceCode);\r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n        setNewVirtualBoard(currBoard);\r\n\r\n        if (prevButtons.classList.contains('prev-button')) {\r\n            const newNextMoves = [...nextMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\r\n\r\n            setPrevMoves(prevMoves.slice(0, -1));\r\n            setNextMoves(newNextMoves);\r\n\r\n        } else  {\r\n            console.log('ok from here');\r\n            const newPrevMoves = [...prevMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n            setNextMoves(nextMoves.slice(0, -1));\r\n            setPrevMoves(newPrevMoves);\r\n        }\r\n\r\n        localStorage.setItem(\"computer-current-move\", -currentMove);\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\r\n        \r\n        setCurrentMove(-currentMove);\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n\r\n        \r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        if (setColor != currentMove) {\r\n            console.log('here', setColor, currentMove);\r\n            return;\r\n        }\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove);\r\n        const check = checkCheck(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n            console.log(cloneIcon, prevMoves);\r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n\r\n            let skipComputerMove = false;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1) || (squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1) || (squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1) || (squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n                skipComputerMove = true;\r\n\r\n            } else setPawnTransform(null);\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            console.log(oldX, oldY, currentX, currentY);\r\n\r\n            console.log(cloneVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n\r\n            console.log(cloneVirtualBoard);\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            // console.log(checkMateOpponent);\r\n            // if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            localStorage.setItem(\"computer-current-move\", -currentMove);\r\n            // setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            if (!skipComputerMove) computerMove(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const computerMove = (newBoard) => {\r\n        console.log('none', currentMove);\r\n        let currMove = currentMove;\r\n        setCurrentMove(-currMove);\r\n\r\n        const possibleMoves = getAllMoves(-currMove, newBoard);\r\n        \r\n        const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n        console.log(randomMove);\r\n        let cloneVirtualBoard = cloneDeep(newBoard);\r\n\r\n        const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n        const oldY = randomPossibleMoves.idx % 8;\r\n        const newX = parseInt(randomMove / 8);\r\n        const newY = randomMove % 8;\r\n        console.log(newX, newY);\r\n        cloneVirtualBoard[oldX][oldY] = 0;\r\n        cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n        localStorage.setItem(\"computer-current-move\", setColor);\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n\r\n        setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \r\n\r\n        setCurrentMove(currMove);\r\n        \r\n        \r\n    };\r\n\r\n\r\n    const getAllMoves = (color, newBoard) => {\r\n        let currBoard = [];\r\n\r\n        newBoard.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        let possibleMoves = [], allMoves = [];\r\n\r\n        currBoard.forEach((square, idx) => {\r\n            if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\r\n                piece: square, \r\n                idx: idx\r\n            });\r\n        });\r\n\r\n        possibleMoves.forEach(move => {\r\n            const currPossMoves = getPossibleMoves(move.piece, move.idx, newVirtualBoard);\r\n            \r\n            const currMoves = currPossMoves.filter(currPieceMove => {\r\n                let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\r\n                previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\r\n                previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\r\n                let kingSquare;\r\n                newVirtualBoard.forEach((row, rowIdx) => {\r\n                    row.forEach((square, squareIdx) => {\r\n                        if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\r\n                    });\r\n                });\r\n                \r\n                const isCheck = checkCheck(kingSquare, -setColor * 6);\r\n                previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\r\n                \r\n\r\n                return !isCheck;\r\n            });\r\n            \r\n            if (currMoves.length !== 0) {\r\n                allMoves.push({\r\n                    piece: move.piece,\r\n                    idx: move.idx, \r\n                    moves: currMoves\r\n                });\r\n            }\r\n        });\r\n\r\n        return allMoves;\r\n    };\r\n\r\n    const computerMoveFirst = (newBoard) => {\r\n        if (movedFirst) return;\r\n        const possibleMoves = getAllMoves(currentMove, newBoard);\r\n        console.log(possibleMoves, Math.random() * possibleMoves.length);\r\n        const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n        console.log(randomMove);\r\n        let cloneVirtualBoard = newBoard;\r\n\r\n        const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n        const oldY = randomPossibleMoves.idx % 8;\r\n        const newX = parseInt(randomMove / 8);\r\n        const newY = randomMove % 8;\r\n        console.log(newX, newY);\r\n        cloneVirtualBoard[oldX][oldY] = 0;\r\n        cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n        setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \r\n        setCurrentMove(-currentMove);\r\n        setMovedFirst(true);\r\n    };\r\n\r\n    \r\n    if (setColor === -1) computerMoveFirst(newVirtualBoard);\r\n       \r\n \r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        console.log(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        console.log(kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        console.log(oppositeSquaresClone);\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(oppositeSquares, kingSquare);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n            console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMoves);\r\n            return possibleMovesCheck.some(currSquare => {\r\n                \r\n                console.log(currSquare, kingSquare);\r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n   \r\n        // Checking same row\r\n        \r\n        for (let i = 0; i < COLUMNS; i++) {\r\n            if (i === currentY) continue;\r\n            const sameRowSquare = previewVirtualBoard.current[currentX][i];\r\n            if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\r\n            if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\r\n\r\n            const newCoords = currentX * 8 + i;\r\n            const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\r\n            \r\n\r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            if (i === currentX) continue;\r\n            const sameColumnSquare = previewVirtualBoard.current[i][currentY];\r\n            if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\r\n            if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\r\n            const newCoords = i * 8 + currentY;\r\n            const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\r\n        \r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                console.log(previewVirtualBoard.current, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheck(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n       console.log(checkMate);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}