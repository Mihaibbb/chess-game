{"ast":null,"code":"export default function checkCheckOptimised(kingSquare, kCode, isFromCheckMate = false) {\n  // Getting coords\n  const currentX = parseInt(kingSquare / 8);\n  const currentY = kingSquare % 8;\n  const pieceCode = kCode / -6;\n  const kingPossibleSquares = [[currentX - 1, currentY - 1], [currentX - 1, currentY], [currentX - 1, currentY + 1], [currentX, currentY - 1], [currentX, currentY + 1], [currentX + 1, currentY - 1], [currentX + 1, currentY], [currentX + 1, currentY + 1]];\n  console.log(previewVirtualBoard.current);\n  kingPossibleSquares.forEach(move => {\n    const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n    if (square === -kCode && square !== null) {\n      const oldBoard = cloneDeep(previewVirtualBoard.current);\n      if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n      previewVirtualBoard.current = oldBoard;\n      return true;\n    }\n  }); // Pawns \n\n  const pawnPossibleSquares = [[currentX - pieceCode * setColor, currentY - pieceCode * setColor], [currentX - pieceCode * setColor, currentY + pieceCode * setColor]];\n  pawnPossibleSquares.forEach(move => {\n    const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n    if (square === pieceCode) {\n      const oldBoard = cloneDeep(previewVirtualBoard.current);\n      if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n      previewVirtualBoard.current = oldBoard;\n      return true;\n    }\n  }); // Rows\n\n  if (currentX > 0) {\n    for (let i = currentX - 1; i >= 0; i--) {\n      const rowSquare = previewVirtualBoard.current[i] && previewVirtualBoard.current[i][currentY] && previewVirtualBoard.current[i][currentY];\n\n      if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (rowSquare !== 0) break;\n    }\n  }\n\n  if (currentX < ROWS - 1) {\n    for (let i = currentX + 1; i < ROWS; i++) {\n      const rowSquare = previewVirtualBoard.current[i] && previewVirtualBoard.current[i][currentY] && previewVirtualBoard.current[i][currentY];\n\n      if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n\n        if (!isFromCheckMate) {\n          const checkMate = checkCheckmate(kCode, newVirtualBoard);\n          console.log(checkMate);\n        }\n\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (rowSquare !== 0) break;\n    }\n  } // Columns \n\n\n  if (currentY > 0) {\n    for (let i = currentY - 1; i >= 0; i--) {\n      const columnSquare = previewVirtualBoard.current[currentX] && previewVirtualBoard.current[currentX][i] && previewVirtualBoard.current[currentX][i];\n\n      if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (columnSquare !== 0) break;\n    }\n  }\n\n  if (currentY < COLUMNS - 1) {\n    for (let i = currentX + 1; i < COLUMNS; i++) {\n      const columnSquare = previewVirtualBoard.current[currentX] && previewVirtualBoard.current[currentX][i] && previewVirtualBoard.current[currentX][i];\n\n      if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (columnSquare !== 0) break;\n    }\n  } // Diagonal top left\n\n\n  if (currentX > 0 && currentY > 0) {\n    for (let i = 1; i < 8; i++) {\n      const newX = currentX - i;\n      const newY = currentY - i;\n      const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n      if (square == null) break;\n\n      if (square === 4 * pieceCode || square === 5 * pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (square !== 0) break;\n    }\n  } // Diagonal top right\n\n\n  if (currentX > 0 && currentY < COLUMNS - 1) {\n    for (let i = 1; i < 8; i++) {\n      const newX = currentX - i;\n      const newY = currentY + i;\n      const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n      if (square == null) break;\n\n      if (square === 4 * pieceCode || square === 5 * pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (square !== 0) break;\n    }\n  } // Diagonal bottom left\n\n\n  if (currentX < ROWS - 1 && currentY > 0) {\n    for (let i = 1; i < 8; i++) {\n      const newX = currentX + i;\n      const newY = currentY - i;\n      const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n      if (square == null) break;\n\n      if (square === 4 * pieceCode || square === 5 * pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (square !== 0) break;\n    }\n  } // Diagonal bottom right\n\n\n  if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\n    for (let i = 1; i < 8; i++) {\n      const newX = currentX + i;\n      const newY = currentY + i;\n      const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n      if (square == null) break;\n\n      if (square === 4 * pieceCode || square === 5 * pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        return true;\n      } else if (square !== 0) break;\n    }\n  } // Knight moves\n\n\n  const knightPossibleMoves = [[currentX - 2, currentY - 1], [currentX - 2, currentY + 1], [currentX + 2, currentY - 1], [currentX + 2, currentY + 1], [currentX - 1, currentY - 2], [currentX - 1, currentY + 2], [currentX + 1, currentY - 2], [currentX + 1, currentY + 2]];\n  knightPossibleMoves.forEach(move => {\n    const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n    if (square === pieceCode * 3) {\n      const oldBoard = cloneDeep(previewVirtualBoard.current);\n      if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n      previewVirtualBoard.current = oldBoard;\n      return true;\n    }\n  });\n  return false;\n}\n;","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/checkCheckOptimised.jsx"],"names":["checkCheckOptimised","kingSquare","kCode","isFromCheckMate","currentX","parseInt","currentY","pieceCode","kingPossibleSquares","console","log","previewVirtualBoard","current","forEach","move","square","oldBoard","cloneDeep","checkCheckmate","newVirtualBoard","pawnPossibleSquares","setColor","i","rowSquare","ROWS","checkMate","columnSquare","COLUMNS","newX","newY","knightPossibleMoves"],"mappings":"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","sourcesContent":["export default function checkCheckOptimised(kingSquare, kCode, isFromCheckMate = false) {\r\n\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n        const pieceCode = kCode / (-6);\r\n\r\n        const kingPossibleSquares = [\r\n            [currentX - 1, currentY - 1],\r\n            [currentX - 1, currentY],\r\n            [currentX - 1, currentY + 1],\r\n            [currentX, currentY - 1],\r\n            [currentX, currentY + 1],\r\n            [currentX + 1, currentY - 1],\r\n            [currentX + 1, currentY],\r\n            [currentX + 1, currentY + 1]\r\n        ];\r\n\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        kingPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === -kCode && square !== null) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                return true;\r\n            }\r\n        });\r\n\r\n        // Pawns \r\n\r\n        const pawnPossibleSquares = [\r\n            [currentX - (pieceCode * setColor), currentY - (pieceCode * setColor)],\r\n            [currentX - (pieceCode * setColor), currentY + (pieceCode * setColor)]\r\n        ];\r\n\r\n        pawnPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                return true;\r\n            }\r\n        });\r\n        \r\n        // Rows\r\n\r\n        if (currentX > 0) {\r\n            for (let i = currentX - 1; i >= 0; i--) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentX < ROWS - 1) {\r\n            for (let i = currentX + 1; i < ROWS; i++) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) {\r\n                        const checkMate = checkCheckmate(kCode, newVirtualBoard);\r\n                        console.log(checkMate);\r\n                    }\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Columns \r\n\r\n        if (currentY > 0) {\r\n            for (let i = currentY - 1; i >= 0; i--) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentY < COLUMNS - 1) {\r\n            for (let i = currentX + 1; i < COLUMNS; i++) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top left\r\n        \r\n        if (currentX > 0 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top right\r\n\r\n        if (currentX > 0 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom left\r\n\r\n        if (currentX < ROWS - 1 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom right\r\n\r\n        if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Knight moves\r\n\r\n        const knightPossibleMoves = [\r\n            [currentX - 2, currentY - 1],\r\n            [currentX - 2, currentY + 1],\r\n            [currentX + 2, currentY - 1],\r\n            [currentX + 2, currentY + 1],\r\n            [currentX - 1, currentY - 2],\r\n            [currentX - 1, currentY + 2],\r\n            [currentX + 1, currentY - 2],\r\n            [currentX + 1, currentY + 2]\r\n        ];\r\n        \r\n        knightPossibleMoves.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode * 3) { \r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                return true;\r\n            }\r\n        });\r\n\r\n        return false;\r\n};"]},"metadata":{},"sourceType":"module"}