{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\ComputerBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\nimport '../styles/board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function ComputerBoard({\n  color,\n  prevButtons,\n  random,\n  difficulty\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\n  localStorage.setItem(\"set-color\", setColor);\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\n  const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\n  const [movedFirst, setMovedFirst] = useState(false);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  };\n  console.log(virtualBoard);\n  const pieceSound = new Audio(pieceMoveSound);\n  const pieceCapture = new Audio(pieceCaptureSound);\n  pieceCapture.volume = 0.3;\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  console.log(squareWidth, squareHeight);\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\"; // Checking everytime prev/next button is pressed\n  // useEffect(() => {\n  //     if (!prevButtons) return;\n  //     if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\n  //     if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\n  //     const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\n  //     console.log(prevButtons, prevMoves, lastMove.pieceCode);\n  //     const currBoard = cloneDeep(newVirtualBoard);\n  //     const oldX = parseInt(lastMove.oldIdx / 8);\n  //     const oldY = lastMove.oldIdx % 8;\n  //     const newX = parseInt(lastMove.newIdx / 8);\n  //     const newY = lastMove.newIdx % 8;\n  //     currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\n  //     currBoard[newX][newY] = lastMove.oldPieceCode;\n  //     setNewVirtualBoard(currBoard);\n  //     if (prevButtons.classList.contains('prev-button')) {\n  //         const newNextMoves = [...nextMoves,\n  //             {\n  //                 oldIdx: lastMove.oldIdx,\n  //                 newIdx: lastMove.newIdx,\n  //                 oldPieceCode: lastMove.pieceCode,\n  //                 pieceCode: lastMove.oldPieceCode\n  //             }\n  //         ];\n  //         localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\n  //         localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\n  //         setPrevMoves(prevMoves.slice(0, -1));\n  //         setNextMoves(newNextMoves);\n  //     } else  {\n  //         console.log('ok from here');\n  //         const newPrevMoves = [...prevMoves,\n  //             {\n  //                 oldIdx: lastMove.oldIdx,\n  //                 newIdx: lastMove.newIdx,\n  //                 oldPieceCode: lastMove.pieceCode,\n  //                 pieceCode: lastMove.oldPieceCode\n  //             }\n  //         ];\n  //         localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\n  //         localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\n  //         setNextMoves(nextMoves.slice(0, -1));\n  //         setPrevMoves(newPrevMoves);\n  //     }\n  //     localStorage.setItem(\"computer-current-move\", -currentMove);\n  //     localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\n  //     setCurrentMove(-currentMove);\n  // }, [random]);\n  // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8;\n    console.log(currentX, currentY); // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      console.log(frontElement);\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      console.log(possibleMoves);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        console.log(newFrontX);\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          console.log('gdjigdfjhh');\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        console.log(smallRocadeEmpty, bigRocadeEmpty);\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    console.log(containerElement, square);\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    console.log(x, y, square, currentMove);\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        console.log(move, oldPreviewMoves);\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            console.log(currSquare);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n    console.log(squareRef.current);\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2, _squareRef$current3, _squareRef$current4;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    console.log((_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x, (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y);\n    const currentX = (_squareRef$current3 = squareRef.current) === null || _squareRef$current3 === void 0 ? void 0 : _squareRef$current3.x;\n    const currentY = (_squareRef$current4 = squareRef.current) === null || _squareRef$current4 === void 0 ? void 0 : _squareRef$current4.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    console.log(previewVirtualBoard.current);\n\n    if (setColor != currentMove) {\n      console.log('here', setColor, currentMove);\n      return;\n    }\n\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    console.log(kingSquare, currentMove);\n    const check = checkCheck(kingSquare, currentMove * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      console.log(cloneIcon, prevMoves);\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {\n        // squareDOM.innerHTML = '';\n        pieceSound.pause();\n        pieceCapture.play();\n      }\n      let newPiece = pieceCode;\n      let skipComputerMove = false; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1 || squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1 || squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1 || squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1) {\n        console.log('here');\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        console.log(leftContainers);\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n        skipComputerMove = true;\n      } else setPawnTransform(null);\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY]\n      }]);\n      setNextMoves([]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n        console.log(kingsMoved.current[dropPiecer]);\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n        console.log(rookMoved.current[2][\"right\"]);\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      console.log(oldX, oldY, currentX, currentY);\n      console.log(cloneVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode;\n      console.log(cloneVirtualBoard); // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      console.log(oppositeKingSquare); // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      // console.log(checkMateOpponent);\n      // if (checkMateOpponent) setGameRunning(false);\n\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      localStorage.setItem(\"computer-current-move\", -currentMove); // setCurrentMove(-currentMove);\n\n      localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n      if (!skipComputerMove) computerMove(cloneVirtualBoard);\n      console.log(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n      console.log(count, elementIdx);\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const computerMove = newBoard => {\n    console.log('none', currentMove);\n    let currMove = currentMove;\n    setCurrentMove(-currMove);\n    const possibleMoves = getAllMoves(-currMove, newBoard);\n    const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\n    console.log(randomMove);\n    let cloneVirtualBoard = cloneDeep(newBoard);\n    const oldX = parseInt(randomPossibleMoves.idx / 8);\n    const oldY = randomPossibleMoves.idx % 8;\n    const newX = parseInt(randomMove / 8);\n    const newY = randomMove % 8;\n    console.log(newX, newY);\n    cloneVirtualBoard[oldX][oldY] = 0;\n    cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\n    localStorage.setItem(\"computer-current-move\", setColor);\n    localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n    setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750);\n    setCurrentMove(currMove);\n  };\n\n  const getAllMoves = (color, newBoard) => {\n    let currBoard = [];\n    newBoard.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    let possibleMoves = [],\n        allMoves = [];\n    currBoard.forEach((square, idx) => {\n      if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\n        piece: square,\n        idx: idx\n      });\n    });\n    possibleMoves.forEach(move => {\n      const currPossMoves = getPossibleMoves(move.piece, move.idx, newVirtualBoard);\n      const currMoves = currPossMoves.filter(currPieceMove => {\n        let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\n        previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\n        previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\n        let kingSquare;\n        newVirtualBoard.forEach((row, rowIdx) => {\n          row.forEach((square, squareIdx) => {\n            if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\n          });\n        });\n        const isCheck = checkCheck(kingSquare, -setColor * 6);\n        previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\n        return !isCheck;\n      });\n\n      if (currMoves.length !== 0) {\n        allMoves.push({\n          piece: move.piece,\n          idx: move.idx,\n          moves: currMoves\n        });\n      }\n    });\n    return allMoves;\n  };\n\n  const computerMoveFirst = newBoard => {\n    const possibleMoves = getAllMoves(currentMove, newBoard);\n    console.log(possibleMoves, Math.random() * possibleMoves.length);\n    const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\n    console.log(randomMove);\n    let cloneVirtualBoard = newBoard;\n    const oldX = parseInt(randomPossibleMoves.idx / 8);\n    const oldY = randomPossibleMoves.idx % 8;\n    const newX = parseInt(randomMove / 8);\n    const newY = randomMove % 8;\n    console.log(newX, newY);\n    cloneVirtualBoard[oldX][oldY] = 0;\n    cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\n    setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750);\n    setCurrentMove(-currentMove);\n    setMovedFirst(true);\n  };\n\n  useEffect(() => {\n    if (setColor === -1 && !movedFirst) computerMoveFirst(newVirtualBoard);\n  }, []);\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    console.log(newBoard);\n    previewVirtualBoard.current = newBoard;\n    console.log(newBoard);\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    console.log(kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    console.log(oppositeSquaresClone);\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    console.log(oppositeSquares, kingSquare); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMoves);\n      return possibleMovesCheck.some(currSquare => {\n        console.log(currSquare, kingSquare);\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8; // Checking same row\n\n    for (let i = 0; i < COLUMNS; i++) {\n      if (i === currentY) continue;\n      const sameRowSquare = previewVirtualBoard.current[currentX][i];\n      if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\n      if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\n      const newCoords = currentX * 8 + i;\n      const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n\n    for (let i = 0; i < ROWS; i++) {\n      if (i === currentX) continue;\n      const sameColumnSquare = previewVirtualBoard.current[i][currentY];\n      if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\n      if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\n      const newCoords = i * 8 + currentY;\n      const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    console.log(board);\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMovesCheckmate);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        console.log(previewVirtualBoard.current, kCode);\n        console.log(allInOneBoard);\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        console.log(kingSquare);\n        const newBoardCheck = checkCheck(kingSquare, kCode, true);\n        console.log(newBoardCheck, kingSquare, kCode);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    console.log(checkMate);\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    console.log(board, pieceCode);\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      console.log(oppPossibleMoves);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    console.log(virtualBoard);\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1407,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1421,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1414,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1437,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1430,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1403,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1465,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1467,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1468,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1469,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1470,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1471,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1472,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1464,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1462,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ComputerBoard, \"ymtWDXWKQeifkYZqd2fS2qjcGrQ=\");\n\n_c = ComputerBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/ComputerBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","pieceMoveSound","pieceCaptureSound","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","ComputerBoard","color","prevButtons","random","difficulty","setColor","localStorage","getItem","parseInt","setItem","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","JSON","parse","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","movedFirst","setMovedFirst","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","console","log","pieceSound","Audio","pieceCapture","volume","minX","current","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","style","width","squareHeight","height","player2Color","player1Color","getPossibleMoves","pieceCode","coords","piece","Math","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newX","newY","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","length","element","target","classList","contains","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","oldX","oldY","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheck","play","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","pause","newPiece","skipComputerMove","containers","leftContainers","map","pawnTransformPiece","newIdx","oldPieceCode","rookSquare","rookInit","cloneVirtualBoard","oppositeKingSquare","newBoard","checkEqual","checkPat","stringify","computerMove","getContainers","currBoard","mySquaresClone","mySquares","filter","result","elementIdx","count","currMove","getAllMoves","randomPossibleMoves","floor","randomMove","moves","allMoves","currPossMoves","currMoves","currPieceMove","oldPreviewVirtualBoard","rowIdx","squareIdx","isCheck","computerMoveFirst","transformPieceCode","Object","keys","key","piece1","piece2","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","checkCheckmate","checkCheckOptimised","sameRowSquare","squareMoves","squareMovePiece","sameColumnSquare","constantBoard","checkMate","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rows","realIdx","squareComponent","ref","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function ComputerBoard({ color, prevButtons, random, difficulty }) {\r\n\r\n    const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\r\n    localStorage.setItem(\"set-color\", setColor);\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\r\n    const [movedFirst, setMovedFirst] = useState(false);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    console.log(virtualBoard);\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    // useEffect(() => {\r\n       \r\n    //     if (!prevButtons) return;\r\n    //     if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n    //     if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n    //     const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n    //     console.log(prevButtons, prevMoves, lastMove.pieceCode);\r\n    //     const currBoard = cloneDeep(newVirtualBoard);\r\n    //     const oldX = parseInt(lastMove.oldIdx / 8);\r\n    //     const oldY = lastMove.oldIdx % 8;\r\n    //     const newX = parseInt(lastMove.newIdx / 8);\r\n    //     const newY = lastMove.newIdx % 8;\r\n    //     currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n    //     currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n    //     setNewVirtualBoard(currBoard);\r\n\r\n    //     if (prevButtons.classList.contains('prev-button')) {\r\n    //         const newNextMoves = [...nextMoves,\r\n    //             {\r\n    //                 oldIdx: lastMove.oldIdx,\r\n    //                 newIdx: lastMove.newIdx,\r\n    //                 oldPieceCode: lastMove.pieceCode,\r\n    //                 pieceCode: lastMove.oldPieceCode\r\n    //             }\r\n    //         ];\r\n    //         localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n    //         localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\r\n\r\n    //         setPrevMoves(prevMoves.slice(0, -1));\r\n    //         setNextMoves(newNextMoves);\r\n\r\n    //     } else  {\r\n    //         console.log('ok from here');\r\n    //         const newPrevMoves = [...prevMoves,\r\n    //             {\r\n    //                 oldIdx: lastMove.oldIdx,\r\n    //                 newIdx: lastMove.newIdx,\r\n    //                 oldPieceCode: lastMove.pieceCode,\r\n    //                 pieceCode: lastMove.oldPieceCode\r\n    //             }\r\n    //         ];\r\n\r\n    //         localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\r\n    //         localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n    //         setNextMoves(nextMoves.slice(0, -1));\r\n    //         setPrevMoves(newPrevMoves);\r\n    //     }\r\n\r\n    //     localStorage.setItem(\"computer-current-move\", -currentMove);\r\n    //     localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\r\n        \r\n    //     setCurrentMove(-currentMove);\r\n\r\n    // }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n\r\n        \r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        if (setColor != currentMove) {\r\n            console.log('here', setColor, currentMove);\r\n            return;\r\n        }\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove);\r\n        const check = checkCheck(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n            console.log(cloneIcon, prevMoves);\r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n\r\n            let skipComputerMove = false;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1) || (squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1) || (squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1) || (squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n                skipComputerMove = true;\r\n\r\n            } else setPawnTransform(null);\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            console.log(oldX, oldY, currentX, currentY);\r\n\r\n            console.log(cloneVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n\r\n            console.log(cloneVirtualBoard);\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            // console.log(checkMateOpponent);\r\n            // if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            localStorage.setItem(\"computer-current-move\", -currentMove);\r\n            // setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            if (!skipComputerMove) computerMove(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const computerMove = (newBoard) => {\r\n        console.log('none', currentMove);\r\n        let currMove = currentMove;\r\n        setCurrentMove(-currMove);\r\n\r\n        const possibleMoves = getAllMoves(-currMove, newBoard);\r\n        \r\n        const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n        console.log(randomMove);\r\n        let cloneVirtualBoard = cloneDeep(newBoard);\r\n\r\n        const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n        const oldY = randomPossibleMoves.idx % 8;\r\n        const newX = parseInt(randomMove / 8);\r\n        const newY = randomMove % 8;\r\n        console.log(newX, newY);\r\n        cloneVirtualBoard[oldX][oldY] = 0;\r\n        cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n        localStorage.setItem(\"computer-current-move\", setColor);\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n\r\n        setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \r\n\r\n        setCurrentMove(currMove);\r\n        \r\n        \r\n    };\r\n\r\n\r\n    const getAllMoves = (color, newBoard) => {\r\n        let currBoard = [];\r\n\r\n        newBoard.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        let possibleMoves = [], allMoves = [];\r\n\r\n        currBoard.forEach((square, idx) => {\r\n            if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\r\n                piece: square, \r\n                idx: idx\r\n            });\r\n        });\r\n\r\n        possibleMoves.forEach(move => {\r\n            const currPossMoves = getPossibleMoves(move.piece, move.idx, newVirtualBoard);\r\n            \r\n            const currMoves = currPossMoves.filter(currPieceMove => {\r\n                let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\r\n                previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\r\n                previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\r\n                let kingSquare;\r\n                newVirtualBoard.forEach((row, rowIdx) => {\r\n                    row.forEach((square, squareIdx) => {\r\n                        if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\r\n                    });\r\n                });\r\n                \r\n                const isCheck = checkCheck(kingSquare, -setColor * 6);\r\n                previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\r\n                \r\n\r\n                return !isCheck;\r\n            });\r\n            \r\n            if (currMoves.length !== 0) {\r\n                allMoves.push({\r\n                    piece: move.piece,\r\n                    idx: move.idx, \r\n                    moves: currMoves\r\n                });\r\n            }\r\n        });\r\n\r\n        return allMoves;\r\n    };\r\n\r\n    const computerMoveFirst = (newBoard) => {\r\n        \r\n        const possibleMoves = getAllMoves(currentMove, newBoard);\r\n        console.log(possibleMoves, Math.random() * possibleMoves.length);\r\n        const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n        console.log(randomMove);\r\n        let cloneVirtualBoard = newBoard;\r\n\r\n        const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n        const oldY = randomPossibleMoves.idx % 8;\r\n        const newX = parseInt(randomMove / 8);\r\n        const newY = randomMove % 8;\r\n        console.log(newX, newY);\r\n        cloneVirtualBoard[oldX][oldY] = 0;\r\n        cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n        setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \r\n        setCurrentMove(-currentMove);\r\n        setMovedFirst(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (setColor === -1 && !movedFirst) computerMoveFirst(newVirtualBoard);\r\n    }, []);\r\n    \r\n       \r\n \r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        console.log(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        console.log(kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        console.log(oppositeSquaresClone);\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(oppositeSquares, kingSquare);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n            console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMoves);\r\n            return possibleMovesCheck.some(currSquare => {\r\n                \r\n                console.log(currSquare, kingSquare);\r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n   \r\n        // Checking same row\r\n        \r\n        for (let i = 0; i < COLUMNS; i++) {\r\n            if (i === currentY) continue;\r\n            const sameRowSquare = previewVirtualBoard.current[currentX][i];\r\n            if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\r\n            if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\r\n\r\n            const newCoords = currentX * 8 + i;\r\n            const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\r\n            \r\n\r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            if (i === currentX) continue;\r\n            const sameColumnSquare = previewVirtualBoard.current[i][currentY];\r\n            if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\r\n            if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\r\n            const newCoords = i * 8 + currentY;\r\n            const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\r\n        \r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                console.log(previewVirtualBoard.current, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheck(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n       console.log(checkMate);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}