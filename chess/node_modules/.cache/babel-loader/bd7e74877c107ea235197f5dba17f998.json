{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\OnlineBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\nimport '../styles/board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function OnlineBoard({\n  color,\n  prevButtons,\n  random,\n  socket,\n  oppId\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = color;\n  console.log(setColor);\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"prev-moves\")) : []);\n  const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"next-moves\") !== null ? JSON.parse(localStorage.getItem(\"next-moves\")) : []);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  };\n  const pieceSound = new Audio(pieceMoveSound);\n  const pieceCapture = new Audio(pieceCaptureSound);\n  pieceCapture.volume = 0.3;\n  console.log(boardRef.current);\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  console.log(squareWidth, squareHeight);\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\n  socket.on('send-piece', (oldIdx, newIdx, pieceCode) => {\n    const cloneVirtualBoard = cloneDeep(newVirtualBoard);\n    const serverOldX = parseInt(oldIdx / 8);\n    const serverOldY = oldIdx % 8;\n    cloneVirtualBoard[serverOldX][serverOldY] = 0;\n    const serverNewX = parseInt(newIdx / 8);\n    const serverNewY = newIdx % 8;\n    cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\n    console.log('finished');\n    localStorage.setItem(\"current-move\", -currentMove);\n    setCurrentMove(-currentMove);\n    localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\n    setNewVirtualBoard(cloneVirtualBoard);\n  }); // Checking everytime prev/next button is pressed\n\n  useEffect(() => {\n    if (!prevButtons) return;\n    if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\n    if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\n    const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\n    console.log(prevButtons, prevMoves, lastMove.pieceCode);\n    const currBoard = cloneDeep(newVirtualBoard);\n    const oldX = parseInt(lastMove.oldIdx / 8);\n    const oldY = lastMove.oldIdx % 8;\n    const newX = parseInt(lastMove.newIdx / 8);\n    const newY = lastMove.newIdx % 8;\n    currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\n    currBoard[newX][newY] = lastMove.oldPieceCode;\n    setNewVirtualBoard(currBoard);\n\n    if (prevButtons.classList.contains('prev-button')) {\n      const newNextMoves = [...nextMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\n      localStorage.setItem(\"next-moves\", JSON.stringify(newNextMoves));\n      setPrevMoves(prevMoves.slice(0, -1));\n      setNextMoves(newNextMoves);\n    } else {\n      console.log('ok from here');\n      const newPrevMoves = [...prevMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"prev-moves\", JSON.stringify(newPrevMoves));\n      localStorage.setItem(\"next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\n      setNextMoves(nextMoves.slice(0, -1));\n      setPrevMoves(newPrevMoves);\n    }\n\n    localStorage.setItem(\"current-move\", -currentMove);\n    localStorage.setItem(\"board\", JSON.stringify(currBoard));\n    setCurrentMove(-currentMove);\n  }, [random]); // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8;\n    console.log(currentX, currentY); // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      console.log(frontElement);\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      console.log(possibleMoves);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        console.log(newFrontX);\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          console.log('gdjigdfjhh');\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        console.log(smallRocadeEmpty, bigRocadeEmpty);\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    console.log(containerElement, square);\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    console.log(x, y, square, currentMove);\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        console.log(move, oldPreviewMoves);\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            console.log(currSquare);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n    console.log(squareRef.current);\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2, _squareRef$current3, _squareRef$current4;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    console.log((_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x, (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y);\n    const currentX = (_squareRef$current3 = squareRef.current) === null || _squareRef$current3 === void 0 ? void 0 : _squareRef$current3.x;\n    const currentY = (_squareRef$current4 = squareRef.current) === null || _squareRef$current4 === void 0 ? void 0 : _squareRef$current4.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    if (currentMove != setColor) return;\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    console.log(kingSquare, currentMove);\n    const check = checkCheck(kingSquare, currentMove * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      console.log(cloneIcon, prevMoves);\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {\n        // squareDOM.innerHTML = '';\n        pieceSound.pause();\n        pieceCapture.play();\n      }\n      let newPiece = pieceCode; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 || squareDOM && pieceCode === -1 && currentX === 7) {\n        console.log('here');\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        console.log(leftContainers);\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 927,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 923,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n      } else {\n        setPawnTransform(null);\n      }\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY]\n      }]);\n      setNextMoves([]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      }); // Checking if it's rocade\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n        console.log(kingsMoved.current[dropPiecer]);\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n        console.log(rookMoved.current[2][\"right\"]);\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      console.log(oldX, oldY, currentX, currentY);\n      console.log(cloneVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode;\n      console.log(cloneVirtualBoard); // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      console.log(oppositeKingSquare);\n      const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      console.log(checkMateOpponent);\n      if (checkMateOpponent) setGameRunning(false);\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      const mirrorOldX = 7 - oldX;\n      const mirrorOldY = 7 - oldY;\n      const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\n      const mirrorNewX = 7 - currentX;\n      const mirrorNewY = 7 - currentY;\n      const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\n      socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode, oppId);\n      localStorage.setItem(\"current-move\", -currentMove);\n      setCurrentMove(-currentMove);\n      localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n      console.log(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n      console.log(count, elementIdx);\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    console.log(newBoard);\n    previewVirtualBoard.current = newBoard;\n    console.log(newBoard);\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    console.log(kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    console.log(oppositeSquaresClone);\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    console.log(oppositeSquares, kingSquare); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMoves);\n      return possibleMovesCheck.some(currSquare => {\n        console.log(currSquare, kingSquare);\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8; // Checking same row\n\n    for (let i = 0; i < COLUMNS; i++) {\n      if (i === currentY) continue;\n      const sameRowSquare = previewVirtualBoard.current[currentX][i];\n      if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\n      if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\n      const newCoords = currentX * 8 + i;\n      const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n\n    for (let i = 0; i < ROWS; i++) {\n      if (i === currentX) continue;\n      const sameColumnSquare = previewVirtualBoard.current[i][currentY];\n      if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\n      if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\n      const newCoords = i * 8 + currentY;\n      const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    console.log(board);\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMovesCheckmate);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        console.log(previewVirtualBoard.current, kCode);\n        console.log(allInOneBoard);\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        console.log(kingSquare);\n        const newBoardCheck = checkCheck(kingSquare, kCode, true);\n        console.log(newBoardCheck, kingSquare, kCode);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    console.log(checkMate);\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    console.log(board, pieceCode);\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      console.log(oppPossibleMoves);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    console.log(virtualBoard);\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1319,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1333,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1326,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1349,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1342,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1315,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1362,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1377,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1378,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1379,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1380,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1381,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1384,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1376,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1374,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OnlineBoard, \"lJXTpWcVAJr/SU/huNZg5IO7NdU=\");\n\n_c = OnlineBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnlineBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/OnlineBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","pieceMoveSound","pieceCaptureSound","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","OnlineBoard","color","prevButtons","random","socket","oppId","setColor","console","log","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","localStorage","getItem","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","JSON","parse","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","pieceSound","Audio","pieceCapture","volume","current","minX","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","parseInt","style","width","squareHeight","height","player2Color","player1Color","on","newIdx","pieceCode","cloneVirtualBoard","serverOldX","serverOldY","serverNewX","serverNewY","setItem","stringify","classList","contains","length","lastMove","currBoard","oldX","oldY","newX","newY","oldPieceCode","newNextMoves","slice","newPrevMoves","getPossibleMoves","coords","piece","Math","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","element","target","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheck","play","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","pause","newPiece","containers","leftContainers","map","pawnTransformPiece","rookSquare","rookInit","oppositeKingSquare","newBoard","checkMateOpponent","checkCheckmate","checkEqual","checkPat","mirrorOldX","mirrorOldY","mirrorOldIdx","mirrorNewX","mirrorNewY","mirrorNewIdx","emit","getContainers","mySquaresClone","mySquares","filter","result","elementIdx","count","transformPieceCode","Object","keys","key","piece1","piece2","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","checkCheckOptimised","sameRowSquare","squareMoves","squareMovePiece","sameColumnSquare","constantBoard","checkMate","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rowIdx","rows","squareIdx","realIdx","squareComponent","ref","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function OnlineBoard({ color, prevButtons, random, socket, oppId }) {\r\n\r\n    const setColor = color;\r\n    console.log(setColor);\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"next-moves\") !== null ? JSON.parse(localStorage.getItem(\"next-moves\")) : []);\r\n \r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    console.log(boardRef.current);\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    socket.on('send-piece', (oldIdx, newIdx, pieceCode) => {\r\n        const cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n        const serverOldX = parseInt(oldIdx / 8);\r\n        const serverOldY = oldIdx % 8;\r\n        cloneVirtualBoard[serverOldX][serverOldY] = 0;\r\n        const serverNewX = parseInt(newIdx / 8);\r\n        const serverNewY = newIdx % 8;\r\n        cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\r\n        console.log('finished');\r\n        localStorage.setItem(\"current-move\", -currentMove);\r\n        setCurrentMove(-currentMove);\r\n\r\n        localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n        setNewVirtualBoard(cloneVirtualBoard);\r\n    });\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n        console.log(prevButtons, prevMoves, lastMove.pieceCode);\r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n        setNewVirtualBoard(currBoard);\r\n\r\n        if (prevButtons.classList.contains('prev-button')) {\r\n            const newNextMoves = [...nextMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n            localStorage.setItem(\"prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n            localStorage.setItem(\"next-moves\", JSON.stringify(newNextMoves));\r\n\r\n            setPrevMoves(prevMoves.slice(0, -1));\r\n            setNextMoves(newNextMoves);\r\n\r\n        } else  {\r\n            console.log('ok from here');\r\n            const newPrevMoves = [...prevMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n\r\n            localStorage.setItem(\"prev-moves\", JSON.stringify(newPrevMoves));\r\n            localStorage.setItem(\"next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n            setNextMoves(nextMoves.slice(0, -1));\r\n            setPrevMoves(newPrevMoves);\r\n        }\r\n\r\n        localStorage.setItem(\"current-move\", -currentMove);\r\n        localStorage.setItem(\"board\", JSON.stringify(currBoard));\r\n        \r\n        setCurrentMove(-currentMove);\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        \r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        if (currentMove != setColor) return;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove);\r\n        const check = checkCheck(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n            console.log(cloneIcon, prevMoves);\r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0) || (squareDOM && pieceCode === -1 && currentX === 7)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n            } else { \r\n                setPawnTransform(null);\r\n            }\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            // Checking if it's rocade\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            console.log(oldX, oldY, currentX, currentY);\r\n\r\n            console.log(cloneVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n           \r\n\r\n            console.log(cloneVirtualBoard);\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            console.log(checkMateOpponent);\r\n            if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            \r\n            const mirrorOldX = 7 - oldX;\r\n            const mirrorOldY = 7 - oldY;\r\n            const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\r\n           \r\n            const mirrorNewX = 7 - currentX;\r\n            const mirrorNewY = 7 - currentY;\r\n            const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\r\n            \r\n            socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode, oppId);\r\n        \r\n\r\n            localStorage.setItem(\"current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        console.log(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        console.log(kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        console.log(oppositeSquaresClone);\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(oppositeSquares, kingSquare);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n            console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMoves);\r\n            return possibleMovesCheck.some(currSquare => {\r\n                \r\n                console.log(currSquare, kingSquare);\r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n   \r\n        // Checking same row\r\n        \r\n        for (let i = 0; i < COLUMNS; i++) {\r\n            if (i === currentY) continue;\r\n            const sameRowSquare = previewVirtualBoard.current[currentX][i];\r\n            if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\r\n            if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\r\n\r\n            const newCoords = currentX * 8 + i;\r\n            const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\r\n            \r\n\r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            if (i === currentX) continue;\r\n            const sameColumnSquare = previewVirtualBoard.current[i][currentY];\r\n            if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\r\n            if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\r\n            const newCoords = i * 8 + currentY;\r\n            const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\r\n        \r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                console.log(previewVirtualBoard.current, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheck(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n       console.log(checkMate);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}