{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\OnlineBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep'; // import pieceMoveSound from \"../sounds/piece-move.wav\";\n// import pieceCaptureSound from \"../sounds/piece-taken.mp3\";\n\nimport '../styles/board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function OnlineBoard({\n  color,\n  prevButtons,\n  random,\n  socket,\n  oppId\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = color;\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"prev-moves\")) : []);\n  const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"next-moves\") !== null ? JSON.parse(localStorage.getItem(\"next-moves\")) : []);\n  const [socketRunning, setSocketRunning] = useState(true);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  }; // const pieceSound = new Audio(pieceMoveSound);\n  // const pieceCapture = new Audio(pieceCaptureSound);\n  // pieceCapture.volume = 0.3;\n\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\n  socket.on('send-piece', (oldIdx, newIdx, pieceCode) => {\n    const cloneVirtualBoard = cloneDeep(newVirtualBoard);\n    const serverOldX = parseInt(oldIdx / 8);\n    const serverOldY = oldIdx % 8;\n    cloneVirtualBoard[serverOldX][serverOldY] = 0;\n    const serverNewX = parseInt(newIdx / 8);\n    const serverNewY = newIdx % 8;\n    cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\n    localStorage.setItem(\"current-move\", -currentMove);\n    setCurrentMove(-currentMove);\n    localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\n    setNewVirtualBoard(cloneVirtualBoard);\n    setSocketRunning(true);\n  });\n  if (!socketRunning) return; // Checking everytime prev/next button is pressed\n  // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8; // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    const currentX = (_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x;\n    const currentY = (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    if (currentMove != setColor) return;\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    const check = checkCheck(kingSquare, currentMove * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      // pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {// squareDOM.innerHTML = '';\n        // pieceSound.pause();\n        // pieceCapture.play();\n      }\n      let newPiece = pieceCode; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 || squareDOM && pieceCode === -1 && currentX === 7) {\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n      } else {\n        setPawnTransform(null);\n      }\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY]\n      }]);\n      setNextMoves([]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      }); // Checking if it's rocade\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode; // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      if (checkMateOpponent) setGameRunning(false);\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      const mirrorOldX = 7 - oldX;\n      const mirrorOldY = 7 - oldY;\n      const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\n      const mirrorNewX = 7 - currentX;\n      const mirrorNewY = 7 - currentY;\n      const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\n      socketRunning(false);\n      socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode);\n      localStorage.setItem(\"current-move\", -currentMove);\n      setCurrentMove(-currentMove);\n      localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    previewVirtualBoard.current = newBoard;\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    // console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      return possibleMovesCheck.some(currSquare => {\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8; // Checking same row\n\n    for (let i = 0; i < COLUMNS; i++) {\n      if (i === currentY) continue;\n      const sameRowSquare = previewVirtualBoard.current[currentX][i];\n      if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\n      if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\n      const newCoords = currentX * 8 + i;\n      const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n\n    for (let i = 0; i < ROWS; i++) {\n      if (i === currentX) continue;\n      const sameColumnSquare = previewVirtualBoard.current[i][currentY];\n      if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\n      if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\n      const newCoords = i * 8 + currentY;\n      const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        const newBoardCheck = checkCheck(kingSquare, kCode, true);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1237,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1251,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1244,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1267,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1260,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1233,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1280,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1300,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1302,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1294,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1292,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OnlineBoard, \"qy+HHjNSgWU9ENTEBc3Ybf9qRd0=\");\n\n_c = OnlineBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnlineBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/OnlineBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","OnlineBoard","color","prevButtons","random","socket","oppId","setColor","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","localStorage","getItem","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","JSON","parse","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","socketRunning","setSocketRunning","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","minX","current","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","parseInt","style","width","squareHeight","height","player2Color","player1Color","on","newIdx","pieceCode","cloneVirtualBoard","serverOldX","serverOldY","serverNewX","serverNewY","setItem","stringify","getPossibleMoves","coords","piece","Math","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newX","newY","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","console","log","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","length","element","target","classList","contains","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","oldX","oldY","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheck","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","newPiece","containers","leftContainers","map","pawnTransformPiece","oldPieceCode","rookSquare","rookInit","oppositeKingSquare","newBoard","checkMateOpponent","checkCheckmate","checkEqual","checkPat","mirrorOldX","mirrorOldY","mirrorOldIdx","mirrorNewX","mirrorNewY","mirrorNewIdx","emit","getContainers","currBoard","mySquaresClone","mySquares","filter","result","elementIdx","count","transformPieceCode","Object","keys","key","piece1","piece2","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","checkCheckOptimised","sameRowSquare","squareMoves","squareMovePiece","sameColumnSquare","constantBoard","checkMate","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rowIdx","rows","squareIdx","realIdx","squareComponent","ref","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n// import pieceMoveSound from \"../sounds/piece-move.wav\";\r\n// import pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function OnlineBoard({ color, prevButtons, random, socket, oppId }) {\r\n\r\n    const setColor = color;\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"next-moves\") !== null ? JSON.parse(localStorage.getItem(\"next-moves\")) : []);\r\n    const [socketRunning, setSocketRunning] = useState(true);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    // const pieceSound = new Audio(pieceMoveSound);\r\n    // const pieceCapture = new Audio(pieceCaptureSound);\r\n    // pieceCapture.volume = 0.3;\r\n\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    socket.on('send-piece', (oldIdx, newIdx, pieceCode) => {\r\n        const cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n        const serverOldX = parseInt(oldIdx / 8);\r\n        const serverOldY = oldIdx % 8;\r\n        cloneVirtualBoard[serverOldX][serverOldY] = 0;\r\n        const serverNewX = parseInt(newIdx / 8);\r\n        const serverNewY = newIdx % 8;\r\n        cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\r\n        \r\n        localStorage.setItem(\"current-move\", -currentMove);\r\n        setCurrentMove(-currentMove);\r\n\r\n        localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n        setNewVirtualBoard(cloneVirtualBoard);\r\n        setSocketRunning(true);\r\n    });\r\n    \r\n\r\n    if (!socketRunning) return;\r\n\r\n    // Checking everytime prev/next button is pressed\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n           \r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n               \r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                       \r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                      \r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                   \r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            \r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n     \r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        \r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n      \r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n               \r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                       \r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n       \r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        \r\n        setActivePiece(null);\r\n       \r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        if (currentMove != setColor) return;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n      \r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n\r\n        const check = checkCheck(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            // pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n         \r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                // pieceSound.pause();\r\n                // pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0) || (squareDOM && pieceCode === -1 && currentX === 7)) {\r\n                \r\n               \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n              \r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n            } else { \r\n                setPawnTransform(null);\r\n            }\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            // Checking if it's rocade\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                \r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n              \r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n            \r\n            const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n         \r\n            if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            \r\n            const mirrorOldX = 7 - oldX;\r\n            const mirrorOldY = 7 - oldY;\r\n            const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\r\n           \r\n            const mirrorNewX = 7 - currentX;\r\n            const mirrorNewY = 7 - currentY;\r\n            const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\r\n\r\n            socketRunning(false);\r\n            socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode);\r\n            \r\n\r\n            localStorage.setItem(\"current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n\r\n\r\n            localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n      \r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n           \r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        \r\n        previewVirtualBoard.current = newBoard;\r\n    \r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n         \r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n          \r\n            return possibleMovesCheck.some(currSquare => {\r\n               \r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n   \r\n        // Checking same row\r\n        \r\n        for (let i = 0; i < COLUMNS; i++) {\r\n            if (i === currentY) continue;\r\n            const sameRowSquare = previewVirtualBoard.current[currentX][i];\r\n            if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\r\n            if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\r\n\r\n            const newCoords = currentX * 8 + i;\r\n            const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\r\n            \r\n\r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            if (i === currentX) continue;\r\n            const sameColumnSquare = previewVirtualBoard.current[i][currentY];\r\n            if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\r\n            if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\r\n            const newCoords = i * 8 + currentY;\r\n            const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\r\n        \r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n  \r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n       \r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n        \r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n                \r\n                const newBoardCheck = checkCheck(kingSquare, kCode, true);\r\n               \r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n       \r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n         \r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}