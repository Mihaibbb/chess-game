{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\Online.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Board from './Board';\nimport OnlineBoard from \"./OnlineBoard\";\nimport RightSide from \"./RightSide\";\nimport LeftSide from \"./LeftSide\";\nimport '../styles/home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default async function Online(props) {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  let socket = props.socket;\n  const [color, setColor] = useState(null);\n  const [buttonsTarget, setButtonsTarget] = useState(null);\n  const [random, setRandom] = useState(null);\n  const [newId, setNewId] = useState(null);\n  let players;\n  socket.on(\"players\", (player, socketId) => {\n    console.log(player, socketId, id, socket.id, JSON.parse(localStorage.getItem(\"socket\")));\n    setColor(localStorage.getItem(\"player\") !== null ? localStorage.getItem(\"player\") : player === 1 ? player : -1);\n    if (localStorage.getItem(\"player\") === null) localStorage.setItem(\"player\", player === 1 ? player : -1);\n  }); // if (id != JSON.parse(localStorage.getItem(\"socket\"))) return null;\n\n  socket.on(\"rooms\", rooms => {\n    const isThisRoom = [...Object.keys(rooms)].filter(room => room == id);\n    if (isThisRoom === undefined) return null;\n  });\n  socket.emit(\"create-room\", id); // Request for room's players\n\n  const returnButtonsClick = e => {\n    let newTarget = e.target;\n\n    while (!newTarget.classList.contains('button')) {\n      newTarget = newTarget.parentElement;\n    }\n\n    setButtonsTarget(newTarget);\n    setRandom(Math.random());\n  };\n\n  socket.on(\"get-players\", playersId => {\n    const oppId = playersId.find(player => player !== socket.id);\n\n    if (oppId !== undefined && newId === null) {}\n  });\n  return color && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(LeftSide, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OnlineBoard, {\n        color: color,\n        prevButtons: buttonsTarget,\n        random: random,\n        socket: socket,\n        oppId: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightSide, {\n        clickButton: returnButtonsClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Online, \"8lWOsE26VViyd9aZX9gXL3dZfg4=\", false, function () {\n  return [useParams];\n});\n\n_c = Online;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Online\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/Online.jsx"],"names":["React","useState","useEffect","useParams","io","Board","OnlineBoard","RightSide","LeftSide","Online","props","id","socket","color","setColor","buttonsTarget","setButtonsTarget","random","setRandom","newId","setNewId","players","on","player","socketId","console","log","JSON","parse","localStorage","getItem","setItem","rooms","isThisRoom","Object","keys","filter","room","undefined","emit","returnButtonsClick","e","newTarget","target","classList","contains","parentElement","Math","playersId","oppId","find"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport Board from './Board';\r\nimport OnlineBoard from \"./OnlineBoard\";\r\nimport RightSide from \"./RightSide\";\r\nimport LeftSide from \"./LeftSide\";\r\n\r\nimport '../styles/home.css';\r\n\r\nexport default async function Online(props) {\r\n\r\n    const { id } = useParams();\r\n    let socket = props.socket;\r\n\r\n    const [color, setColor] = useState(null);\r\n    const [buttonsTarget, setButtonsTarget] = useState(null);\r\n    const [random, setRandom] = useState(null);\r\n    const [newId, setNewId] = useState(null);\r\n    \r\n    let players;\r\n\r\n    socket.on(\"players\", (player, socketId) => {\r\n        console.log(player, socketId, id, socket.id, JSON.parse(localStorage.getItem(\"socket\")));\r\n        setColor(localStorage.getItem(\"player\") !== null ? localStorage.getItem(\"player\") : player === 1 ? player : -1);\r\n        if (localStorage.getItem(\"player\") === null) localStorage.setItem(\"player\", player === 1 ? player : -1);\r\n        \r\n    });\r\n   \r\n    // if (id != JSON.parse(localStorage.getItem(\"socket\"))) return null;\r\n\r\n    socket.on(\"rooms\", rooms => {\r\n        const isThisRoom = [...Object.keys(rooms)].filter(room => room == id);\r\n        if (isThisRoom === undefined) return null;\r\n    });\r\n\r\n    socket.emit(\"create-room\", id);\r\n\r\n    // Request for room's players\r\n\r\n    const returnButtonsClick = (e) => {\r\n\r\n        let newTarget = e.target;\r\n\r\n        while (!newTarget.classList.contains('button')) {\r\n            newTarget = newTarget.parentElement;\r\n        }\r\n\r\n        setButtonsTarget(newTarget);\r\n        setRandom(Math.random());\r\n    };\r\n\r\n    socket.on(\"get-players\", playersId => {\r\n        \r\n        const oppId = playersId.find(player => player !== socket.id)\r\n        \r\n        if (oppId !== undefined && newId === null) {\r\n            \r\n            \r\n        }\r\n        \r\n    });\r\n    \r\n    return color && (\r\n        <div className=\"content\">\r\n            <div className=\"game\">\r\n                <LeftSide />\r\n                <OnlineBoard color={color} prevButtons={buttonsTarget} random={random} socket={socket} oppId=\"2\" />\r\n                <RightSide clickButton={returnButtonsClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}