{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\nimport '../styles/board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function Board({\n  color,\n  prevButtons,\n  random\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = color;\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState([]);\n  const [nextMoves, setNextMoves] = useState([]);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  };\n  const pieceSound = new Audio(pieceMoveSound);\n  const pieceCapture = new Audio(pieceCaptureSound);\n  pieceCapture.volume = 0.3;\n  console.log(boardRef.current);\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  console.log(squareWidth, squareHeight);\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\"; // Checking everytime prev/next button is pressed\n\n  useEffect(() => {\n    if (!prevButtons) return;\n    if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\n    if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\n    console.log(prevButtons, prevMoves);\n    const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\n    const currBoard = cloneDeep(newVirtualBoard);\n    const oldX = parseInt(lastMove.oldIdx / 8);\n    const oldY = lastMove.oldIdx % 8;\n    const newX = parseInt(lastMove.newIdx / 8);\n    const newY = lastMove.newIdx % 8;\n    currBoard[oldX][oldY] = lastMove.pieceCode;\n    currBoard[newX][newY] = lastMove.oldPieceCode;\n    console.log(lastMove.oldPieceCode);\n    setNewVirtualBoard(currBoard);\n    const oldSquare = currSquareElement.current[lastMove.newIdx];\n    console.log(oldSquare, lastMove.oldPieceCode);\n    const oldSquarePiece = oldSquare.firstChild;\n    const newSquare = currSquareElement.current[lastMove.oldIdx];\n    newSquare.appendChild(oldSquarePiece);\n\n    if (lastMove.oldPieceCode !== 0 && lastMove.oldIcon) {\n      // lastMove.oldIcon.addEventListener('mousedown', e => dragPiece(e, lastMove.oldPieceCode));\n      // lastMove.oldIcon.addEventListener('mousemove', movePiece);\n      // lastMove.oldIcon.addEventListener('mouseup', e => dropPiece(e, lastMove.oldPieceCode));\n      const element = /*#__PURE__*/React.createElement( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `icon-container ${lastMove.oldPieceCode < 0 ? -1 : 1} ${lastMove.oldPieceCode}`,\n        onMouseDown: e => dragPiece(e, lastMove.oldPieceCode, lastMove.newIdx),\n        onMouseMove: e => movePiece(e),\n        onMouseUp: e => dropPiece(e, lastMove.oldPieceCode),\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: piecesCode[Math.abs(lastMove.oldPieceCode).toString()],\n          className: `piece ${lastMove.oldPieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n          color: lastMove.oldPieceCode > 0 ? \"#fff\" : \"initial\",\n          code: lastMove.oldPieceCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, lastMove.oldPieceCode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this));\n      oldSquare.appendChild(element);\n    }\n\n    setPrevMoves(prevMoves.slice(0, -1));\n  }, [random]); // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8;\n    console.log(currentX, currentY); // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode;\n      const newDiagY = currentY + pieceCode;\n      const newDiagY2 = currentY - pieceCode;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      console.log(frontElement);\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      console.log(possibleMoves);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode < 0 && currentX === 1 || pieceCode > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2;\n        console.log(newFrontX);\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          console.log(i, board[rocadeX][rocadeY]);\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          console.log('gdjigdfjhh');\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        console.log(smallRocadeEmpty, bigRocadeEmpty);\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) {\n      console.log('fail');\n      return;\n    }\n\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    console.log(containerElement, square);\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    console.log(x, y, square, currentMove);\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    console.log(currPossibleMoves, square, currentMove, newTotalCoords);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        console.log(move, oldPreviewMoves);\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            console.log(currSquare);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n    console.log(squareRef.current);\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2, _squareRef$current3, _squareRef$current4;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    console.log((_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x, (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y);\n    const currentX = (_squareRef$current3 = squareRef.current) === null || _squareRef$current3 === void 0 ? void 0 : _squareRef$current3.x;\n    const currentY = (_squareRef$current4 = squareRef.current) === null || _squareRef$current4 === void 0 ? void 0 : _squareRef$current4.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    console.log(previewVirtualBoard.current);\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    console.log(kingSquare, currentMove);\n    const check = checkCheck(kingSquare, currentMove * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.cloneNode(true);\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {\n        squareDOM.innerHTML = '';\n        pieceSound.pause();\n        pieceCapture.play();\n      }\n      let newPiece = pieceCode; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 || squareDOM && pieceCode === -1 && currentX === 7) {\n        console.log('here');\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        console.log(leftContainers);\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n        squareDOM.appendChild(activePiece);\n        if (elements !== activePiece) squareDOM.removeChild(activePiece);\n      } else {\n        squareDOM && squareDOM.appendChild(activePiece);\n      }\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY],\n        oldIcon: cloneIcon\n      }]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n        console.log(kingsMoved.current[dropPiecer]);\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n        console.log(rookMoved.current[2][\"right\"]);\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      console.log(oldX, oldY, currentX, currentY);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode; // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      console.log(oppositeKingSquare);\n      const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      console.log(checkMateOpponent);\n      if (checkMateOpponent) setGameRunning(false);\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      localStorage.setItem(\"current-move\", -currentMove);\n      setCurrentMove(-currentMove);\n      localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n      console.log(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n      console.log(count, elementIdx);\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    previewVirtualBoard.current = newBoard;\n    console.log(newBoard);\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    console.log(kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    console.log(oppositeSquaresClone);\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    console.log(oppositeSquares, kingSquare); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMoves);\n      return possibleMovesCheck.some(currSquare => {\n        console.log(currSquare, kingSquare);\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8; // Checking same row\n\n    for (let i = 0; i < COLUMNS; i++) {\n      if (i === currentY) continue;\n      const sameRowSquare = previewVirtualBoard.current[currentX][i];\n      if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\n      if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\n      const newCoords = currentX * 8 + i;\n      const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n\n    for (let i = 0; i < ROWS; i++) {\n      if (i === currentX) continue;\n      const sameColumnSquare = previewVirtualBoard.current[i][currentY];\n      if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\n      if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\n      const newCoords = i * 8 + currentY;\n      const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    console.log(board);\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMovesCheckmate);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (!isNaN(newBoard[newX][newY]) && newBoard[newX][newY] !== 0) {\n          const enemyPieceNumber = newBoard[newX][newY];\n          if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n        } else newBoard[newX][newY] = square.pieceCode;\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        console.log(previewVirtualBoard.current, kCode);\n        console.log(allInOneBoard);\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        console.log(kingSquare);\n        const newBoardCheck = checkCheck(kingSquare, kCode, true);\n        console.log(newBoardCheck, kingSquare, kCode);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    console.log(checkMate);\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    console.log(board, pieceCode);\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      console.log(oppPossibleMoves);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    console.log(virtualBoard);\n    const board = virtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1280,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1294,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1287,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1310,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1303,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1276,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1323,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1338,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1341,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1342,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1343,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1344,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1345,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1337,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1335,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"okdhJDpVNWoO4tKZFB2BgA/Ybec=\");\n\n_c = Board;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/Board.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","pieceMoveSound","pieceCaptureSound","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","Board","color","prevButtons","random","setColor","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","localStorage","getItem","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","JSON","parse","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","pieceSound","Audio","pieceCapture","volume","console","log","current","minX","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","parseInt","style","width","squareHeight","height","player2Color","player1Color","classList","contains","length","lastMove","currBoard","oldX","oldY","newX","newIdx","newY","pieceCode","oldPieceCode","oldSquare","oldSquarePiece","firstChild","newSquare","appendChild","oldIcon","element","createElement","e","dragPiece","movePiece","dropPiece","Math","abs","toString","slice","getPossibleMoves","coords","piece","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","undefined","pieceMoves","x","y","forEach","pieceMove","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","square","elements","target","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","add","zIndex","ySquare","xSquare","round","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheck","play","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","innerHTML","pause","newPiece","containers","leftContainers","map","pawnTransformPiece","rookSquare","rookInit","cloneVirtualBoard","oppositeKingSquare","newBoard","checkMateOpponent","checkCheckmate","checkEqual","checkPat","setItem","stringify","getContainers","mySquaresClone","mySquares","filter","result","elementIdx","count","transformPieceCode","Object","keys","key","piece1","piece2","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","checkCheckOptimised","sameRowSquare","squareMoves","squareMovePiece","sameColumnSquare","constantBoard","checkMate","possibleMovesCheckmate","currX","currY","isNaN","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rowIdx","rows","squareIdx","realIdx","squareComponent","ref"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function Board({ color, prevButtons, random }) {\r\n\r\n    const setColor = color;\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState([]);\r\n    const [nextMoves, setNextMoves] = useState([]);\r\n \r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    console.log(boardRef.current);\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        console.log(prevButtons, prevMoves);\r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = lastMove.pieceCode;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n        console.log(lastMove.oldPieceCode);\r\n\r\n        setNewVirtualBoard(currBoard);\r\n\r\n        const oldSquare = currSquareElement.current[lastMove.newIdx];\r\n        console.log(oldSquare, lastMove.oldPieceCode);\r\n        const oldSquarePiece = oldSquare.firstChild;\r\n        const newSquare = currSquareElement.current[lastMove.oldIdx];\r\n        newSquare.appendChild(oldSquarePiece);\r\n        if (lastMove.oldPieceCode !== 0 && lastMove.oldIcon) {\r\n            // lastMove.oldIcon.addEventListener('mousedown', e => dragPiece(e, lastMove.oldPieceCode));\r\n            // lastMove.oldIcon.addEventListener('mousemove', movePiece);\r\n            // lastMove.oldIcon.addEventListener('mouseup', e => dropPiece(e, lastMove.oldPieceCode));\r\n\r\n            const element = React.createElement(\r\n                <div \r\n                    className={`icon-container ${lastMove.oldPieceCode < 0 ? -1 : 1} ${lastMove.oldPieceCode}`}\r\n                    onMouseDown={e => dragPiece(e, lastMove.oldPieceCode, lastMove.newIdx)}\r\n                    onMouseMove={e => movePiece(e)}\r\n                    onMouseUp={e => dropPiece(e, lastMove.oldPieceCode)} \r\n                    key={lastMove.oldPieceCode}\r\n                >   \r\n                    <FontAwesomeIcon \r\n                        icon={piecesCode[Math.abs(lastMove.oldPieceCode).toString()]} \r\n                        className={`piece ${lastMove.oldPieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                        color={lastMove.oldPieceCode > 0 ? \"#fff\" : \"initial\"} \r\n                        code={lastMove.oldPieceCode}\r\n                    />\r\n                </div>\r\n            );\r\n           \r\n            oldSquare.appendChild(element);\r\n        }\r\n        setPrevMoves(prevMoves.slice(0, -1));\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - pieceCode;\r\n            const newDiagY = currentY + pieceCode;\r\n            const newDiagY2 = currentY - pieceCode;\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode < 0 && currentX === 1) || (pieceCode > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log(i, board[rocadeX][rocadeY]);\r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) {\r\n            console.log('fail');\r\n            return;\r\n        }\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove);\r\n        const check = checkCheck(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.cloneNode(true);\r\n                  \r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n    \r\n            \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0) || (squareDOM && pieceCode === -1 && currentX === 7)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n                squareDOM.appendChild(activePiece);\r\n                if (elements !== activePiece) squareDOM.removeChild(activePiece);\r\n            } else { \r\n                squareDOM && squareDOM.appendChild(activePiece);\r\n            }\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                    oldIcon: cloneIcon\r\n                }\r\n            ]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            console.log(oldX, oldY, currentX, currentY);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            console.log(checkMateOpponent);\r\n            if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            localStorage.setItem(\"current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        console.log(kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        console.log(oppositeSquaresClone);\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(oppositeSquares, kingSquare);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n            console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMoves);\r\n            return possibleMovesCheck.some(currSquare => {\r\n                \r\n                console.log(currSquare, kingSquare);\r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n   \r\n        // Checking same row\r\n        \r\n        for (let i = 0; i < COLUMNS; i++) {\r\n            if (i === currentY) continue;\r\n            const sameRowSquare = previewVirtualBoard.current[currentX][i];\r\n            if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\r\n            if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\r\n\r\n            const newCoords = currentX * 8 + i;\r\n            const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\r\n            \r\n\r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            if (i === currentX) continue;\r\n            const sameColumnSquare = previewVirtualBoard.current[i][currentY];\r\n            if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\r\n            if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\r\n            const newCoords = i * 8 + currentY;\r\n            const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\r\n        \r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        \r\n        \r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n               \r\n\r\n                if (!isNaN(newBoard[newX][newY]) && newBoard[newX][newY] !== 0) {\r\n                    const enemyPieceNumber = newBoard[newX][newY];\r\n                    if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                } else newBoard[newX][newY] = square.pieceCode;\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                console.log(previewVirtualBoard.current, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheck(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n       console.log(checkMate);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = virtualBoard.map((row, rowIdx) => {\r\n\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}