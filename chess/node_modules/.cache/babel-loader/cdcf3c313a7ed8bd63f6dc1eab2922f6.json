{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\OnlineBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\nimport '../styles/board.css';\nimport OnlineSocket from \"./OnlineSocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function OnlineBoard({\n  color,\n  prevButtons,\n  random,\n  socket,\n  oppId,\n  players\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = color;\n  console.log(players);\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"online-current-move\") === null ? 1 : localStorage.getItem(\"online-current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"online-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"online-board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [sendPiece, setSendPiece] = useState(null);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  };\n  const pieceSound = new Audio(pieceMoveSound);\n  const pieceCapture = new Audio(pieceCaptureSound);\n  pieceCapture.volume = 0.3;\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\"; // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8; // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    const currentX = (_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x;\n    const currentY = (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    if (currentMove != setColor) return;\n    if (players !== 2) return;\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    const check = checkCheckOptimised(kingSquare, currentMove * 6);\n    console.log(check, previewVirtualBoard.current);\n    let sound = \"move\";\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {\n        // squareDOM.innerHTML = '';\n        pieceSound.pause();\n        pieceCapture.play();\n        sound = \"take\";\n      }\n      let newPiece = pieceCode; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 || squareDOM && pieceCode === -1 && currentX === 7) {\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 849,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n      } else {\n        setPawnTransform(null);\n      } // Removing old preview dots\n\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      }); // Checking if it's rocade\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode; // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      if (checkMateOpponent) setGameRunning(false);\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      const mirrorOldX = 7 - oldX;\n      const mirrorOldY = 7 - oldY;\n      const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\n      const mirrorNewX = 7 - currentX;\n      const mirrorNewY = 7 - currentY;\n      const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\n      setSendPiece(mirrorOldIdx + mirrorNewIdx + pieceCode);\n      socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode, sound);\n      localStorage.setItem(\"online-current-move\", -currentMove);\n      setCurrentMove(-currentMove);\n      localStorage.setItem(\"online-board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    previewVirtualBoard.current = newBoard;\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"online-board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    // console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      return possibleMovesCheck.some(currSquare => {\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8;\n    const pieceCode = kCode / -6;\n    let check = false;\n    const kingPossibleSquares = [[currentX - 1, currentY - 1], [currentX - 1, currentY], [currentX - 1, currentY + 1], [currentX, currentY - 1], [currentX, currentY + 1], [currentX + 1, currentY - 1], [currentX + 1, currentY], [currentX + 1, currentY + 1]];\n    console.log(previewVirtualBoard.current, pieceCode);\n    kingPossibleSquares.forEach(move => {\n      const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n      if (square === -kCode && square !== null) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        check = true;\n      }\n    }); // Pawns \n\n    const pawnPossibleSquares = [[currentX + pieceCode * setColor, currentY - pieceCode * setColor], [currentX + pieceCode * setColor, currentY + pieceCode * setColor]];\n    console.log(pawnPossibleSquares);\n    pawnPossibleSquares.forEach(move => {\n      const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n      if (square === pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        console.log('check');\n        check = true;\n      }\n    }); // Rows\n\n    if (currentX > 0) {\n      for (let i = currentX - 1; i >= 0; i--) {\n        const rowSquare = previewVirtualBoard.current[i] && previewVirtualBoard.current[i][currentY] && previewVirtualBoard.current[i][currentY];\n\n        if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (rowSquare !== 0) break;\n      }\n    }\n\n    if (currentX < ROWS - 1) {\n      for (let i = currentX + 1; i < ROWS; i++) {\n        const rowSquare = previewVirtualBoard.current[i] && previewVirtualBoard.current[i][currentY] && previewVirtualBoard.current[i][currentY];\n        console.log(rowSquare, pieceCode, previewVirtualBoard.current);\n\n        if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n\n          if (!isFromCheckMate) {\n            const checkMate = checkCheckmate(kCode, newVirtualBoard);\n            console.log(checkMate);\n          }\n\n          console.log(\"here in if\");\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (rowSquare !== 0) break;\n      }\n    } // Columns \n\n\n    if (currentY > 0) {\n      for (let i = currentY - 1; i >= 0; i--) {\n        const columnSquare = previewVirtualBoard.current[currentX] && previewVirtualBoard.current[currentX][i] && previewVirtualBoard.current[currentX][i];\n\n        if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (columnSquare !== 0) break;\n      }\n    }\n\n    if (currentY < COLUMNS - 1) {\n      for (let i = currentX + 1; i < COLUMNS; i++) {\n        const columnSquare = previewVirtualBoard.current[currentX] && previewVirtualBoard.current[currentX][i] && previewVirtualBoard.current[currentX][i];\n\n        if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (columnSquare !== 0) break;\n      }\n    } // Diagonal top left\n\n\n    if (currentX > 0 && currentY > 0) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX - i;\n        const newY = currentY - i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Diagonal top right\n\n\n    if (currentX > 0 && currentY < COLUMNS - 1) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX - i;\n        const newY = currentY + i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Diagonal bottom left\n\n\n    if (currentX < ROWS - 1 && currentY > 0) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX + i;\n        const newY = currentY - i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Diagonal bottom right\n\n\n    if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX + i;\n        const newY = currentY + i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Knight moves\n\n\n    const knightPossibleMoves = [[currentX - 2, currentY - 1], [currentX - 2, currentY + 1], [currentX + 2, currentY - 1], [currentX + 2, currentY + 1], [currentX - 1, currentY - 2], [currentX - 1, currentY + 2], [currentX + 1, currentY - 2], [currentX + 1, currentY + 2]];\n    knightPossibleMoves.forEach(move => {\n      const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n      if (square === pieceCode * 3) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        check = true;\n      }\n    });\n    return check;\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    console.log(board);\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    let checkMate = true;\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMovesCheckmate);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        console.log(newBoard, kCode);\n        console.log(allInOneBoard);\n        let kingSquare = -1;\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        console.log(kingSquare);\n        const newBoardCheck = checkCheckOptimised(kingSquare, kCode, true);\n        console.log(newBoardCheck, kingSquare, kCode);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    previewVirtualBoard.current = oldBoard;\n    if (checkMate) setGameRunning(false);\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1431,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1445,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1438,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1461,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1454,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1427,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  useEffect(() => {\n    socket.on('send-piece', (oldIdx, newIdx, pieceCode, sound) => {\n      const iconContainerElement = currSquareElement.current[oldIdx].firstChild;\n      console.log('use effect', newVirtualBoard, sendPiece);\n      const cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      const serverOldX = parseInt(oldIdx / 8);\n      const serverOldY = oldIdx % 8;\n      cloneVirtualBoard[serverOldX][serverOldY] = 0;\n      const serverNewX = parseInt(newIdx / 8);\n      const serverNewY = newIdx % 8;\n      cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\n      pieceSound.pause();\n      pieceCapture.pause();\n      pieceSound.currentTime = 0;\n      pieceCapture.currentTime = 0;\n      iconContainerElement.classList.add('opponent');\n      iconContainerElement.style.setProperty(\"--element-left\", `${(serverNewY - serverOldY) * 100}px`);\n      iconContainerElement.style.setProperty(\"--element-top\", `${(serverNewX - serverOldX) * 100}px`);\n      iconContainerElement.classList.add('changed-move');\n      previewVirtualBoard.current = cloneDeep(cloneVirtualBoard);\n      iconContainerElement.addEventListener(\"transitionend\", () => {\n        if (sound === \"move\") pieceSound.play();else pieceCapture.play();\n        iconContainerElement.style.zIndex = 'initial';\n        iconContainerElement.style.position = 'initial';\n        iconContainerElement.style.left = `initial`;\n        iconContainerElement.style.top = `initial`;\n        iconContainerElement.style.transform = 'initial';\n        localStorage.setItem(\"online-current-move\", -currentMove);\n        setCurrentMove(-currentMove);\n        localStorage.setItem(\"online-board\", JSON.stringify(cloneVirtualBoard));\n        setNewVirtualBoard(cloneVirtualBoard);\n      });\n    });\n  }, [sendPiece]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1531,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1532,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1533,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1534,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1535,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1538,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1530,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1528,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OnlineBoard, \"CsZL9U/ci+OzYHrJhwb5KTqSVBg=\");\n\n_c = OnlineBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnlineBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/OnlineBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","pieceMoveSound","pieceCaptureSound","OnlineSocket","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","OnlineBoard","color","prevButtons","random","socket","oppId","players","setColor","console","log","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","localStorage","getItem","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","JSON","parse","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","sendPiece","setSendPiece","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","pieceSound","Audio","pieceCapture","volume","minX","current","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","parseInt","style","width","squareHeight","height","player2Color","player1Color","getPossibleMoves","pieceCode","coords","piece","Math","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newX","newY","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","length","element","target","classList","contains","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","oldX","oldY","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheckOptimised","sound","play","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","pause","newPiece","containers","leftContainers","map","pawnTransformPiece","rookSquare","rookInit","cloneVirtualBoard","oppositeKingSquare","newBoard","checkMateOpponent","checkCheckmate","checkEqual","checkPat","mirrorOldX","mirrorOldY","mirrorOldIdx","mirrorNewX","mirrorNewY","mirrorNewIdx","emit","setItem","stringify","getContainers","currBoard","mySquaresClone","mySquares","filter","result","elementIdx","count","transformPieceCode","Object","keys","key","piece1","piece2","checkCheck","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","kingPossibleSquares","pawnPossibleSquares","rowSquare","checkMate","columnSquare","knightPossibleMoves","constantBoard","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rowIdx","rows","squareIdx","realIdx","squareComponent","ref","toString","on","newIdx","iconContainerElement","serverOldX","serverOldY","serverNewX","serverNewY","currentTime","setProperty","addEventListener","transform"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,WAArC,EAAkDC,aAAlD,EAAiEC,WAAjE,EAA8EC,YAA9E,QAAkG,mCAAlG;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AAEA,OAAO,qBAAP;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,MAAM,GAAG,KAAKC,MAAM,CAACC,WAAZ,GAA0B,GAAzC;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,OAAO,GAAG,CAAhB;AAEA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,MAAtB;AAA8BC,EAAAA,MAA9B;AAAsCC,EAAAA,KAAtC;AAA6CC,EAAAA;AAA7C,CAArB,EAA6E;AAAA;;AAAA;;AAExF,QAAMC,QAAQ,GAAGN,KAAjB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;;AACA,QAAMI,kBAAkB,GAAG,MAAM;AAC7B,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAIC,GAAG,GAAG,EAAV;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EACI,IAAIF,CAAC,KAAK,CAAV,EAAaC,GAAG,CAACE,IAAJ,CAAS,CAACR,QAAD,GAAY,CAArB,EAAb,KACK,IAAIK,CAAC,KAAK,CAAV,EAAaC,GAAG,CAACE,IAAJ,CAASR,QAAQ,GAAG,CAApB,EAAb,KACA,IAAIK,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EAAwBC,GAAG,CAACE,IAAJ,CAAS,CAAT;;AAEjC,UAAId,KAAK,GAAG,CAAZ,EAAe;AACX,YAAIW,CAAC,KAAK,CAAV,EAAaC,GAAG,CAACE,IAAJ,CAAS,CAACR,QAAD,GAAY,CAArB,EAAwB,CAACA,QAAD,GAAY,CAApC,EAAuC,CAACA,QAAD,GAAY,CAAnD,EAAsD,CAACA,QAAD,GAAY,CAAlE,EAAqE,CAACA,QAAD,GAAY,CAAjF,EAAoF,CAACA,QAAD,GAAY,CAAhG,EAAmG,CAACA,QAAD,GAAY,CAA/G,EAAkH,CAACA,QAAD,GAAY,CAA9H,EAAb,KACK,IAAIK,CAAC,KAAK,CAAV,EAAaC,GAAG,CAACE,IAAJ,CAASR,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,CAAlC,EAAqCA,QAAQ,GAAG,CAAhD,EAAmDA,QAAQ,GAAG,CAA9D,EAAiEA,QAAQ,GAAG,CAA5E,EAA+EA,QAAQ,GAAG,CAA1F,EAA6FA,QAAQ,GAAG,CAAxG,EAA2GA,QAAQ,GAAG,CAAtH;AACrB,OAHD,MAGO;AACH,YAAIK,CAAC,KAAK,CAAV,EAAaC,GAAG,CAACE,IAAJ,CAAS,CAACR,QAAD,GAAY,CAArB,EAAwB,CAACA,QAAD,GAAY,CAApC,EAAuC,CAACA,QAAD,GAAY,CAAnD,EAAsD,CAACA,QAAD,GAAY,CAAlE,EAAqE,CAACA,QAAD,GAAY,CAAjF,EAAoF,CAACA,QAAD,GAAY,CAAhG,EAAmG,CAACA,QAAD,GAAY,CAA/G,EAAkH,CAACA,QAAD,GAAY,CAA9H,EAAb,KACK,IAAIK,CAAC,KAAK,CAAV,EAAaC,GAAG,CAACE,IAAJ,CAASR,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAG,CAAlC,EAAqCA,QAAQ,GAAG,CAAhD,EAAmDA,QAAQ,GAAG,CAA9D,EAAiEA,QAAQ,GAAG,CAA5E,EAA+EA,QAAQ,GAAG,CAA1F,EAA6FA,QAAQ,GAAG,CAAxG,EAA2GA,QAAQ,GAAG,CAAtH;AACrB;;AACDI,MAAAA,KAAK,CAACI,IAAN,CAAWF,GAAX;AACH;;AAED,WAAOF,KAAP;AACH,GArBD;;AAuBA,QAAMK,QAAQ,GAAGlC,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMmC,SAAS,GAAGnC,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAM,CAACoC,WAAD,EAAcC,cAAd,IAAgCvC,QAAQ,CAACwC,YAAY,CAACC,OAAb,CAAqB,qBAArB,MAAgD,IAAhD,GAAuD,CAAvD,GAA2DD,YAAY,CAACC,OAAb,CAAqB,qBAArB,CAA5D,CAA9C;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8C3C,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAAC4C,MAAD,EAASC,SAAT,IAAsB7C,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC8C,aAAD,EAAgBC,gBAAhB,IAAoC/C,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACgD,WAAD,EAAcC,cAAd,IAAgCjD,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACkD,UAAD,EAAaC,aAAb,IAA8BnD,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACoD,YAAD,EAAeC,eAAf,IAAkCrD,QAAQ,CAACwC,YAAY,CAACC,OAAb,CAAqB,cAArB,MAAyC,IAAzC,GAAgDX,kBAAkB,EAAlE,GAAuEwB,IAAI,CAACC,KAAL,CAAWf,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAAxE,CAAhD;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwCzD,QAAQ,CAACoD,YAAD,CAAtD;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkC3D,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC4D,WAAD,EAAcC,cAAd,IAAgC7D,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC8D,aAAD,EAAgBC,gBAAhB,IAAoC/D,QAAQ,CAAC,IAAD,CAAlD;AAEA,QAAM,CAACgE,SAAD,EAAYC,YAAZ,IAA4BjE,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMkE,mBAAmB,GAAGhE,MAAM,CAACkD,YAAD,CAAlC;AACA,QAAMe,cAAc,GAAGjE,MAAM,CAAC,IAAD,CAA7B;AACA,QAAMkE,iBAAiB,GAAGlE,MAAM,CAAC,EAAD,CAAhC;AACA,QAAMmE,WAAW,GAAGnE,MAAM,CAAC,EAAD,CAA1B;AACA,QAAMoE,UAAU,GAAGpE,MAAM,CAAC;AAAC,SAAK,KAAN;AAAa,UAAM;AAAnB,GAAD,CAAzB;AACA,QAAMqE,SAAS,GAAGrE,MAAM,CAAC;AACrB,SAAK;AACD,cAAQ,KADP;AAED,eAAS;AAFR,KADgB;AAMrB,UAAM;AACF,cAAQ,KADN;AAEF,eAAS;AAFP;AANe,GAAD,CAAxB;AAYA,QAAMsE,UAAU,GAAG;AACf,OAAGpE,WADY;AAEf,OAAGE,WAFY;AAGf,OAAGD,aAHY;AAIf,OAAGE,aAJY;AAKf,OAAGE,YALY;AAMf,OAAGD;AANY,GAAnB;AASA,QAAMiE,UAAU,GAAG,IAAIC,KAAJ,CAAU/D,cAAV,CAAnB;AACA,QAAMgE,YAAY,GAAG,IAAID,KAAJ,CAAU9D,iBAAV,CAArB;AACA+D,EAAAA,YAAY,CAACC,MAAb,GAAsB,GAAtB;AAGA,QAAMC,IAAI,wBAAGzC,QAAQ,CAAC0C,OAAZ,sDAAG,kBAAkBC,UAA/B;AACA,QAAMC,IAAI,GAAG,uBAAA5C,QAAQ,CAAC0C,OAAT,0EAAkBC,UAAlB,2BAA+B3C,QAAQ,CAAC0C,OAAxC,uDAA+B,mBAAkBG,WAAjD,IAA+D,EAA5E;AAEA,QAAMC,IAAI,yBAAG9C,QAAQ,CAAC0C,OAAZ,uDAAG,mBAAkBK,SAA/B;AACA,QAAMC,IAAI,GAAG,uBAAAhD,QAAQ,CAAC0C,OAAT,0EAAkBK,SAAlB,2BAA8B/C,QAAQ,CAAC0C,OAAvC,uDAA8B,mBAAkBO,YAAhD,IAA+D,EAA5E;AAEA,QAAMC,WAAW,GAAGC,QAAQ,uBAACnD,QAAQ,CAAC0C,OAAV,uDAAC,mBAAkBU,KAAlB,CAAwBC,KAAzB,CAAR,GAA0C,CAA9D;AACA,QAAMC,YAAY,GAAGH,QAAQ,uBAACnD,QAAQ,CAAC0C,OAAV,uDAAC,mBAAkBU,KAAlB,CAAwBG,MAAzB,CAAR,GAA2C,CAAhE;AAEA,QAAMC,YAAY,GAAGxC,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,IAAqB,CAArB,GAAyB,OAAzB,GAAmC,OAAxD;AACA,QAAMyC,YAAY,GAAGD,YAAY,KAAK,OAAjB,GAA2B,OAA3B,GAAqC,OAA1D,CArFwF,CAuFxF;;AAEA,QAAME,gBAAgB,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBjE,KAApB,KAA8B;AACnD,UAAMkE,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASJ,SAAT,CAAd;AACA,QAAIjD,aAAa,GAAG,EAApB,CAFmD,CAInD;;AACA,UAAMsD,QAAQ,GAAGb,QAAQ,CAACS,MAAM,GAAG,CAAV,CAAzB;AACA,UAAMK,QAAQ,GAAGL,MAAM,GAAG,CAA1B,CANmD,CASnD;;AACA,QAAIC,KAAK,KAAK,CAAd,EAAiB;AAEb;AACA,YAAMK,QAAQ,GAAGF,QAAQ,GAAIL,SAAS,GAAGpE,QAAzC;AACA,YAAM4E,QAAQ,GAAGF,QAAQ,GAAIN,SAAS,GAAGpE,QAAzC;AACA,YAAM6E,SAAS,GAAGH,QAAQ,GAAIN,SAAS,GAAGpE,QAA1C;AAEA,YAAM8E,SAAS,GAAGH,QAAQ,GAAG,CAAX,GAAeC,QAAjC;AACA,YAAMG,UAAU,GAAGJ,QAAQ,GAAG,CAAX,GAAeE,SAAlC;AACA,YAAMG,cAAc,GAAGL,QAAQ,GAAG,CAAX,GAAeD,QAAtC;AACA,YAAMO,YAAY,GAAG7E,KAAK,CAACuE,QAAD,CAAL,IACAvE,KAAK,CAACuE,QAAD,CAAL,CAAgBD,QAAhB,CADA,IAEAtE,KAAK,CAACuE,QAAD,CAAL,CAAgBD,QAAhB,CAFrB;AAKA,UAAIO,YAAY,KAAK,CAArB,EAAwB9D,aAAa,CAACX,IAAd,CAAmBwE,cAAnB;AAIxB,YAAME,eAAe,GAAG9E,KAAK,CAACuE,QAAD,CAAL,IACAvE,KAAK,CAACuE,QAAD,CAAL,CAAgBC,QAAhB,CADA,IAEAxE,KAAK,CAACuE,QAAD,CAAL,CAAgBC,QAAhB,CAFxB;AAIA,YAAMO,gBAAgB,GAAG/E,KAAK,CAACuE,QAAD,CAAL,IACAvE,KAAK,CAACuE,QAAD,CAAL,CAAgBE,SAAhB,CADA,IAEAzE,KAAK,CAACuE,QAAD,CAAL,CAAgBE,SAAhB,CAFzB;;AAIA,UAAKT,SAAS,GAAGpE,QAAZ,GAAuB,CAAvB,IAA4ByE,QAAQ,KAAK,CAA1C,IAAiDL,SAAS,GAAGpE,QAAZ,GAAuB,CAAvB,IAA4ByE,QAAQ,KAAK,CAA9F,EAAkG;AAC9F,cAAMW,SAAS,GAAGX,QAAQ,GAAIL,SAAS,GAAG,CAAZ,GAAgBpE,QAA9C;AAEA,cAAMgF,cAAc,GAAGI,SAAS,GAAG,CAAZ,GAAgBV,QAAvC;AAEA,cAAMW,eAAe,GAAGjF,KAAK,CAACgF,SAAD,CAAL,CAAiBV,QAAjB,CAAxB;AACA,YAAIW,eAAe,KAAK,CAAxB,EAA2BlE,aAAa,CAACX,IAAd,CAAmBwE,cAAnB;AAE9B;;AAED,UAAIG,gBAAgB,KAAK,CAAzB,EAA4B;AACxB,YAAIG,kBAAkB,CAAClB,SAAD,EAAYe,gBAAZ,CAAtB,EAAqDhE,aAAa,CAACX,IAAd,CAAmBuE,UAAnB;AACxD;;AAED,UAAIG,eAAe,KAAK,CAAxB,EAA2B,OAAO/D,aAAP;AAE3B,UAAImE,kBAAkB,CAAClB,SAAD,EAAYc,eAAZ,CAAtB,EAAoD/D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAEvD,KA7CD,MA6CO,IAAIR,KAAK,KAAK,CAAd,EAAiB;AAEpB,UAAII,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIrE,CAAC,GAAGqE,QAAQ,GAAG,CAAxB,EAA2BrE,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,gBAAMyE,SAAS,GAAGL,QAAQ,GAAG,CAAX,GAAepE,CAAjC;AAEA,gBAAMkF,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AAEA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAGV;AACJ;AACJ;;AAED,UAAIJ,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIrE,CAAC,GAAGqE,QAAQ,GAAG,CAAxB,EAA2BrE,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC,gBAAMyE,SAAS,GAAGL,QAAQ,GAAG,CAAX,GAAepE,CAAjC;AACA,gBAAMkF,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC7C;AACJ,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAGV;AACJ;AACJ;;AAED,UAAIL,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIpE,CAAC,GAAGoE,QAAQ,GAAG,CAAxB,EAA2BpE,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,gBAAMyE,SAAS,GAAGzE,CAAC,GAAG,CAAJ,GAAQqE,QAA1B;AACA,gBAAMa,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAIV;AACJ;AACJ;;AAED,UAAIL,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIpE,CAAC,GAAGoE,QAAQ,GAAG,CAAxB,EAA2BpE,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC,gBAAMyE,SAAS,GAAGzE,CAAC,GAAG,CAAJ,GAAQqE,QAA1B;AACA,gBAAMa,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAGV;AAEJ;AACJ;AACJ,KArFM,MAqFA,IAAIR,KAAK,KAAK,CAAd,EAAiB;AAEpB,YAAMqB,UAAU,GAAG,CACf;AACIC,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OADe,EAMf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OANe,EAWf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OAXe,EAgBf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OAhBe,EAqBf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OArBe,EA0Bf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OA1Be,EA+Bf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OA/Be,EAoCf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OApCe,CAAnB;AA0CAiB,MAAAA,UAAU,CAACG,OAAX,CAAmBC,SAAS,IAAI;AAC5B,cAAMjB,SAAS,GAAGiB,SAAS,CAACH,CAAV,GAAc,CAAd,GAAkBG,SAAS,CAACF,CAA9C;AACA,cAAMJ,SAAS,GAAGrF,KAAK,CAAC2F,SAAS,CAACH,CAAX,CAAL,IACAxF,KAAK,CAAC2F,SAAS,CAACH,CAAX,CAAL,CAAmBG,SAAS,CAACF,CAA7B,CADA,IAEAzF,KAAK,CAAC2F,SAAS,CAACH,CAAX,CAAL,CAAmBG,SAAS,CAACF,CAA7B,CAFlB;;AAIA,YAAIJ,SAAS,KAAKC,SAAd,IAA2BK,SAAS,CAACH,CAAV,IAAe,CAA1C,IAA+CG,SAAS,CAACF,CAAV,IAAe,CAA9D,IAAmEE,SAAS,CAACH,CAAV,GAAc,CAAjF,IAAsFG,SAAS,CAACF,CAAV,GAAc,CAAxG,EAA2G;AACvG,cAAIJ,SAAS,KAAK,CAAlB,EAAqB;AACjB,gBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AACjD,WAFD,MAGK3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAGR;AACJ,OAdD;AAeH,KA3DM,MA2DA,IAAIR,KAAK,KAAK,CAAd,EAAiB;AACpB,UAAIG,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAd,IAA2BH,IAAI,IAAI,CAAnC,IAAwCC,IAAI,IAAI,CAAhD,IAAqDD,IAAI,GAAG,CAA5D,IAAiEC,IAAI,GAAG,CAA5E,EAA+E;AAC3E,gBAAIC,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAE9C;AACH,aAJD,MAIO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDX,SAAlD;AACH;AACJ;AACJ;;AAED,UAAIL,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAd,IAA2BH,IAAI,IAAI,CAAnC,IAAwCC,IAAI,IAAI,CAAhD,IAAqDD,IAAI,GAAG,CAA5D,IAAiEC,IAAI,GAAG,CAA5E,EAA+E;AAE3E,gBAAIC,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C7E,cAAAA,OAAO,CAACC,GAAR,CAAYiB,aAAZ;AACA;AACH,aAJD,MAIOA,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDX,SAAlD;AACH;AAEJ;AACJ;;AAED,UAAIL,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAd,IAA2BH,IAAI,IAAI,CAAnC,IAAwCC,IAAI,IAAI,CAAhD,IAAqDD,IAAI,GAAG,CAA5D,IAAiEC,IAAI,GAAG,CAA5E,EAA+E;AAE3E,gBAAIC,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C7E,cAAAA,OAAO,CAACC,GAAR,CAAYiB,aAAZ;AACA;AACH,aAJD,MAIOA,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDX,SAAlD;AACH;AACJ;AACJ;;AAED,UAAIL,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAd,IAA2BH,IAAI,IAAI,CAAnC,IAAwCC,IAAI,IAAI,CAAhD,IAAqDD,IAAI,GAAG,CAA5D,IAAiEC,IAAI,GAAG,CAA5E,EAA+E;AAE3E,gBAAIC,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C7E,cAAAA,OAAO,CAACC,GAAR,CAAYiB,aAAZ,EAA2BsE,SAA3B,EAAsCrF,KAAtC,EAA6CmF,IAA7C,EAAmDC,IAAnD;AACA;AACH,aAJD,MAIOrE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDX,SAAlD;AACH;AAEJ;AACJ;AACJ,KAzFM,MAyFA,IAAIR,KAAK,KAAK,CAAd,EAAiB;AACpBrE,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;;AAEA,UAAIsE,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIrE,CAAC,GAAGqE,QAAQ,GAAG,CAAxB,EAA2BrE,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,gBAAMyE,SAAS,GAAGL,QAAQ,GAAG,CAAX,GAAepE,CAAjC;AACA,gBAAMkF,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC;AACH;AACJ;AACJ;;AAED,UAAIf,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIrE,CAAC,GAAGqE,QAAQ,GAAG,CAAxB,EAA2BrE,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC,gBAAMyE,SAAS,GAAGL,QAAQ,GAAG,CAAX,GAAepE,CAAjC;AACA,gBAAMkF,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AAEzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCiB,aAAvC;AACH;AACJ;AACJ;;AAED,UAAIsD,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIpE,CAAC,GAAGoE,QAAQ,GAAG,CAAxB,EAA2BpE,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,gBAAMyE,SAAS,GAAGzE,CAAC,GAAG,CAAJ,GAAQqE,QAA1B;AACA,gBAAMa,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjBxF,cAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ,EAAmBA,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAAnB,EAAsCpB,SAAtC,EAAiDU,SAAjD;AACA,kBAAIQ,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAJD,MAIO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC4E,SAAvC,EAAkD3D,aAAlD;AACH;AACJ;AACJ;;AAED,UAAIsD,QAAQ,GAAG,CAAf,EAAkB;AACd,aAAK,IAAIpE,CAAC,GAAGoE,QAAQ,GAAG,CAAxB,EAA2BpE,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC,gBAAMyE,SAAS,GAAGzE,CAAC,GAAG,CAAJ,GAAQqE,QAA1B;AACA,gBAAMa,IAAI,GAAG3B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMU,IAAI,GAAG5B,QAAQ,CAACkB,SAAS,GAAG,CAAb,CAArB;AACA,gBAAMW,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDtE,aAAlD;AACH;AAEJ;AACJ;;AAED,UAAIsD,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;AAGAvF,UAAAA,OAAO,CAACC,GAAR,CAAYuF,SAAZ,EAAuBF,IAAvB,EAA6BC,IAA7B,EAAmCpB,SAAnC;;AACA,cAAIqB,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDtE,aAAlD;AACH;AACJ;AACJ;;AAED,UAAIsD,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;AAGAvF,UAAAA,OAAO,CAACC,GAAR,CAAYuF,SAAZ,EAAuBF,IAAvB,EAA6BC,IAA7B;;AACA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AAEzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDtE,aAAlD;AACH;AACJ;AACJ;;AAED,UAAIsD,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzB,gBAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDtE,aAAlD;AACH;AACJ;AACJ;;AAED,UAAIsD,QAAQ,IAAI,CAAZ,IAAiBC,QAAQ,IAAI,CAAjC,EAAoC;AAChC,aAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,gBAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,gBAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,gBAAMyE,SAAS,GAAGS,IAAI,GAAG,CAAP,GAAWC,IAA7B;AACA,gBAAMC,SAAS,GAAGrF,KAAK,CAACmF,IAAD,CAAL,IACAnF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CADA,IAEApF,KAAK,CAACmF,IAAD,CAAL,CAAYC,IAAZ,CAFlB;;AAIA,cAAIC,SAAS,KAAKC,SAAlB,EAA6B;AACzBzF,YAAAA,OAAO,CAACC,GAAR,CAAYqF,IAAZ,EAAkBC,IAAlB;;AACA,gBAAIC,SAAS,KAAK,CAAlB,EAAqB;AACjB,kBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AAC9C;AACH,aAHD,MAGO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCuF,SAAvC,EAAkDtE,aAAlD;AACH;AAEJ;AACJ;AACJ,KAxKM,MAwKA,IAAImD,KAAK,KAAK,CAAd,EAAiB;AACpB,YAAMqB,UAAU,GAAG,CACf;AACIC,QAAAA,CAAC,EAAEnB,QADP;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OADe,EAMf;AACIkB,QAAAA,CAAC,EAAEnB,QADP;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OANe,EAWf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB;AAFP,OAXe,EAgBf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB;AAFP,OAhBe,EAqBf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OArBe,EA0Bf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OA1Be,EA+Bf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OA/Be,EAoCf;AACIkB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG,CADlB;AAEIoB,QAAAA,CAAC,EAAEnB,QAAQ,GAAG;AAFlB,OApCe,CAAnB;AA0CAiB,MAAAA,UAAU,CAACG,OAAX,CAAmBC,SAAS,IAAI;AAC5B,cAAMjB,SAAS,GAAGiB,SAAS,CAACH,CAAV,GAAc,CAAd,GAAkBG,SAAS,CAACF,CAA9C;AACA,cAAMJ,SAAS,GAAGrF,KAAK,CAAC2F,SAAS,CAACH,CAAX,CAAL,IACAxF,KAAK,CAAC2F,SAAS,CAACH,CAAX,CAAL,CAAmBG,SAAS,CAACF,CAA7B,CADA,IAEAzF,KAAK,CAAC2F,SAAS,CAACH,CAAX,CAAL,CAAmBG,SAAS,CAACF,CAA7B,CAFlB;;AAGA,YAAIJ,SAAS,KAAKC,SAAd,IAA2BK,SAAS,CAACH,CAAV,IAAe,CAA1C,IAA+CG,SAAS,CAACF,CAAV,IAAe,CAA9D,IAAmEE,SAAS,CAACH,CAAV,GAAc,CAAjF,IAAsFG,SAAS,CAACF,CAAV,GAAc,CAAxG,EAA2G;AACvG,cAAIJ,SAAS,KAAK,CAAlB,EAAqB;AACjB,gBAAIH,kBAAkB,CAAClB,SAAD,EAAYqB,SAAZ,CAAtB,EAA8CtE,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;AACjD,WAFD,MAEO3D,aAAa,CAACX,IAAd,CAAmBsE,SAAnB;;AAEP7E,UAAAA,OAAO,CAACC,GAAR,CAAYuF,SAAZ,EAAuBM,SAAS,CAACH,CAAjC,EAAoCG,SAAS,CAACF,CAA9C;AACH;AACJ,OAZD,EA3CoB,CAyDpB;;AACA5F,MAAAA,OAAO,CAACC,GAAR,CAAYyC,UAAU,CAACQ,OAAX,CAAmBiB,SAAnB,CAAZ;;AACA,UAAI,CAACzB,UAAU,CAACQ,OAAX,CAAmBiB,SAAnB,CAAL,EAAoC;AAChCnE,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB0C,SAAtB;AACA,cAAMoD,iBAAiB,GAAGvB,QAAQ,GAAG,CAAX,GAAeC,QAAf,GAA0B,CAApD;AACA,cAAMuB,eAAe,GAAGxB,QAAQ,GAAG,CAAX,GAAeC,QAAf,GAA0B,CAAlD;AACA,cAAMwB,qBAAqB,GAAG9B,SAAS,GAAG,CAAZ,GAAgB,CAAhB,GAAoB,EAAlD;AACA,cAAM+B,mBAAmB,GAAG/B,SAAS,GAAG,CAAZ,GAAgB,CAAhB,GAAoB,EAAhD;AAEA,cAAMgC,iBAAiB,GAAGhG,KAAK,CAACqE,QAAD,CAAL,IACArE,KAAK,CAACqE,QAAD,CAAL,CAAgBC,QAAQ,GAAG,CAA3B,CADA,IAEAtE,KAAK,CAACqE,QAAD,CAAL,CAAgBC,QAAQ,GAAG,CAA3B,CAF1B;AAIA,cAAM2B,eAAe,GAAGjG,KAAK,CAACqE,QAAD,CAAL,IACArE,KAAK,CAACqE,QAAD,CAAL,CAAgBC,QAAQ,GAAG,CAA3B,CADA,IAEAtE,KAAK,CAACqE,QAAD,CAAL,CAAgBC,QAAQ,GAAG,CAA3B,CAFxB;AAIA,YAAI4B,gBAAgB,GAAG,IAAvB;AAAA,YAA6BC,cAAc,GAAG,IAA9C,CAfgC,CAiBhC;;AACA,aAAK,IAAIlG,CAAC,GAAGgE,MAAM,GAAG,CAAtB,EAAyBhE,CAAC,IAAI2F,iBAA9B,EAAiD3F,CAAC,EAAlD,EAAsD;AAClD,gBAAMmG,OAAO,GAAG5C,QAAQ,CAACvD,CAAC,GAAG,CAAL,CAAxB;AACA,gBAAMoG,OAAO,GAAGpG,CAAC,GAAG,CAApB;AAEA,cAAID,KAAK,CAACoG,OAAD,CAAL,CAAeC,OAAf,MAA4B,CAAhC,EAAmCH,gBAAgB,GAAG,KAAnB;AACtC;;AAED,aAAK,IAAIjG,CAAC,GAAG4F,eAAb,EAA8B5F,CAAC,GAAGgE,MAAlC,EAA0ChE,CAAC,EAA3C,EAA+C;AAC3C,gBAAMmG,OAAO,GAAG5C,QAAQ,CAACvD,CAAC,GAAG,CAAL,CAAxB;AACA,gBAAMoG,OAAO,GAAGpG,CAAC,GAAG,CAApB;AACA,cAAID,KAAK,CAACoG,OAAD,CAAL,CAAeC,OAAf,MAA4B,CAAhC,EAAmCF,cAAc,GAAG,KAAjB;AACtC;;AAED,YAAIH,iBAAiB,KAAKV,SAAtB,IAAmCY,gBAAnC,IAAuD,CAAC1D,SAAS,CAACO,OAAV,CAAkBiB,SAAS,GAAG,CAAZ,GAAgB,IAAhB,GAAuB,GAAzC,EAA8C,OAA9C,CAA5D,EAAoH;AAChHjD,UAAAA,aAAa,CAACX,IAAd,CAAmB;AACfkG,YAAAA,IAAI,EAAEV,iBADS;AAEfW,YAAAA,IAAI,EAAET,qBAFS;AAGfU,YAAAA,MAAM,EAAE;AAHO,WAAnB;AAKH;;AAED,YAAIP,eAAe,KAAKX,SAApB,IAAiCa,cAAjC,IAAmD,CAAC3D,SAAS,CAACO,OAAV,CAAkBiB,SAAS,GAAG,CAAZ,GAAgB,IAAhB,GAAuB,GAAzC,EAA8C,MAA9C,CAAxD,EAA+G;AAC3GjD,UAAAA,aAAa,CAACX,IAAd,CAAmB;AACfkG,YAAAA,IAAI,EAAET,eADS;AAEfU,YAAAA,IAAI,EAAER,mBAFS;AAGfS,YAAAA,MAAM,EAAE;AAHO,WAAnB;AAKH,SA7C+B,CAiDhC;AACA;;AACH;AACJ;;AAED,WAAOzF,aAAP;AACH,GA1jBD;;AA4jBA,QAAM0F,SAAS,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;AAE7B,QAAI,CAAC9E,WAAL,EAAkB;AAClB,QAAIE,aAAa,IAAI,CAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAE6E,QAAf,CAAwBC,MAAxB,IAAiC,CAAtD,EAAyD;AAEzD,UAAMC,OAAO,GAAGJ,CAAC,CAACK,MAAF,CAASC,SAAT,CAAmBC,QAAnB,CAA4B,OAA5B,IAAuCP,CAAC,CAACK,MAAzC,GAAkDL,CAAC,CAACK,MAAF,CAASG,aAA3E;AACA,UAAMC,gBAAgB,GAAGL,OAAO,CAACI,aAAjC;AAEA,UAAM1B,CAAC,GAAGkB,CAAC,CAACU,OAAF,GAAY,EAAtB;AACA,UAAM3B,CAAC,GAAGiB,CAAC,CAACW,OAAF,GAAY,EAAtB;AAEAF,IAAAA,gBAAgB,CAAC1D,KAAjB,CAAuB6D,QAAvB,GAAkC,UAAlC;AACAH,IAAAA,gBAAgB,CAAC1D,KAAjB,CAAuB8D,IAAvB,GAA+B,GAAE/B,CAAE,IAAnC;AACA2B,IAAAA,gBAAgB,CAAC1D,KAAjB,CAAuB+D,GAAvB,GAA8B,GAAE/B,CAAE,IAAlC;AAEAvE,IAAAA,cAAc,CAACiG,gBAAD,CAAd;AACA/F,IAAAA,aAAa,CAACoC,QAAQ,CAAC2D,gBAAgB,CAACH,SAAjB,CAA2B,CAA3B,CAAD,CAAT,CAAb;AACA,QAAIS,cAAJ;AACApF,IAAAA,iBAAiB,CAACU,OAAlB,CAA0B2C,OAA1B,CAAkC,CAACiB,MAAD,EAASe,GAAT,KAAiB;AAC/C,UAAIf,MAAM,KAAKQ,gBAAgB,CAACD,aAAhC,EAA+CO,cAAc,GAAGC,GAAjB;AAClD,KAFD;AAIA5G,IAAAA,SAAS,CAAC2G,cAAD,CAAT;AAEA,UAAME,iBAAiB,GAAG5D,gBAAgB,CAAC4C,MAAD,EAASc,cAAT,EAAyBhG,eAAzB,CAA1C;AAEA,QAAIyD,kBAAkB,CAACyB,MAAD,EAASpG,WAAT,CAAtB,EAA6CS,gBAAgB,CAAC,EAAD,CAAhB,CAA7C,KACK;AACDA,MAAAA,gBAAgB,CAAC2G,iBAAD,CAAhB,CADC,CAGD;;AACAhG,MAAAA,YAAY,IAAIA,YAAY,CAAC+D,OAAb,CAAqBkC,IAAI,IAAI;AACzC,cAAMC,eAAe,GAAGD,IAAI,CAACE,UAA7B;AAEA,YAAID,eAAe,IAAI,CAACA,eAAe,CAACb,SAAhB,CAA0BC,QAA1B,CAAmC,gBAAnC,CAAxB,EAA8EW,IAAI,CAACG,WAAL,CAAiBF,eAAjB,EAA9E,KACK,IAAIA,eAAJ,EAAqBA,eAAe,CAACC,UAAhB,CAA2Bd,SAA3B,CAAqCgB,MAArC,CAA4C,UAA5C;AAC7B,OALe,CAAhB;AAOA,UAAIC,eAAe,GAAG,EAAtB;AACAN,MAAAA,iBAAiB,CAACjC,OAAlB,CAA0B,CAACkC,IAAD,EAAOF,GAAP,KAAe;AACrCQ,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAMC,UAAU,GAAG9F,iBAAiB,CAACU,OAAlB,CAA0B6E,IAA1B,CAAnB;;AAEA,cAAIO,UAAU,IAAIA,UAAU,CAACL,UAAX,IAAyB,IAA3C,EAAiD;AAC7C,kBAAMM,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAnB;AACAF,YAAAA,UAAU,CAACpB,SAAX,CAAqBuB,GAArB,CAAyB,eAAzB;AAEAJ,YAAAA,UAAU,CAACK,WAAX,CAAuBJ,UAAvB;AAEAH,YAAAA,eAAe,CAAC7H,IAAhB,CAAqB+H,UAArB;AACH,WAPD,MAOO,IAAIA,UAAU,IAAIA,UAAU,CAACL,UAAX,CAAsBA,UAAtB,KAAqC,IAAvD,EAA6D;AAChEK,YAAAA,UAAU,CAACL,UAAX,CAAsBA,UAAtB,CAAiCd,SAAjC,CAA2CuB,GAA3C,CAA+C,UAA/C;AACAN,YAAAA,eAAe,CAAC7H,IAAhB,CAAqB+H,UAArB;AACH;AACJ,SAdS,EAcPT,GAAG,GAAG,CAdC,CAAV;AAeH,OAhBD;AAkBA9F,MAAAA,eAAe,CAACqG,eAAD,CAAf;AACH;AAEJ,GA5DD;;AA8DA,QAAMQ,SAAS,GAAG/B,CAAC,IAAI;AAAA;;AAEnB,QAAI,CAACzF,WAAL,EAAkB;AAClB,UAAMuE,CAAC,GAAGkB,CAAC,CAACU,OAAF,GAAY,EAAtB;AACA,UAAM3B,CAAC,GAAGiB,CAAC,CAACW,OAAF,GAAY,EAAtB;AACApG,IAAAA,WAAW,CAACwC,KAAZ,CAAkB6D,QAAlB,GAA6B,UAA7B;AACArG,IAAAA,WAAW,CAACwC,KAAZ,CAAkB8D,IAAlB,GAA0B,GAAE/B,CAAC,GAAGvC,IAAJ,GAAWA,IAAX,GAAkBuC,CAAC,GAAG1C,IAAJ,GAAWA,IAAX,GAAkB0C,CAAE,IAAlE;AACAvE,IAAAA,WAAW,CAACwC,KAAZ,CAAkB+D,GAAlB,GAAyB,GAAE/B,CAAC,GAAGpC,IAAJ,GAAWA,IAAX,GAAkBoC,CAAC,GAAGtC,IAAJ,GAAWA,IAAX,GAAkBsC,CAAE,IAAjE;AACAxE,IAAAA,WAAW,CAACwC,KAAZ,CAAkBiF,MAAlB,GAA2B,CAA3B;AAEA,UAAMC,OAAO,GAAG,CAACnF,QAAQ,CAACvC,WAAW,CAACwC,KAAZ,CAAkB8D,IAAnB,CAAR,0BAAmClH,QAAQ,CAAC0C,OAA5C,uDAAmC,mBAAkBC,UAArD,CAAD,IAAoEO,WAApF;AACA,UAAMqF,OAAO,GAAG,CAACpF,QAAQ,CAACvC,WAAW,CAACwC,KAAZ,CAAkB+D,GAAnB,CAAR,2BAAkCnH,QAAQ,CAAC0C,OAA3C,wDAAkC,oBAAkBK,SAApD,CAAD,IAAkEO,YAAlF;AAEArD,IAAAA,SAAS,CAACyC,OAAV,GAAoB;AAACyC,MAAAA,CAAC,EAAErB,IAAI,CAAC0E,KAAL,CAAWD,OAAX,CAAJ;AAAyBnD,MAAAA,CAAC,EAAEtB,IAAI,CAAC0E,KAAL,CAAWF,OAAX;AAA5B,KAApB;AAEH,GAfD;;AAiBA,QAAMG,SAAS,GAAG,CAACpC,CAAD,EAAI1C,SAAJ,KAAkB;AAAA;;AAEhC,QAAI,CAAC/C,WAAD,IAAgB,CAACX,SAAS,CAACyC,OAA3B,IAAsClC,MAAM,KAAK,IAArD,EAA2D;AAC3D,QAAI,CAACE,aAAL,EAAoB;AAGpBG,IAAAA,cAAc,CAAC,IAAD,CAAd;AAEA,UAAMmD,QAAQ,yBAAG/D,SAAS,CAACyC,OAAb,uDAAG,mBAAmByC,CAApC;AACA,UAAMlB,QAAQ,0BAAGhE,SAAS,CAACyC,OAAb,wDAAG,oBAAmB0C,CAApC;AACA,QAAIe,MAAM,GAAG,KAAb;AACA,UAAMkB,GAAG,GAAGrD,QAAQ,GAAG,CAAX,GAAeC,QAA3B;AACA,UAAMyE,IAAI,GAAGvF,QAAQ,CAAC3C,MAAM,GAAG,CAAV,CAArB;AACA,UAAMmI,IAAI,GAAGnI,MAAM,GAAG,CAAtB;AAEA,UAAMoI,SAAS,GAAGlI,aAAa,CAACmI,IAAd,CAAmBtB,IAAI,IAAI;AACzC,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8BpB,MAAM,GAAGoB,IAAT;AAC9B,aAAOF,GAAG,MAAM,OAAOE,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACtB,IAAhC,GAAuCsB,IAA7C,CAAV;AACH,KAHiB,CAAlB;AAKA3G,IAAAA,WAAW,CAACwC,KAAZ,CAAkB8D,IAAlB,GAAyB,SAAzB;AACAtG,IAAAA,WAAW,CAACwC,KAAZ,CAAkB+D,GAAlB,GAAuB,SAAvB;AACAvG,IAAAA,WAAW,CAACqG,QAAZ,GAAuB,UAAvB;AACArG,IAAAA,WAAW,CAACwC,KAAZ,CAAkBiF,MAAlB,GAA2B,SAA3B;AACA,QAAInI,WAAW,IAAIX,QAAnB,EAA6B;AAC7B,QAAID,OAAO,KAAK,CAAhB,EAAmB;AAEnB,UAAMwJ,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,UAAMqG,UAAU,GAAGzK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA5B;AACAqG,IAAAA,UAAU,CAACL,IAAD,CAAV,CAAiBC,IAAjB,IAAyB,CAAzB;AACAI,IAAAA,UAAU,CAAC/E,QAAD,CAAV,CAAqBC,QAArB,IAAiCN,SAAjC;AACA7B,IAAAA,mBAAmB,CAACY,OAApB,GAA8BqG,UAA9B;AAGA,QAAIC,mBAAmB,GAAG,EAA1B;AAEAlH,IAAAA,mBAAmB,CAACY,OAApB,CAA4B2C,OAA5B,CAAoCxF,GAAG,IAAI;AACvCA,MAAAA,GAAG,CAACwF,OAAJ,CAAYiB,MAAM,IAAI0C,mBAAmB,CAACjJ,IAApB,CAAyBuG,MAAzB,CAAtB;AACH,KAFD;AAIA,QAAI2C,UAAJ;AAEAD,IAAAA,mBAAmB,CAAC3D,OAApB,CAA4B,CAACiB,MAAD,EAAS4C,QAAT,KAAsB;AAC9C,YAAMC,SAAS,GAAG7C,MAAM,IAAIA,MAAM,GAAG,CAAnB,GAAuB,CAAC,CAAxB,GAA4B,CAA9C;AAEA,YAAMnB,CAAC,GAAGhC,QAAQ,CAAC+F,QAAQ,GAAG,CAAZ,CAAlB;AACA,YAAM9D,CAAC,GAAGjC,QAAQ,CAAC+F,QAAQ,GAAG,CAAZ,CAAlB;AAEA,UAAI5C,MAAM,KAAKpG,WAAW,GAAG,CAAzB,IAA8B,CAAC2E,kBAAkB,CAACsE,SAAD,EAAYjJ,WAAZ,CAArD,EAA+E+I,UAAU,GAAGC,QAAb;AAClF,KAPD;AAUA,UAAME,KAAK,GAAGC,mBAAmB,CAACJ,UAAD,EAAa/I,WAAW,GAAG,CAA3B,CAAjC;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY2J,KAAZ,EAAmBtH,mBAAmB,CAACY,OAAvC;AAEA,QAAI4G,KAAK,GAAG,MAAZ;;AAEA,QAAIV,SAAS,KAAK3D,SAAd,IAA2B,CAACmE,KAAhC,EAAuC;AAEnC;AACA/G,MAAAA,UAAU,CAACkH,IAAX;AAEA,YAAMC,SAAS,GAAGxH,iBAAiB,CAACU,OAAlB,CAA0B2E,GAA1B,CAAlB;AACA,YAAMoC,WAAW,GAAGD,SAAS,IAAIA,SAAS,CAACE,aAAV,CAAwB,QAAxB,CAAjC;AACA,YAAMC,aAAa,GAAGF,WAAW,IAAIA,WAAW,CAACG,YAAZ,CAAyB,MAAzB,CAArC;AACA3J,MAAAA,SAAS,CAACyC,OAAV,GAAoB,IAApB;AACA,YAAMmH,SAAS,GAAGL,SAAS,IAAIA,SAAS,CAAC/B,UAAvB,IAAqC+B,SAAS,CAAC/B,UAAV,CAAqBd,SAArB,CAA+BC,QAA/B,CAAwC,gBAAxC,CAArC,GAAkG4C,SAAS,CAAC/B,UAAV,CAAqBqC,SAArB,CAA+B,IAA/B,CAAlG,GAAyI,IAA3J;AAEA,UAAIH,aAAa,IAAI,CAAC9E,kBAAkB,CAAClB,SAAD,EAAYgG,aAAZ,CAAxC,EAAoE,OAApE,KACK,IAAIA,aAAa,IAAI9E,kBAAkB,CAAClB,SAAD,EAAYgG,aAAZ,CAAnC,IAAkE,CAAChG,SAAS,KAAK,CAAd,IAAmBK,QAAQ,KAAK,CAAjC,MAAwCwF,SAAS,IAAI7F,SAAS,KAAK,CAAC,CAA5B,IAAiCK,QAAQ,KAAK,CAAtF,CAAtE,EAAiK;AAClK;AACA3B,QAAAA,UAAU,CAAC0H,KAAX;AACAxH,QAAAA,YAAY,CAACgH,IAAb;AACAD,QAAAA,KAAK,GAAG,MAAR;AACH;AAED,UAAIU,QAAQ,GAAGrG,SAAf,CAnBmC,CAsBnC;;AACA,UAAK6F,SAAS,IAAI7F,SAAS,KAAK,CAA3B,IAAgCK,QAAQ,KAAK,CAA9C,IAAqDwF,SAAS,IAAI7F,SAAS,KAAK,CAAC,CAA5B,IAAiCK,QAAQ,KAAK,CAAvG,EAA2G;AAIvG,cAAMiG,UAAU,GAAG,CAAC/L,WAAD,EAAcD,aAAd,EAA6BE,aAA7B,EAA4CE,YAA5C,CAAnB;AACA,cAAM6L,cAAc,GAAGD,UAAvB;AAEA,cAAM1D,QAAQ,GAAG2D,cAAc,CAAC1D,MAAf,IAAyB,CAAzB,GAA6B0D,cAAc,CAACC,GAAf,CAAmBtG,KAAK,IAAI;AACtE,8BACI;AACI,YAAA,SAAS,EAAG,uBAAsBF,SAAS,GAAG,CAAZ,GAAgB,CAAC,CAAjB,GAAqB,CAAE,IAAGA,SAAU,EAD1E;AAEI,YAAA,OAAO,EAAG0C,CAAD,IAAO+D,kBAAkB,CAACvG,KAAD,EAAQwD,GAAR,EAAa7G,MAAb,CAFtC;AAAA,mCAII,QAAC,eAAD;AACI,cAAA,IAAI,EAAEqD,KADV;AAEI,cAAA,SAAS,EAAG,cAAaF,SAAS,GAAG,CAAZ,GAAgB,cAAhB,GAAiC,cAAe,EAF7E;AAGI,cAAA,KAAK,EAAEA,SAAS,GAAG,CAAZ,GAAgB,MAAhB,GAAyB,MAHpC;AAII,cAAA,IAAI,EAAEA;AAJV;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAcH,SAf6C,CAA7B,GAeZ/C,WAfL;AAiBAe,QAAAA,gBAAgB,CAAC;AACb0F,UAAAA,GAAG,EAAEA,GADQ;AAEbd,UAAAA,QAAQ,EAAEA;AAFG,SAAD,CAAhB;AAKH,OA7BD,MA6BO;AACH5E,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,OAtDkC,CAwDnC;;;AACAL,MAAAA,YAAY,IAAIA,YAAY,CAAC+D,OAAb,CAAqBkC,IAAI,IAAI;AACzC,cAAMC,eAAe,GAAGD,IAAI,CAACE,UAA7B;;AACA,YAAID,eAAe,IAAI,CAACA,eAAe,CAACb,SAAhB,CAA0BC,QAA1B,CAAmC,gBAAnC,CAApB,IAA4E,CAACY,eAAe,CAACb,SAAhB,CAA0BC,QAA1B,CAAmC,qBAAnC,CAAjF,EAA4I;AACxIW,UAAAA,IAAI,CAACG,WAAL,CAAiBF,eAAjB;AACH,SAFD,MAGK,IAAIA,eAAJ,EAAqBA,eAAe,CAACC,UAAhB,CAA2Bd,SAA3B,CAAqCgB,MAArC,CAA4C,UAA5C;AAC7B,OANe,CAAhB,CAzDmC,CAiEnC;;AAEA,UAAIxB,MAAJ,EAAY;AACR,YAAIA,MAAM,CAACA,MAAP,KAAkB,GAAtB,EAA2B;AACvB,gBAAMkE,UAAU,GAAGrI,iBAAiB,CAACU,OAAlB,CAA0ByD,MAAM,CAACD,IAAjC,CAAnB;AACA,gBAAMoE,QAAQ,GAAGtI,iBAAiB,CAACU,OAAlB,CAA0B5B,UAAU,GAAG,CAAb,GAAiB,CAAjB,GAAqB,EAA/C,EAAmD2G,UAApE;AACA4C,UAAAA,UAAU,CAAClC,WAAX,CAAuBmC,QAAvB;AACH,SAJD,MAIO,IAAInE,MAAM,CAACA,MAAP,KAAkB,GAAtB,EAA2B;AAC9B,gBAAMkE,UAAU,GAAGrI,iBAAiB,CAACU,OAAlB,CAA0ByD,MAAM,CAACD,IAAjC,CAAnB;AACA,gBAAMoE,QAAQ,GAAGtI,iBAAiB,CAACU,OAAlB,CAA0B5B,UAAU,GAAG,CAAb,GAAiB,CAAjB,GAAqB,EAA/C,EAAmD2G,UAApE;AACA4C,UAAAA,UAAU,CAAClC,WAAX,CAAuBmC,QAAvB;AACH;AACJ;;AAED,UAAIxG,IAAI,CAACC,GAAL,CAASjD,UAAT,MAAyB,CAA7B,EAAgC;AAC5BoB,QAAAA,UAAU,CAACQ,OAAX,CAAmB5B,UAAnB,IAAiC,IAAjC;AAEH,OAHD,MAGO,IAAIA,UAAU,KAAK,CAAnB,EAAsB;AACzBqB,QAAAA,SAAS,CAACO,OAAV,CAAkB5B,UAAlB,EAA8BN,MAAM,KAAK,EAAX,GAAgB,MAAhB,GAAyBA,MAAM,KAAK,EAAX,GAAgB,OAAhB,GAA0B,IAAjF,IAAyF,IAAzF;AAEH,OAHM,MAGA,IAAIM,UAAU,KAAK,CAAC,CAApB,EAAuB;AAC1BqB,QAAAA,SAAS,CAACO,OAAV,CAAkB5B,UAAlB,EAA8BN,MAAM,KAAK,CAAX,GAAe,MAAf,GAAwBA,MAAM,KAAK,CAAX,GAAe,OAAf,GAAyB,IAA/E,IAAuF,IAAvF;AACH;;AAED,UAAI+J,iBAAiB,GAAGjM,SAAS,CAAC8C,eAAD,CAAjC;AAEAmJ,MAAAA,iBAAiB,CAAC7B,IAAD,CAAjB,CAAwBC,IAAxB,IAAgC,CAAhC;AACA4B,MAAAA,iBAAiB,CAACvG,QAAD,CAAjB,CAA4BC,QAA5B,IAAwCN,SAAxC,CA5FmC,CA8FnC;;AACA,UAAI6G,kBAAJ;AAAA,UAAwBC,QAAQ,GAAG,EAAnC;AAEAF,MAAAA,iBAAiB,CAAClF,OAAlB,CAA0BxF,GAAG,IAAI;AAC7BA,QAAAA,GAAG,CAACwF,OAAJ,CAAYiB,MAAM,IAAImE,QAAQ,CAAC1K,IAAT,CAAcuG,MAAd,CAAtB;AACH,OAFD;AAIAmE,MAAAA,QAAQ,CAACpF,OAAT,CAAiB,CAACiB,MAAD,EAAS4C,QAAT,KAAsB;AACnC,YAAI5C,MAAM,KAAK,CAACpG,WAAD,GAAe,CAA1B,IAA+B2E,kBAAkB,CAACyB,MAAD,EAASpG,WAAT,CAArD,EAA4EsK,kBAAkB,GAAGtB,QAArB;AAC/E,OAFD;AAIA,YAAMwB,iBAAiB,GAAGC,cAAc,CAAC,CAACzK,WAAD,GAAe,CAAhB,EAAmBqK,iBAAnB,CAAxC;AAEA,UAAIG,iBAAJ,EAAuBjJ,cAAc,CAAC,KAAD,CAAd;AAEvB,YAAMmJ,UAAU,GAAGC,QAAQ,CAAC3K,WAAD,EAAcqK,iBAAd,CAA3B;AACA/K,MAAAA,OAAO,CAACC,GAAR,CAAYmL,UAAZ;AACA,UAAIA,UAAJ,EAAgBnJ,cAAc,CAAC,KAAD,CAAd;AAEhB,YAAMqJ,UAAU,GAAG,IAAIpC,IAAvB;AACA,YAAMqC,UAAU,GAAG,IAAIpC,IAAvB;AACA,YAAMqC,YAAY,GAAGF,UAAU,GAAG,CAAb,GAAiBC,UAAtC;AAEA,YAAME,UAAU,GAAG,IAAIjH,QAAvB;AACA,YAAMkH,UAAU,GAAG,IAAIjH,QAAvB;AACA,YAAMkH,YAAY,GAAGF,UAAU,GAAG,CAAb,GAAiBC,UAAtC;AAEArJ,MAAAA,YAAY,CAACmJ,YAAY,GAAGG,YAAf,GAA8BxH,SAA/B,CAAZ;AACAvE,MAAAA,MAAM,CAACgM,IAAP,CAAY,YAAZ,EAA0BJ,YAA1B,EAAwCG,YAAxC,EAAsDxH,SAAtD,EAAiE2F,KAAjE;AAIAlJ,MAAAA,YAAY,CAACiL,OAAb,CAAqB,qBAArB,EAA4C,CAACnL,WAA7C;AACAC,MAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AAGAE,MAAAA,YAAY,CAACiL,OAAb,CAAqB,cAArB,EAAqCnK,IAAI,CAACoK,SAAL,CAAef,iBAAf,CAArC;AACAlJ,MAAAA,kBAAkB,CAACkJ,iBAAD,CAAlB,CAnImC,CAqInC;AAEH,KAvID,MAuIO,IAAI3B,SAAS,KAAK3D,SAAd,IAA2BmE,KAA/B,EAAsCtH,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AAEhD,GAlMD;;AAoMA,QAAMyC,aAAa,GAAG,CAAChF,QAAD,EAAW1C,KAAX,KAAqB;AAEvC,QAAI2H,SAAS,GAAG,EAAhB;AACAhM,IAAAA,OAAO,CAACC,GAAR,CAAYoE,KAAZ;AACAzC,IAAAA,eAAe,CAACiE,OAAhB,CAAwBxF,GAAG,IAAI;AAC3BA,MAAAA,GAAG,CAACwF,OAAJ,CAAYiB,MAAM,IAAIkF,SAAS,CAACzL,IAAV,CAAeuG,MAAf,CAAtB;AACH,KAFD;AAIA,UAAMmF,cAAc,GAAGD,SAAS,CAACrB,GAAV,CAAc,CAAC7D,MAAD,EAASe,GAAT,KAAiB;AAClD,UAAI,CAACxC,kBAAkB,CAACyB,MAAD,EAASzC,KAAT,CAAnB,IAAsCyC,MAAM,KAAK,CAArD,EAAwD,OAAOA,MAAP;AAC3D,KAFsB,CAAvB;AAIA,UAAMoF,SAAS,GAAGD,cAAc,CAACE,MAAf,CAAsBrF,MAAM,IAAIA,MAAM,KAAKrB,SAA3C,CAAlB;AAIA,UAAM2G,MAAM,GAAGrF,QAAQ,CAACoF,MAAT,CAAgB,CAAClF,OAAD,EAAUoF,UAAV,KAAyB;AACpD,UAAIC,KAAK,GAAG,CAAZ;AACAJ,MAAAA,SAAS,CAACrG,OAAV,CAAkBiB,MAAM,IAAI;AACxB,YAAIA,MAAM,GAAG,CAAT,KAAeuF,UAAnB,EAA+BC,KAAK;AACvC,OAFD;;AAMA,UAAIA,KAAK,GAAG,CAAR,IAAaD,UAAU,KAAK,CAAhC,EAAmC;AAC/BrM,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,eAAOgH,OAAP;AACH,OAHD,MAIK,IAAIqF,KAAK,GAAG,CAAR,IAAaD,UAAU,KAAK,CAAhC,EAAmC,OAAOpF,OAAP;AAC3C,KAbc,CAAf;AAeA,WAAOmF,MAAP;AACH,GAhCD;;AAkCA,QAAMxB,kBAAkB,GAAG,CAACvG,KAAD,EAAQwD,GAAR,EAAa7G,MAAb,KAAwB;AAE/C;AACA,UAAMuL,kBAAkB,GAAG7L,WAAW,GAAG8L,MAAM,CAACC,IAAP,CAAY7J,UAAZ,EAAwByG,IAAxB,CAA6BqD,GAAG,IAAI9J,UAAU,CAAC8J,GAAD,CAAV,KAAoBrI,KAAxD,CAAzC;AACA,UAAM4G,QAAQ,GAAGnM,SAAS,CAAC8C,eAAD,CAA1B;AACA,UAAM4C,QAAQ,GAAGb,QAAQ,CAACkE,GAAG,GAAG,CAAP,CAAzB;AACA,UAAMpD,QAAQ,GAAGoD,GAAG,GAAG,CAAvB;AACA,UAAMqB,IAAI,GAAGvF,QAAQ,CAAC3C,MAAM,GAAG,CAAV,CAArB;AACA,UAAMmI,IAAI,GAAGnI,MAAM,GAAG,CAAtB;AACA,UAAM0I,QAAQ,GAAGlF,QAAQ,GAAG,CAAX,GAAeC,QAAf,GAA0B,EAAGD,QAAQ,GAAG,CAAX,KAAiB,CAAjB,GAAqB,CAArB,GAAyB,CAA5B,CAA3C;AACAyG,IAAAA,QAAQ,CAACzG,QAAD,CAAR,CAAmBC,QAAnB,IAA+B8H,kBAA/B;AACAtB,IAAAA,QAAQ,CAAC/B,IAAD,CAAR,CAAeC,IAAf,IAAuB,CAAvB;AACAtH,IAAAA,kBAAkB,CAACoJ,QAAD,CAAlB;AAEA3I,IAAAA,mBAAmB,CAACY,OAApB,GAA8B+H,QAA9B;AAGA9I,IAAAA,gBAAgB,CAAC;AACb0F,MAAAA,GAAG,EAAEA,GADQ;AAEbxD,MAAAA,KAAK,EAAEkI,kBAFM;AAGbxF,MAAAA,QAAQ,EAAE;AAHG,KAAD,CAAhB;AAMAnG,IAAAA,YAAY,CAACiL,OAAb,CAAqB,cAArB,EAAqCnK,IAAI,CAACoK,SAAL,CAAeb,QAAf,CAArC;AACH,GAxBD;;AA0BA,QAAM5F,kBAAkB,GAAG,CAACsH,MAAD,EAASC,MAAT,KAAoB;AAC3C,QAAID,MAAM,GAAG,CAAT,IAAcC,MAAM,GAAG,CAA3B,EAA8B,OAAO,IAAP,CAA9B,KACK,IAAID,MAAM,GAAG,CAAT,IAAcC,MAAM,GAAG,CAA3B,EAA8B,OAAO,IAAP;AACnC,WAAO,KAAP;AACH,GAJD;;AAMA,QAAMC,UAAU,GAAG,CAACpD,UAAD,EAAaqD,KAAb,EAAoBC,eAAe,GAAG,KAAtC,KAAgD;AAE/D;AACA,QAAIf,SAAS,GAAG,EAAhB;AAEA1J,IAAAA,mBAAmB,CAACY,OAApB,CAA4B2C,OAA5B,CAAoCxF,GAAG,IAAI;AACvCA,MAAAA,GAAG,CAACwF,OAAJ,CAAYiB,MAAM,IAAI;AAClBkF,QAAAA,SAAS,CAACzL,IAAV,CAAeuG,MAAf;AACH,OAFD;AAGH,KAJD;AAMA,UAAMkG,oBAAoB,GAAGhB,SAAS,CAACrB,GAAV,CAAc,CAAC7D,MAAD,EAASe,GAAT,KAAiB;AACxD,UAAIxC,kBAAkB,CAACyH,KAAD,EAAQhG,MAAR,CAAtB,EAAuC,OAAO;AAC1C3C,QAAAA,SAAS,EAAE2C,MAD+B;AAE1C1C,QAAAA,MAAM,EAAEyD;AAFkC,OAAP;AAI1C,KAL4B,CAA7B;AAOA,UAAMoF,eAAe,GAAGD,oBAAoB,CAACb,MAArB,CAA4BrF,MAAM,IAAIA,MAAM,KAAKrB,SAAjD,CAAxB,CAlB+D,CAoB/D;;AAEA,UAAMmE,KAAK,GAAGqD,eAAe,CAACC,IAAhB,CAAqBpG,MAAM,IAAI;AAEzC,YAAMqG,kBAAkB,GAAGjJ,gBAAgB,CAAC4C,MAAM,CAAC3C,SAAR,EAAmB2C,MAAM,CAAC1C,MAA1B,EAAkC9B,mBAAmB,CAACY,OAAtD,CAA3C;AAEA,aAAOiK,kBAAkB,CAACD,IAAnB,CAAwB5E,UAAU,IAAI;AAEzC,eAAOA,UAAU,KAAKmB,UAAtB;AACH,OAHM,CAAP;AAIH,KARa,CAAd;AAUA,UAAMH,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AAEA,QAAI0G,KAAK,IAAI,CAACmD,eAAd,EAA+B5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AAE/BU,IAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AAEA,WAAOM,KAAP;AACH,GAvCD;;AAyCA,QAAMC,mBAAmB,GAAG,CAACJ,UAAD,EAAaqD,KAAb,EAAoBC,eAAe,GAAG,KAAtC,KAAgD;AAExE;AACA,UAAMvI,QAAQ,GAAGb,QAAQ,CAAC8F,UAAU,GAAG,CAAd,CAAzB;AACA,UAAMhF,QAAQ,GAAGgF,UAAU,GAAG,CAA9B;AACA,UAAMtF,SAAS,GAAG2I,KAAK,GAAI,CAAC,CAA5B;AAEA,QAAIlD,KAAK,GAAG,KAAZ;AAEA,UAAMwD,mBAAmB,GAAG,CACxB,CAAC5I,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CADwB,EAExB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAf,CAFwB,EAGxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CAHwB,EAIxB,CAACD,QAAD,EAAWC,QAAQ,GAAG,CAAtB,CAJwB,EAKxB,CAACD,QAAD,EAAWC,QAAQ,GAAG,CAAtB,CALwB,EAMxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CANwB,EAOxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAf,CAPwB,EAQxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CARwB,CAA5B;AAWAzE,IAAAA,OAAO,CAACC,GAAR,CAAYqC,mBAAmB,CAACY,OAAhC,EAAyCiB,SAAzC;AAEAiJ,IAAAA,mBAAmB,CAACvH,OAApB,CAA4BkC,IAAI,IAAI;AAChC,YAAMjB,MAAM,GAAGxE,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,KACAzF,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,EAAqCA,IAAI,CAAC,CAAD,CAAzC,CADA,IAEAzF,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,EAAqCA,IAAI,CAAC,CAAD,CAAzC,CAFf;;AAIA,UAAIjB,MAAM,KAAK,CAACgG,KAAZ,IAAqBhG,MAAM,KAAK,IAApC,EAA0C;AACtC,cAAMwC,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,YAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,QAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACAM,QAAAA,KAAK,GAAG,IAAR;AACH;AACJ,KAXD,EAtBwE,CAmCxE;;AAEA,UAAMyD,mBAAmB,GAAG,CACxB,CAAC7I,QAAQ,GAAIL,SAAS,GAAGpE,QAAzB,EAAoC0E,QAAQ,GAAIN,SAAS,GAAGpE,QAA5D,CADwB,EAExB,CAACyE,QAAQ,GAAIL,SAAS,GAAGpE,QAAzB,EAAoC0E,QAAQ,GAAIN,SAAS,GAAGpE,QAA5D,CAFwB,CAA5B;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAYoN,mBAAZ;AAEAA,IAAAA,mBAAmB,CAACxH,OAApB,CAA4BkC,IAAI,IAAI;AAChC,YAAMjB,MAAM,GAAGxE,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,KACAzF,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,EAAqCA,IAAI,CAAC,CAAD,CAAzC,CADA,IAEAzF,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,EAAqCA,IAAI,CAAC,CAAD,CAAzC,CAFf;;AAIA,UAAIjB,MAAM,KAAK3C,SAAf,EAA0B;AACtB,cAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,YAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,QAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACAtJ,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA2J,QAAAA,KAAK,GAAG,IAAR;AACH;AACJ,KAZD,EA5CwE,CA0DxE;;AAEA,QAAIpF,QAAQ,GAAG,CAAf,EAAkB;AACd,WAAK,IAAIpE,CAAC,GAAGoE,QAAQ,GAAG,CAAxB,EAA2BpE,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,cAAMkN,SAAS,GAAKhL,mBAAmB,CAACY,OAApB,CAA4B9C,CAA5B,KACAkC,mBAAmB,CAACY,OAApB,CAA4B9C,CAA5B,EAA+BqE,QAA/B,CADA,IAEAnC,mBAAmB,CAACY,OAApB,CAA4B9C,CAA5B,EAA+BqE,QAA/B,CAFpB;;AAIA,YAAI6I,SAAS,KAAK,IAAInJ,SAAlB,IAA+BmJ,SAAS,KAAK,IAAInJ,SAArD,EAAgE;AAC5D,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,cAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAIgE,SAAS,KAAK,CAAlB,EAAqB;AAC7B;AACJ;;AAED,QAAI9I,QAAQ,GAAGlF,IAAI,GAAG,CAAtB,EAAyB;AACrB,WAAK,IAAIc,CAAC,GAAGoE,QAAQ,GAAG,CAAxB,EAA2BpE,CAAC,GAAGd,IAA/B,EAAqCc,CAAC,EAAtC,EAA0C;AACtC,cAAMkN,SAAS,GAAKhL,mBAAmB,CAACY,OAApB,CAA4B9C,CAA5B,KACAkC,mBAAmB,CAACY,OAApB,CAA4B9C,CAA5B,EAA+BqE,QAA/B,CADA,IAEAnC,mBAAmB,CAACY,OAApB,CAA4B9C,CAA5B,EAA+BqE,QAA/B,CAFpB;AAIAzE,QAAAA,OAAO,CAACC,GAAR,CAAYqN,SAAZ,EAAuBnJ,SAAvB,EAAkC7B,mBAAmB,CAACY,OAAtD;;AAEA,YAAIoK,SAAS,KAAK,IAAInJ,SAAlB,IAA+BmJ,SAAS,GAAGnJ,SAAZ,KAA0B,CAA7D,EAAgE;AAC5D,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;;AACA,cAAI,CAAC6J,eAAL,EAAsB;AAClB,kBAAMQ,SAAS,GAAGpC,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAhC;AACA5B,YAAAA,OAAO,CAACC,GAAR,CAAYsN,SAAZ;AACH;;AACDvN,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAqC,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SATD,MAUK,IAAIgE,SAAS,KAAK,CAAlB,EAAqB;AAC7B;AACJ,KAhGuE,CAkGxE;;;AAEA,QAAI7I,QAAQ,GAAG,CAAf,EAAkB;AACd,WAAK,IAAIrE,CAAC,GAAGqE,QAAQ,GAAG,CAAxB,EAA2BrE,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,cAAMoN,YAAY,GAAGlL,mBAAmB,CAACY,OAApB,CAA4BsB,QAA5B,KACAlC,mBAAmB,CAACY,OAApB,CAA4BsB,QAA5B,EAAsCpE,CAAtC,CADA,IAEAkC,mBAAmB,CAACY,OAApB,CAA4BsB,QAA5B,EAAsCpE,CAAtC,CAFrB;;AAIA,YAAIoN,YAAY,KAAK,IAAIrJ,SAArB,IAAkCqJ,YAAY,KAAK,IAAIrJ,SAA3D,EAAsE;AAClE,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,cAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAIkE,YAAY,KAAK,CAArB,EAAwB;AAChC;AACJ;;AAED,QAAI/I,QAAQ,GAAGlF,OAAO,GAAG,CAAzB,EAA4B;AACxB,WAAK,IAAIa,CAAC,GAAGoE,QAAQ,GAAG,CAAxB,EAA2BpE,CAAC,GAAGb,OAA/B,EAAwCa,CAAC,EAAzC,EAA6C;AACzC,cAAMoN,YAAY,GAAGlL,mBAAmB,CAACY,OAApB,CAA4BsB,QAA5B,KACAlC,mBAAmB,CAACY,OAApB,CAA4BsB,QAA5B,EAAsCpE,CAAtC,CADA,IAEAkC,mBAAmB,CAACY,OAApB,CAA4BsB,QAA5B,EAAsCpE,CAAtC,CAFrB;;AAIA,YAAIoN,YAAY,KAAK,IAAIrJ,SAArB,IAAkCqJ,YAAY,KAAK,IAAIrJ,SAA3D,EAAsE;AAClE,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,cAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAIkE,YAAY,KAAK,CAArB,EAAwB;AAChC;AACJ,KAlIuE,CAoIxE;;;AAEA,QAAIhJ,QAAQ,GAAG,CAAX,IAAgBC,QAAQ,GAAG,CAA/B,EAAkC;AAC9B,WAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,cAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,cAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,cAAM0G,MAAM,GAAGxE,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,KACAhD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CADA,IAEAjD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CAFf;AAIA,YAAIuB,MAAM,IAAI,IAAd,EAAoB;;AAEpB,YAAIA,MAAM,KAAK,IAAI3C,SAAf,IAA4B2C,MAAM,KAAK,IAAI3C,SAA/C,EAA0D;AACtD,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,cAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAIxC,MAAM,KAAK,CAAf,EAAkB;AAC1B;AACJ,KAxJuE,CA0JxE;;;AAEA,QAAItC,QAAQ,GAAG,CAAX,IAAgBC,QAAQ,GAAGlF,OAAO,GAAG,CAAzC,EAA4C;AACxC,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,cAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,cAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,cAAM0G,MAAM,GAAGxE,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,KACAhD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CADA,IAEAjD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CAFf;AAGA,YAAIuB,MAAM,IAAI,IAAd,EAAoB;;AAEpB,YAAIA,MAAM,KAAK,IAAI3C,SAAf,IAA4B2C,MAAM,KAAK,IAAI3C,SAA/C,EAA0D;AACtD,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,cAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAIxC,MAAM,KAAK,CAAf,EAAkB;AAC1B;AACJ,KA7KuE,CA+KxE;;;AAEA,QAAItC,QAAQ,GAAGlF,IAAI,GAAG,CAAlB,IAAuBmF,QAAQ,GAAG,CAAtC,EAAyC;AACrC,WAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,cAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,cAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,cAAM0G,MAAM,GAAGxE,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,KACAhD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CADA,IAEAjD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CAFf;AAGA,YAAIuB,MAAM,IAAI,IAAd,EAAoB;;AAEpB,YAAIA,MAAM,KAAK,IAAI3C,SAAf,IAA4B2C,MAAM,KAAK,IAAI3C,SAA/C,EAA0D;AACtD,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,cAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAIxC,MAAM,KAAK,CAAf,EAAkB;AAC1B;AACJ,KAlMuE,CAoMxE;;;AAEA,QAAItC,QAAQ,GAAGlF,IAAI,GAAG,CAAlB,IAAuBmF,QAAQ,GAAGlF,OAAO,GAAG,CAAhD,EAAmD;AAC/C,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,cAAMkF,IAAI,GAAGd,QAAQ,GAAGpE,CAAxB;AACA,cAAMmF,IAAI,GAAGd,QAAQ,GAAGrE,CAAxB;AACA,cAAM0G,MAAM,GAAGxE,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,KACAhD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CADA,IAEAjD,mBAAmB,CAACY,OAApB,CAA4BoC,IAA5B,EAAkCC,IAAlC,CAFf;AAGA,YAAIuB,MAAM,IAAI,IAAd,EAAoB;;AAEpB,YAAIA,MAAM,KAAK,IAAI3C,SAAf,IAA4B2C,MAAM,KAAK,IAAI3C,SAA/C,EAA0D;AACtD,gBAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,cAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,UAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAIxC,MAAM,KAAK,CAAf,EAAkB;AAC1B;AACJ,KAvNuE,CAyNxE;;;AAEA,UAAM2G,mBAAmB,GAAG,CACxB,CAACjJ,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CADwB,EAExB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CAFwB,EAGxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CAHwB,EAIxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CAJwB,EAKxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CALwB,EAMxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CANwB,EAOxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CAPwB,EAQxB,CAACD,QAAQ,GAAG,CAAZ,EAAeC,QAAQ,GAAG,CAA1B,CARwB,CAA5B;AAaAgJ,IAAAA,mBAAmB,CAAC5H,OAApB,CAA4BkC,IAAI,IAAI;AAChC,YAAMjB,MAAM,GAAGxE,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,KACAzF,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,EAAqCA,IAAI,CAAC,CAAD,CAAzC,CADA,IAEAzF,mBAAmB,CAACY,OAApB,CAA4B6E,IAAI,CAAC,CAAD,CAAhC,EAAqCA,IAAI,CAAC,CAAD,CAAzC,CAFf;;AAIA,UAAIjB,MAAM,KAAK3C,SAAS,GAAG,CAA3B,EAA8B;AAC1B,cAAMmF,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AACA,YAAI,CAAC6J,eAAL,EAAsB5B,cAAc,CAAC2B,KAAD,EAAQlL,eAAR,CAAd;AACtBU,QAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACAM,QAAAA,KAAK,GAAG,IAAR;AACH;AACJ,KAXD;AAaA,WAAOA,KAAP;AACH,GAtPD,CAnhCwF,CA2wCxF;;;AAEA,QAAMuB,cAAc,GAAG,CAAC2B,KAAD,EAAQ3M,KAAR,KAAkB;AAErCH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAMuN,aAAa,GAAGvN,KAAtB;AACA,QAAI6L,SAAS,GAAG,EAAhB;AAEA7L,IAAAA,KAAK,CAAC0F,OAAN,CAAcxF,GAAG,IAAI;AACjBA,MAAAA,GAAG,CAACwF,OAAJ,CAAYiB,MAAM,IAAIkF,SAAS,CAACzL,IAAV,CAAeuG,MAAf,CAAtB;AACH,KAFD;AAIA,UAAMmF,cAAc,GAAGD,SAAS,CAACrB,GAAV,CAAc,CAAC7D,MAAD,EAASe,GAAT,KAAiB;AAClD,UAAI,CAACxC,kBAAkB,CAACyB,MAAD,EAASgG,KAAT,CAAnB,IAAsChG,MAAM,KAAK,CAArD,EAAwD,OAAO;AAC3D3C,QAAAA,SAAS,EAAE2C,MADgD;AAE3D1C,QAAAA,MAAM,EAAEyD;AAFmD,OAAP;AAI3D,KALsB,CAAvB;AAOA,UAAMqE,SAAS,GAAGD,cAAc,CAACE,MAAf,CAAsBrF,MAAM,IAAIA,MAAM,KAAKrB,SAA3C,CAAlB;AACAzF,IAAAA,OAAO,CAACC,GAAR,CAAYiM,SAAZ;AACA,QAAIqB,SAAS,GAAG,IAAhB;AAEA,UAAMjE,QAAQ,GAAGxK,SAAS,CAACwD,mBAAmB,CAACY,OAArB,CAA1B;AAEAgJ,IAAAA,SAAS,CAACrG,OAAV,CAAkBiB,MAAM,IAAI;AAExB;AACA,YAAM6G,sBAAsB,GAAGzJ,gBAAgB,CAAC4C,MAAM,CAAC3C,SAAR,EAAmB2C,MAAM,CAAC1C,MAA1B,EAAkC9B,mBAAmB,CAACY,OAAtD,CAA/C;AACAlD,MAAAA,OAAO,CAACC,GAAR,CAAY0N,sBAAZ;AAEAA,MAAAA,sBAAsB,CAAC9H,OAAvB,CAA+BkC,IAAI,IAAI;AACnC,cAAM6F,KAAK,GAAGjK,QAAQ,CAACmD,MAAM,CAAC1C,MAAP,GAAgB,CAAjB,CAAtB;AACA,cAAMyJ,KAAK,GAAG/G,MAAM,CAAC1C,MAAP,GAAgB,CAA9B;AACA,cAAMkB,IAAI,GAAG3B,QAAQ,CAACoE,IAAI,GAAG,CAAR,CAArB;AACA,cAAMxC,IAAI,GAAGwC,IAAI,GAAG,CAApB;AACA,cAAMkD,QAAQ,GAAGnM,SAAS,CAAC4O,aAAD,CAA1B;AAEAzC,QAAAA,QAAQ,CAAC2C,KAAD,CAAR,CAAgBC,KAAhB,IAAyB,CAAzB;;AAEA,YAAI5C,QAAQ,IAAIA,QAAQ,CAAC3F,IAAD,CAApB,IAA8B2F,QAAQ,CAAC3F,IAAD,CAAR,CAAeC,IAAf,CAAlC,EAAwD;AACpD,cAAI0F,QAAQ,CAAC3F,IAAD,CAAR,CAAeC,IAAf,MAAyB,CAA7B,EAAgC;AAC5B,kBAAMuI,gBAAgB,GAAG7C,QAAQ,CAAC3F,IAAD,CAAR,CAAeC,IAAf,CAAzB;AACA,gBAAIF,kBAAkB,CAACyI,gBAAD,EAAmBhH,MAAM,CAAC3C,SAA1B,CAAtB,EAA4D8G,QAAQ,CAAC3F,IAAD,CAAR,CAAeC,IAAf,IAAuBuB,MAAM,CAAC3C,SAA9B;AAC/D,WAHD,MAGO8G,QAAQ,CAAC3F,IAAD,CAAR,CAAeC,IAAf,IAAuBuB,MAAM,CAAC3C,SAA9B;AACV;;AAGD7B,QAAAA,mBAAmB,CAACY,OAApB,GAA8BpE,SAAS,CAACmM,QAAD,CAAvC;AAEA,YAAI8C,aAAa,GAAG,EAApB;AAEAzL,QAAAA,mBAAmB,CAACY,OAApB,CAA4B2C,OAA5B,CAAoCxF,GAAG,IAAI;AACvCA,UAAAA,GAAG,CAACwF,OAAJ,CAAYiB,MAAM,IAAIiH,aAAa,CAACxN,IAAd,CAAmBuG,MAAnB,CAAtB;AACH,SAFD;AAMA9G,QAAAA,OAAO,CAACC,GAAR,CAAYgL,QAAZ,EAAsB6B,KAAtB;AAEA9M,QAAAA,OAAO,CAACC,GAAR,CAAY8N,aAAZ;AAEA,YAAItE,UAAU,GAAG,CAAC,CAAlB;AAEAsE,QAAAA,aAAa,CAAClI,OAAd,CAAsB,CAACiB,MAAD,EAASe,GAAT,KAAiB;AACnC,cAAIf,MAAM,KAAKgG,KAAf,EAAsBrD,UAAU,GAAG5B,GAAb;AACzB,SAFD;AAKA7H,QAAAA,OAAO,CAACC,GAAR,CAAYwJ,UAAZ;AAEA,cAAMuE,aAAa,GAAGnE,mBAAmB,CAACJ,UAAD,EAAaqD,KAAb,EAAoB,IAApB,CAAzC;AACA9M,QAAAA,OAAO,CAACC,GAAR,CAAY+N,aAAZ,EAA2BvE,UAA3B,EAAuCqD,KAAvC;AACA,YAAI,CAACkB,aAAL,EAAoBT,SAAS,GAAG,KAAZ;AAEvB,OA5CD;AA6CH,KAnDD;AAsDAjL,IAAAA,mBAAmB,CAACY,OAApB,GAA8BoG,QAA9B;AACD,QAAIiE,SAAJ,EAAetL,cAAc,CAAC,KAAD,CAAd;AACf,WAAOsL,SAAP;AAEF,GAjFD;;AAmFA,QAAMlC,QAAQ,GAAG,CAAClH,SAAD,EAAYhE,KAAZ,KAAsB;AACnC,QAAI6L,SAAS,GAAG,EAAhB;AAEA7L,IAAAA,KAAK,CAAC0F,OAAN,CAAcxF,GAAG,IAAI;AACjBA,MAAAA,GAAG,CAACwF,OAAJ,CAAYiB,MAAM,IAAIkF,SAAS,CAACzL,IAAV,CAAeuG,MAAf,CAAtB;AACH,KAFD;AAIA,UAAMkG,oBAAoB,GAAGhB,SAAS,CAACrB,GAAV,CAAc,CAAC7D,MAAD,EAAS1C,MAAT,KAAoB;AAC3D,UAAIiB,kBAAkB,CAAClB,SAAD,EAAY2C,MAAZ,CAAtB,EAA2C,OAAO;AAC9C3C,QAAAA,SAAS,EAAE2C,MADmC;AAE9C1C,QAAAA,MAAM,EAAEA;AAFsC,OAAP;AAI9C,KAL4B,CAA7B;AAOA,UAAM6I,eAAe,GAAGD,oBAAoB,CAACb,MAArB,CAA4BrF,MAAM,IAAIA,MAAM,KAAKrB,SAAjD,CAAxB;AAEA,WAAOwH,eAAe,CAACgB,KAAhB,CAAsBnH,MAAM,IAAI;AACnC,YAAMoH,gBAAgB,GAAGhK,gBAAgB,CAAC4C,MAAM,CAAC3C,SAAR,EAAmB2C,MAAM,CAAC1C,MAA1B,EAAkCjE,KAAlC,CAAzC;AAEA,aAAO+N,gBAAgB,CAAClH,MAAjB,KAA4B,CAAnC;AACH,KAJM,CAAP;AAKH,GArBD;;AAwBA,QAAMmH,UAAU,GAAG,MAAM;AACrB,QAAIC,gBAAgB,GAAG,EAAvB;AAEA,UAAMjO,KAAK,GAAGyB,eAAe,CAAC+I,GAAhB,CAAoB,CAACtK,GAAD,EAAMgO,MAAN,KAAiB;AAG/C,YAAMC,IAAI,GAAGjO,GAAG,CAACsK,GAAJ,CAAQ,CAAC7D,MAAD,EAASyH,SAAT,KAAuB;AACxC,cAAM7E,QAAQ,GAAG2E,MAAM,GAAG,CAAT,GAAaE,SAAb,IAA0BF,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,CAAnB,GAAuB,CAAjD,CAAjB;AACA,cAAMG,OAAO,GAAGH,MAAM,GAAG,CAAT,GAAaE,SAA7B;;AAEA,cAAME,eAAe,gBACjB;AAAK,UAAA,SAAS,EAAG,UAAS/E,QAAQ,GAAG,CAAX,KAAiB,CAAjB,GAAqB,MAArB,GAA8B,EAAG,EAA3D;AAA8E,UAAA,GAAG,EAAEgF,GAAG,IAAI;AACtFlM,YAAAA,iBAAiB,CAACU,OAAlB,CAA0BsL,OAA1B,IAAqCE,GAArC;AACH,WAFD;AAAA,oBAGK5H,MAAM,KAAK,CAAX,IAAgB,CAAA5E,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAE2F,GAAf,MAAuB2G,OAAvC,GACGtM,aAAa,CAAC6E,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,gBAAqC;AACjC,YAAA,SAAS,EAAG,qBAAoBF,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAAE,IAAGA,MAAO,EAD7B;AAAA,sBAIhC5E,aAAa,CAAC6E;AAJkB,aAE5B2C,QAF4B;AAAA;AAAA;AAAA;AAAA,kBAArC,gBAOI;AACI,YAAA,SAAS,EAAG,kBAAiBxH,aAAa,CAACmC,KAAd,GAAsB,CAAtB,GAA0B,CAAC,CAA3B,GAA+B,CAAE,IAAGnC,aAAa,CAACmC,KAAM,EADzF;AAEI,YAAA,WAAW,EAAEwC,CAAC,IAAID,SAAS,CAACC,CAAD,EAAI3E,aAAa,CAACmC,KAAlB,EAAyBqF,QAAzB,CAF/B;AAGI,YAAA,WAAW,EAAE7C,CAAC,IAAI+B,SAAS,CAAC/B,CAAD,CAH/B;AAII,YAAA,SAAS,EAAEA,CAAC,IAAIoC,SAAS,CAACpC,CAAD,EAAI3E,aAAa,CAACmC,KAAlB,CAJ7B;AAAA,mCAOI,QAAC,eAAD;AACI,cAAA,IAAI,EAAEzB,UAAU,CAAC0B,IAAI,CAACC,GAAL,CAASrC,aAAa,CAACmC,KAAvB,EAA8BsK,QAA9B,EAAD,CADpB;AAEI,cAAA,SAAS,EAAG,SAAQzM,aAAa,CAACmC,KAAd,GAAsB,CAAtB,GAA0B,cAA1B,GAA2C,cAAe,EAFlF;AAGI,cAAA,KAAK,EAAEnC,aAAa,CAACmC,KAAd,GAAsB,CAAtB,GAA0B,MAA1B,GAAmC,SAH9C;AAII,cAAA,IAAI,EAAEnC,aAAa,CAACmC;AAJxB;AAAA;AAAA;AAAA;AAAA;AAPJ,aAKSqF,QALT;AAAA;AAAA;AAAA;AAAA,kBARP,GAuBG5C,MAAM,KAAK,CAAX,gBACA;AACI,YAAA,SAAS,EAAG,kBAAiBA,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAAE,IAAGA,MAAO,EAD/D;AAEI,YAAA,WAAW,EAAED,CAAC,IAAID,SAAS,CAACC,CAAD,EAAIC,MAAJ,EAAY4C,QAAZ,CAF/B;AAGI,YAAA,WAAW,EAAE7C,CAAC,IAAI+B,SAAS,CAAC/B,CAAD,CAH/B;AAII,YAAA,SAAS,EAAEA,CAAC,IAAIoC,SAAS,CAACpC,CAAD,EAAIC,MAAJ,CAJ7B;AAAA,mCAOI,QAAC,eAAD;AACI,cAAA,IAAI,EAAElE,UAAU,CAAC0B,IAAI,CAACC,GAAL,CAASuC,MAAT,EAAiB6H,QAAjB,EAAD,CADpB;AAEI,cAAA,SAAS,EAAG,SAAQ7H,MAAM,GAAG,CAAT,GAAa,cAAb,GAA8B,cAAe,EAFrE;AAGI,cAAA,KAAK,EAAEA,MAAM,GAAG,CAAT,GAAa,MAAb,GAAsB,SAHjC;AAII,cAAA,IAAI,EAAEA;AAJV;AAAA;AAAA;AAAA;AAAA;AAPJ,aAKS4C,QALT;AAAA;AAAA;AAAA;AAAA,kBADA,GAeA;AAzCR,WAAmE6E,SAAnE;AAAA;AAAA;AAAA;AAAA,gBADJ;;AA6CA,eAAOE,eAAP;AACH,OAlDY,CAAb;AAmDA,0BACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAkC,QAAA,KAAK,EAAE;AAAC1K,UAAAA,MAAM,EAAG,GAAE,MAAMuK,IAAI,CAACtH,MAAO;AAA9B,SAAzC;AAAA,kBACKsH;AADL,SAA0BD,MAA1B;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KA3Da,CAAd;AA6DA9L,IAAAA,cAAc,CAACW,OAAf,GAAyBkL,gBAAzB;AAEA,WAAOjO,KAAP;AACH,GAnED;;AAsEA9B,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,MAAM,CAACgP,EAAP,CAAU,YAAV,EAAwB,CAAC5N,MAAD,EAAS6N,MAAT,EAAiB1K,SAAjB,EAA4B2F,KAA5B,KAAsC;AAC1D,YAAMgF,oBAAoB,GAAGtM,iBAAiB,CAACU,OAAlB,CAA0BlC,MAA1B,EAAkCiH,UAA/D;AACAjI,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B2B,eAA1B,EAA2CQ,SAA3C;AACA,YAAM2I,iBAAiB,GAAGjM,SAAS,CAAC8C,eAAD,CAAnC;AACA,YAAMmN,UAAU,GAAGpL,QAAQ,CAAC3C,MAAM,GAAG,CAAV,CAA3B;AACA,YAAMgO,UAAU,GAAGhO,MAAM,GAAG,CAA5B;AACA+J,MAAAA,iBAAiB,CAACgE,UAAD,CAAjB,CAA8BC,UAA9B,IAA4C,CAA5C;AACA,YAAMC,UAAU,GAAGtL,QAAQ,CAACkL,MAAM,GAAG,CAAV,CAA3B;AACA,YAAMK,UAAU,GAAGL,MAAM,GAAG,CAA5B;AACA9D,MAAAA,iBAAiB,CAACkE,UAAD,CAAjB,CAA8BC,UAA9B,IAA4C/K,SAA5C;AAEAtB,MAAAA,UAAU,CAAC0H,KAAX;AACAxH,MAAAA,YAAY,CAACwH,KAAb;AACA1H,MAAAA,UAAU,CAACsM,WAAX,GAAyB,CAAzB;AACApM,MAAAA,YAAY,CAACoM,WAAb,GAA2B,CAA3B;AACAL,MAAAA,oBAAoB,CAAC3H,SAArB,CAA+BuB,GAA/B,CAAmC,UAAnC;AACAoG,MAAAA,oBAAoB,CAAClL,KAArB,CAA2BwL,WAA3B,CAAuC,gBAAvC,EAA0D,GAAE,CAACF,UAAU,GAAGF,UAAd,IAA4B,GAAI,IAA5F;AACAF,MAAAA,oBAAoB,CAAClL,KAArB,CAA2BwL,WAA3B,CAAuC,eAAvC,EAAyD,GAAE,CAACH,UAAU,GAAGF,UAAd,IAA4B,GAAI,IAA3F;AACAD,MAAAA,oBAAoB,CAAC3H,SAArB,CAA+BuB,GAA/B,CAAmC,cAAnC;AAEApG,MAAAA,mBAAmB,CAACY,OAApB,GAA8BpE,SAAS,CAACiM,iBAAD,CAAvC;AAGA+D,MAAAA,oBAAoB,CAACO,gBAArB,CAAsC,eAAtC,EAAuD,MAAM;AACzD,YAAIvF,KAAK,KAAK,MAAd,EAAsBjH,UAAU,CAACkH,IAAX,GAAtB,KACKhH,YAAY,CAACgH,IAAb;AACL+E,QAAAA,oBAAoB,CAAClL,KAArB,CAA2BiF,MAA3B,GAAoC,SAApC;AACAiG,QAAAA,oBAAoB,CAAClL,KAArB,CAA2B6D,QAA3B,GAAsC,SAAtC;AACAqH,QAAAA,oBAAoB,CAAClL,KAArB,CAA2B8D,IAA3B,GAAmC,SAAnC;AACAoH,QAAAA,oBAAoB,CAAClL,KAArB,CAA2B+D,GAA3B,GAAkC,SAAlC;AACAmH,QAAAA,oBAAoB,CAAClL,KAArB,CAA2B0L,SAA3B,GAAuC,SAAvC;AACA1O,QAAAA,YAAY,CAACiL,OAAb,CAAqB,qBAArB,EAA4C,CAACnL,WAA7C;AACAC,QAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACAE,QAAAA,YAAY,CAACiL,OAAb,CAAqB,cAArB,EAAqCnK,IAAI,CAACoK,SAAL,CAAef,iBAAf,CAArC;AACAlJ,QAAAA,kBAAkB,CAACkJ,iBAAD,CAAlB;AACH,OAZD;AAaH,KApCD;AAsCH,GAvCQ,EAuCN,CAAC3I,SAAD,CAvCM,CAAT;AAyCA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,KAAK,EAAE;AAACyB,MAAAA,KAAK,EAAG,GAAE3E,MAAO,IAAlB;AAAuB6E,MAAAA,MAAM,EAAG,GAAE7E,MAAO;AAAzC,KAA9B;AAA6E,IAAA,GAAG,EAAEsB,QAAlF;AAAA,eACK2N,UAAU,EADf,eAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAt/CuB3O,W;;KAAAA,W;AAs/CvB","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\nimport OnlineSocket from \"./OnlineSocket\";\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function OnlineBoard({ color, prevButtons, random, socket, oppId, players }) {\r\n\r\n    const setColor = color;\r\n    console.log(players);\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"online-current-move\") === null ? 1 : localStorage.getItem(\"online-current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"online-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"online-board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n   \r\n    const [sendPiece, setSendPiece] = useState(null);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n           \r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n               \r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                       \r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                      \r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                   \r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            \r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n     \r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        \r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n      \r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n               \r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                       \r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n       \r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        \r\n        \r\n        setActivePiece(null);\r\n       \r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        if (currentMove != setColor) return;\r\n        if (players !== 2) return;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n      \r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n\r\n        const check = checkCheckOptimised(kingSquare, currentMove * 6);\r\n        console.log(check, previewVirtualBoard.current);\r\n\r\n        let sound = \"move\";\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n         \r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n                sound = \"take\";\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0) || (squareDOM && pieceCode === -1 && currentX === 7)) {\r\n                \r\n               \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n              \r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n            } else { \r\n                setPawnTransform(null);\r\n            }\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            // Checking if it's rocade\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                \r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n              \r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n            \r\n            const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n         \r\n            if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            \r\n            const mirrorOldX = 7 - oldX;\r\n            const mirrorOldY = 7 - oldY;\r\n            const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\r\n           \r\n            const mirrorNewX = 7 - currentX;\r\n            const mirrorNewY = 7 - currentY;\r\n            const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\r\n            \r\n            setSendPiece(mirrorOldIdx + mirrorNewIdx + pieceCode);\r\n            socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode, sound);\r\n            \r\n            \r\n\r\n            localStorage.setItem(\"online-current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n\r\n\r\n            localStorage.setItem(\"online-board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n      \r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n           \r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        \r\n        previewVirtualBoard.current = newBoard;\r\n    \r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"online-board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n         \r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n          \r\n            return possibleMovesCheck.some(currSquare => {\r\n               \r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n        const pieceCode = kCode / (-6);\r\n\r\n        let check = false;\r\n\r\n        const kingPossibleSquares = [\r\n            [currentX - 1, currentY - 1],\r\n            [currentX - 1, currentY],\r\n            [currentX - 1, currentY + 1],\r\n            [currentX, currentY - 1],\r\n            [currentX, currentY + 1],\r\n            [currentX + 1, currentY - 1],\r\n            [currentX + 1, currentY],\r\n            [currentX + 1, currentY + 1]\r\n        ];\r\n\r\n        console.log(previewVirtualBoard.current, pieceCode);\r\n\r\n        kingPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === -kCode && square !== null) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        // Pawns \r\n\r\n        const pawnPossibleSquares = [\r\n            [currentX + (pieceCode * setColor), currentY - (pieceCode * setColor)],\r\n            [currentX + (pieceCode * setColor), currentY + (pieceCode * setColor)]\r\n        ];\r\n        \r\n        console.log(pawnPossibleSquares);\r\n\r\n        pawnPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                console.log('check');\r\n                check = true;\r\n            }\r\n        });\r\n        \r\n        // Rows\r\n\r\n        if (currentX > 0) {\r\n            for (let i = currentX - 1; i >= 0; i--) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentX < ROWS - 1) {\r\n            for (let i = currentX + 1; i < ROWS; i++) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n\r\n                console.log(rowSquare, pieceCode, previewVirtualBoard.current);\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) {\r\n                        const checkMate = checkCheckmate(kCode, newVirtualBoard);\r\n                        console.log(checkMate);\r\n                    }\r\n                    console.log(\"here in if\")\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Columns \r\n\r\n        if (currentY > 0) {\r\n            for (let i = currentY - 1; i >= 0; i--) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentY < COLUMNS - 1) {\r\n            for (let i = currentX + 1; i < COLUMNS; i++) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top left\r\n        \r\n        if (currentX > 0 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top right\r\n\r\n        if (currentX > 0 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom left\r\n\r\n        if (currentX < ROWS - 1 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom right\r\n\r\n        if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Knight moves\r\n\r\n        const knightPossibleMoves = [\r\n            [currentX - 2, currentY - 1],\r\n            [currentX - 2, currentY + 1],\r\n            [currentX + 2, currentY - 1],\r\n            [currentX + 2, currentY + 1],\r\n            [currentX - 1, currentY - 2],\r\n            [currentX - 1, currentY + 2],\r\n            [currentX + 1, currentY - 2],\r\n            [currentX + 1, currentY + 2]\r\n        ];\r\n\r\n        \r\n        \r\n        knightPossibleMoves.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode * 3) { \r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        return check;\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                \r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n\r\n\r\n                console.log(newBoard, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = -1;\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheckOptimised(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n                \r\n            });\r\n        });\r\n        \r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n       if (checkMate) setGameRunning(false);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n       \r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n         \r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        socket.on('send-piece', (oldIdx, newIdx, pieceCode, sound) => {\r\n            const iconContainerElement = currSquareElement.current[oldIdx].firstChild;\r\n            console.log('use effect', newVirtualBoard, sendPiece);\r\n            const cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n            const serverOldX = parseInt(oldIdx / 8);\r\n            const serverOldY = oldIdx % 8;\r\n            cloneVirtualBoard[serverOldX][serverOldY] = 0;\r\n            const serverNewX = parseInt(newIdx / 8);\r\n            const serverNewY = newIdx % 8;\r\n            cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\r\n\r\n            pieceSound.pause();\r\n            pieceCapture.pause();\r\n            pieceSound.currentTime = 0;\r\n            pieceCapture.currentTime = 0;\r\n            iconContainerElement.classList.add('opponent');\r\n            iconContainerElement.style.setProperty(\"--element-left\", `${(serverNewY - serverOldY) * 100}px`);\r\n            iconContainerElement.style.setProperty(\"--element-top\", `${(serverNewX - serverOldX) * 100}px`)\r\n            iconContainerElement.classList.add('changed-move');\r\n\r\n            previewVirtualBoard.current = cloneDeep(cloneVirtualBoard);\r\n\r\n\r\n            iconContainerElement.addEventListener(\"transitionend\", () => {\r\n                if (sound === \"move\") pieceSound.play();\r\n                else pieceCapture.play();\r\n                iconContainerElement.style.zIndex = 'initial';\r\n                iconContainerElement.style.position = 'initial';\r\n                iconContainerElement.style.left = `initial`;\r\n                iconContainerElement.style.top = `initial`;\r\n                iconContainerElement.style.transform = 'initial';\r\n                localStorage.setItem(\"online-current-move\", -currentMove);\r\n                setCurrentMove(-currentMove);\r\n                localStorage.setItem(\"online-board\", JSON.stringify(cloneVirtualBoard));\r\n                setNewVirtualBoard(cloneVirtualBoard);      \r\n            });\r\n        });\r\n        \r\n    }, [sendPiece]);\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}