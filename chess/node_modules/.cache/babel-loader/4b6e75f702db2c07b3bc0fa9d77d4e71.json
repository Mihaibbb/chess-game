{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\OnlineBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep'; // import pieceMoveSound from \"../sounds/piece-move.wav\";\n// import pieceCaptureSound from \"../sounds/piece-taken.mp3\";\n\nimport '../styles/board.css';\nimport OnlineSocket from \"./OnlineSocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function OnlineBoard({\n  color,\n  prevButtons,\n  random,\n  socket,\n  oppId\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = color;\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"prev-moves\")) : []);\n  const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"next-moves\") !== null ? JSON.parse(localStorage.getItem(\"next-moves\")) : []);\n  const [sendPiece, setSendPiece] = useState(null);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  }; // const pieceSound = new Audio(pieceMoveSound);\n  // const pieceCapture = new Audio(pieceCaptureSound);\n  // pieceCapture.volume = 0.3;\n\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\"; // Checking everytime prev/next button is pressed\n\n  useEffect(() => {\n    if (!prevButtons) return;\n    if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\n    if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\n    const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\n    const currBoard = cloneDeep(newVirtualBoard);\n    const oldX = parseInt(lastMove.oldIdx / 8);\n    const oldY = lastMove.oldIdx % 8;\n    const newX = parseInt(lastMove.newIdx / 8);\n    const newY = lastMove.newIdx % 8;\n    currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\n    currBoard[newX][newY] = lastMove.oldPieceCode;\n    setNewVirtualBoard(currBoard);\n\n    if (prevButtons.classList.contains('prev-button')) {\n      const newNextMoves = [...nextMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\n      localStorage.setItem(\"next-moves\", JSON.stringify(newNextMoves));\n      setPrevMoves(prevMoves.slice(0, -1));\n      setNextMoves(newNextMoves);\n    } else {\n      const newPrevMoves = [...prevMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"prev-moves\", JSON.stringify(newPrevMoves));\n      localStorage.setItem(\"next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\n      setNextMoves(nextMoves.slice(0, -1));\n      setPrevMoves(newPrevMoves);\n    }\n\n    localStorage.setItem(\"current-move\", -currentMove);\n    localStorage.setItem(\"board\", JSON.stringify(currBoard));\n    setCurrentMove(-currentMove);\n  }, [random]); // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8; // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    const currentX = (_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x;\n    const currentY = (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    if (currentMove != setColor) return;\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    const check = checkCheck(kingSquare, currentMove * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      // pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {// squareDOM.innerHTML = '';\n        // pieceSound.pause();\n        // pieceCapture.play();\n      }\n      let newPiece = pieceCode; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 || squareDOM && pieceCode === -1 && currentX === 7) {\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 902,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n      } else {\n        setPawnTransform(null);\n      }\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY]\n      }]);\n      setNextMoves([]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      }); // Checking if it's rocade\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode; // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      if (checkMateOpponent) setGameRunning(false);\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      const mirrorOldX = 7 - oldX;\n      const mirrorOldY = 7 - oldY;\n      const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\n      const mirrorNewX = 7 - currentX;\n      const mirrorNewY = 7 - currentY;\n      const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\n      setSendPiece(Math.random());\n      socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode);\n      localStorage.setItem(\"current-move\", -currentMove);\n      setCurrentMove(-currentMove);\n      localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    previewVirtualBoard.current = newBoard;\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    // console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      return possibleMovesCheck.some(currSquare => {\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8; // Checking same row\n\n    for (let i = 0; i < COLUMNS; i++) {\n      if (i === currentY) continue;\n      const sameRowSquare = previewVirtualBoard.current[currentX][i];\n      if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\n      if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\n      const newCoords = currentX * 8 + i;\n      const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n\n    for (let i = 0; i < ROWS; i++) {\n      if (i === currentX) continue;\n      const sameColumnSquare = previewVirtualBoard.current[i][currentY];\n      if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\n      if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\n      const newCoords = i * 8 + currentY;\n      const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        const newBoardCheck = checkCheck(kingSquare, kCode, true);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1277,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1291,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1284,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1307,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1300,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1273,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  useEffect(() => {\n    socket.on('send-piece', (oldIdx, newIdx, pieceCode) => {\n      const cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      const serverOldX = parseInt(oldIdx / 8);\n      const serverOldY = oldIdx % 8;\n      cloneVirtualBoard[serverOldX][serverOldY] = 0;\n      const serverNewX = parseInt(newIdx / 8);\n      const serverNewY = newIdx % 8;\n      cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\n      localStorage.setItem(\"current-move\", -currentMove);\n      setCurrentMove(-currentMove);\n      localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n    });\n  }, [setSendPiece]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1359,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1360,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1361,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1362,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1363,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1364,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1365,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1366,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1358,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1356,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OnlineBoard, \"N/hjuBld+7Z1nYkJbBrMSYNkMfg=\");\n\n_c = OnlineBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnlineBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/OnlineBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","OnlineSocket","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","OnlineBoard","color","prevButtons","random","socket","oppId","setColor","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","localStorage","getItem","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","JSON","parse","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","sendPiece","setSendPiece","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","minX","current","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","parseInt","style","width","squareHeight","height","player2Color","player1Color","classList","contains","length","lastMove","currBoard","oldX","oldY","newX","newIdx","newY","pieceCode","oldPieceCode","newNextMoves","setItem","stringify","slice","newPrevMoves","getPossibleMoves","coords","piece","Math","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","console","log","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","element","target","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheck","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","newPiece","containers","leftContainers","map","pawnTransformPiece","rookSquare","rookInit","cloneVirtualBoard","oppositeKingSquare","newBoard","checkMateOpponent","checkCheckmate","checkEqual","checkPat","mirrorOldX","mirrorOldY","mirrorOldIdx","mirrorNewX","mirrorNewY","mirrorNewIdx","emit","getContainers","mySquaresClone","mySquares","filter","result","elementIdx","count","transformPieceCode","Object","keys","key","piece1","piece2","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","checkCheckOptimised","sameRowSquare","squareMoves","squareMovePiece","sameColumnSquare","constantBoard","checkMate","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rowIdx","rows","squareIdx","realIdx","squareComponent","ref","toString","on","serverOldX","serverOldY","serverNewX","serverNewY"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n// import pieceMoveSound from \"../sounds/piece-move.wav\";\r\n// import pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\nimport OnlineSocket from \"./OnlineSocket\";\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function OnlineBoard({ color, prevButtons, random, socket, oppId }) {\r\n\r\n    const setColor = color;\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"current-move\") === null ? 1 : localStorage.getItem(\"current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"next-moves\") !== null ? JSON.parse(localStorage.getItem(\"next-moves\")) : []);\r\n    const [sendPiece, setSendPiece] = useState(null);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    // const pieceSound = new Audio(pieceMoveSound);\r\n    // const pieceCapture = new Audio(pieceCaptureSound);\r\n    // pieceCapture.volume = 0.3;\r\n\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n       \r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n        setNewVirtualBoard(currBoard);\r\n\r\n        if (prevButtons.classList.contains('prev-button')) {\r\n            const newNextMoves = [...nextMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n            localStorage.setItem(\"prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n            localStorage.setItem(\"next-moves\", JSON.stringify(newNextMoves));\r\n\r\n            setPrevMoves(prevMoves.slice(0, -1));\r\n            setNextMoves(newNextMoves);\r\n\r\n        } else  {\r\n           \r\n            const newPrevMoves = [...prevMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n\r\n            localStorage.setItem(\"prev-moves\", JSON.stringify(newPrevMoves));\r\n            localStorage.setItem(\"next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n            setNextMoves(nextMoves.slice(0, -1));\r\n            setPrevMoves(newPrevMoves);\r\n        }\r\n\r\n        localStorage.setItem(\"current-move\", -currentMove);\r\n        localStorage.setItem(\"board\", JSON.stringify(currBoard));\r\n        \r\n        setCurrentMove(-currentMove);\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n           \r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n               \r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                       \r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                       \r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                      \r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                   \r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            \r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n     \r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        \r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n      \r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n               \r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                       \r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n       \r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        \r\n        setActivePiece(null);\r\n       \r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        if (currentMove != setColor) return;\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n      \r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n\r\n        const check = checkCheck(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            // pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n         \r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                // pieceSound.pause();\r\n                // pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0) || (squareDOM && pieceCode === -1 && currentX === 7)) {\r\n                \r\n               \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n              \r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n            } else { \r\n                setPawnTransform(null);\r\n            }\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            // Checking if it's rocade\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                \r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n              \r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n            \r\n            const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n         \r\n            if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            \r\n            const mirrorOldX = 7 - oldX;\r\n            const mirrorOldY = 7 - oldY;\r\n            const mirrorOldIdx = mirrorOldX * 8 + mirrorOldY;\r\n           \r\n            const mirrorNewX = 7 - currentX;\r\n            const mirrorNewY = 7 - currentY;\r\n            const mirrorNewIdx = mirrorNewX * 8 + mirrorNewY;\r\n            setSendPiece(Math.random());\r\n            socket.emit(\"move-piece\", mirrorOldIdx, mirrorNewIdx, pieceCode);\r\n            \r\n            \r\n\r\n            localStorage.setItem(\"current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n\r\n\r\n            localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n      \r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n           \r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        \r\n        previewVirtualBoard.current = newBoard;\r\n    \r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n         \r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n          \r\n            return possibleMovesCheck.some(currSquare => {\r\n               \r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n   \r\n        // Checking same row\r\n        \r\n        for (let i = 0; i < COLUMNS; i++) {\r\n            if (i === currentY) continue;\r\n            const sameRowSquare = previewVirtualBoard.current[currentX][i];\r\n            if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\r\n            if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\r\n\r\n            const newCoords = currentX * 8 + i;\r\n            const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\r\n            \r\n\r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            if (i === currentX) continue;\r\n            const sameColumnSquare = previewVirtualBoard.current[i][currentY];\r\n            if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\r\n            if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\r\n            const newCoords = i * 8 + currentY;\r\n            const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\r\n        \r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n  \r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n       \r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n        \r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n                \r\n                const newBoardCheck = checkCheck(kingSquare, kCode, true);\r\n               \r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n       \r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n         \r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        \r\n        socket.on('send-piece', (oldIdx, newIdx, pieceCode) => {\r\n            const cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n            const serverOldX = parseInt(oldIdx / 8);\r\n            const serverOldY = oldIdx % 8;\r\n            cloneVirtualBoard[serverOldX][serverOldY] = 0;\r\n            const serverNewX = parseInt(newIdx / 8);\r\n            const serverNewY = newIdx % 8;\r\n            cloneVirtualBoard[serverNewX][serverNewY] = pieceCode;\r\n            \r\n            localStorage.setItem(\"current-move\", -currentMove);\r\n            setCurrentMove(-currentMove);\r\n    \r\n            localStorage.setItem(\"board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n            \r\n        });\r\n        \r\n    }, [setSendPiece]);\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}