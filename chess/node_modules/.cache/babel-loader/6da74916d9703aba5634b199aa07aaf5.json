{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\ComputerBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\nimport '../styles/board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function ComputerBoard({\n  color,\n  prevButtons,\n  random,\n  difficulty\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\n  localStorage.setItem(\"set-color\", setColor);\n\n  const computerMoveEasy = newBoard => {\n    console.log('none', currentMove);\n    let currMove = currentMove;\n    setCurrentMove(-currMove);\n    const possibleMoves = getAllMoves(-currMove, newBoard);\n    if (possibleMoves.length === 0) setGameRunning(false);else {\n      const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n      const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\n      console.log(randomMove);\n      let cloneVirtualBoard = cloneDeep(newBoard);\n      const oldX = parseInt(randomPossibleMoves.idx / 8);\n      const oldY = randomPossibleMoves.idx % 8;\n      const newX = parseInt(randomMove / 8);\n      const newY = randomMove % 8;\n      console.log(newX, newY);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\n      localStorage.setItem(\"computer-current-move\", setColor);\n      localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n      setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750);\n      setCurrentMove(currMove);\n    }\n  };\n\n  const computerMoveMedium = () => {};\n\n  const computerMoveHard = () => {};\n\n  const computerMoveDifficulty = difficulty === \"easy\" ? () => computerMoveEasy() : difficulty === \"medium\" ? () => computerMoveMedium() : difficulty === \"hard\" ? () => computerMoveHard() : () => window.location.href = \"\";\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\n  const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  };\n  const pieceSound = new Audio(pieceMoveSound);\n  const pieceCapture = new Audio(pieceCaptureSound);\n  pieceCapture.volume = 0.3;\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  console.log(squareWidth, squareHeight);\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\"; // Checking everytime prev/next button is pressed\n\n  useEffect(() => {\n    if (!prevButtons) return;\n    if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\n    if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\n    const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\n    console.log(prevButtons, prevMoves, lastMove.pieceCode);\n    const currBoard = cloneDeep(newVirtualBoard);\n    const oldX = parseInt(lastMove.oldIdx / 8);\n    const oldY = lastMove.oldIdx % 8;\n    const newX = parseInt(lastMove.newIdx / 8);\n    const newY = lastMove.newIdx % 8;\n    currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\n    currBoard[newX][newY] = lastMove.oldPieceCode;\n    setNewVirtualBoard(currBoard);\n\n    if (prevButtons.classList.contains('prev-button')) {\n      const newNextMoves = [...nextMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\n      localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\n      setPrevMoves(prevMoves.slice(0, -1));\n      setNextMoves(newNextMoves);\n    } else {\n      console.log('ok from here');\n      const newPrevMoves = [...prevMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\n      localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\n      setNextMoves(nextMoves.slice(0, -1));\n      setPrevMoves(newPrevMoves);\n    }\n\n    localStorage.setItem(\"computer-current-move\", -currentMove);\n    localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\n    setCurrentMove(-currentMove);\n  }, [random]); // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8;\n    console.log(currentX, currentY); // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      console.log(frontElement);\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      console.log(possibleMoves);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        console.log(newFrontX);\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          console.log('gdjigdfjhh');\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        console.log(smallRocadeEmpty, bigRocadeEmpty);\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    console.log(containerElement, square);\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    console.log(x, y, square, currentMove);\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        console.log(move, oldPreviewMoves);\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            console.log(currSquare);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n    console.log(squareRef.current);\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2, _squareRef$current3, _squareRef$current4;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    console.log((_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x, (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y);\n    const currentX = (_squareRef$current3 = squareRef.current) === null || _squareRef$current3 === void 0 ? void 0 : _squareRef$current3.x;\n    const currentY = (_squareRef$current4 = squareRef.current) === null || _squareRef$current4 === void 0 ? void 0 : _squareRef$current4.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    console.log(previewVirtualBoard.current);\n\n    if (setColor != currentMove) {\n      console.log('here', setColor, currentMove);\n      return;\n    }\n\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    const otherBoard = cloneDeep(previewVirtualBoard.current);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\n    });\n    console.log(kingSquare, currentMove);\n    const check = checkCheck(kingSquare, currentMove * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      console.log(cloneIcon, prevMoves);\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {\n        // squareDOM.innerHTML = '';\n        pieceSound.pause();\n        pieceCapture.play();\n      }\n      let newPiece = pieceCode;\n      let skipComputerMove = false; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1 || squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1 || squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1 || squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1) {\n        console.log('here');\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        console.log(leftContainers);\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 958,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n        skipComputerMove = true;\n      } else setPawnTransform(null);\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY]\n      }]);\n      setNextMoves([]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n        console.log(kingsMoved.current[dropPiecer]);\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n        console.log(rookMoved.current[2][\"right\"]);\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      console.log(oldX, oldY, currentX, currentY);\n      console.log(cloneVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode;\n      console.log(cloneVirtualBoard); // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      console.log(oppositeKingSquare); // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      // console.log(checkMateOpponent);\n      // if (checkMateOpponent) setGameRunning(false);\n\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      localStorage.setItem(\"computer-current-move\", -currentMove); // setCurrentMove(-currentMove);\n\n      localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n      if (!skipComputerMove) computerMoveDifficulty(cloneVirtualBoard);\n      console.log(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n      console.log(count, elementIdx);\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const getAllMoves = (color, newBoard) => {\n    let currBoard = [];\n    newBoard.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    let possibleMoves = [],\n        allMoves = [];\n    currBoard.forEach((square, idx) => {\n      if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\n        piece: square,\n        idx: idx\n      });\n    });\n    possibleMoves.forEach(move => {\n      const currPossMoves = getPossibleMoves(move.piece, move.idx, newVirtualBoard);\n      const currMoves = currPossMoves.filter(currPieceMove => {\n        let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\n        previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\n        previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\n        let kingSquare;\n        newVirtualBoard.forEach((row, rowIdx) => {\n          row.forEach((square, squareIdx) => {\n            if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\n          });\n        });\n        const isCheck = checkCheck(kingSquare, -setColor * 6);\n        previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\n        return !isCheck;\n      });\n\n      if (currMoves.length !== 0) {\n        allMoves.push({\n          piece: move.piece,\n          idx: move.idx,\n          moves: currMoves\n        });\n      }\n    });\n    return allMoves;\n  };\n\n  const computerMoveFirst = newBoard => {\n    const possibleMoves = getAllMoves(currentMove, newBoard);\n    const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\n    console.log(randomMove);\n    let cloneVirtualBoard = cloneDeep(newBoard);\n    const oldX = parseInt(randomPossibleMoves.idx / 8);\n    const oldY = randomPossibleMoves.idx % 8;\n    const newX = parseInt(randomMove / 8);\n    const newY = randomMove % 8;\n    console.log(newX, newY);\n    cloneVirtualBoard[oldX][oldY] = 0;\n    cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece; // setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \n\n    setCurrentMove(-currentMove);\n  };\n\n  useEffect(() => {\n    if (setColor === -1) computerMoveFirst(newVirtualBoard);\n    console.log('effect');\n  }, []);\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    console.log(newBoard);\n    previewVirtualBoard.current = newBoard;\n    console.log(newBoard);\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    console.log(kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    console.log(oppositeSquaresClone);\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    console.log(oppositeSquares, kingSquare); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMoves);\n      return possibleMovesCheck.some(currSquare => {\n        console.log(currSquare, kingSquare);\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8; // Checking same row\n\n    for (let i = 0; i < COLUMNS; i++) {\n      if (i === currentY) continue;\n      const sameRowSquare = previewVirtualBoard.current[currentX][i];\n      if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\n      if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\n      const newCoords = currentX * 8 + i;\n      const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n\n    for (let i = 0; i < ROWS; i++) {\n      if (i === currentX) continue;\n      const sameColumnSquare = previewVirtualBoard.current[i][currentY];\n      if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\n      if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\n      const newCoords = i * 8 + currentY;\n      const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\n      squareMoves.forEach(move => {\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const squareMovePiece = previewVirtualBoard.current[newX][newY];\n        if (squareMovePiece === kCode) return true;\n      });\n    }\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    console.log(board);\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMovesCheckmate);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        console.log(previewVirtualBoard.current, kCode);\n        console.log(allInOneBoard);\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        console.log(kingSquare);\n        const newBoardCheck = checkCheck(kingSquare, kCode, true);\n        console.log(newBoardCheck, kingSquare, kCode);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    console.log(checkMate);\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    console.log(board, pieceCode);\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      console.log(oppPossibleMoves);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    console.log(virtualBoard);\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1412,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1426,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1419,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1442,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1435,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1408,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1470,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1471,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1472,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1473,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1475,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1476,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1477,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1469,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1467,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ComputerBoard, \"M6NrVPcBxG6smcXCjHh/ZG/GI9I=\");\n\n_c = ComputerBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/ComputerBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","pieceMoveSound","pieceCaptureSound","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","ComputerBoard","color","prevButtons","random","difficulty","setColor","localStorage","getItem","parseInt","setItem","computerMoveEasy","newBoard","console","log","currentMove","currMove","setCurrentMove","possibleMoves","getAllMoves","length","setGameRunning","randomPossibleMoves","Math","floor","randomMove","moves","cloneVirtualBoard","oldX","idx","oldY","newX","newY","piece","JSON","stringify","setTimeout","setNewVirtualBoard","computerMoveMedium","computerMoveHard","computerMoveDifficulty","location","href","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","parse","newVirtualBoard","previewMoves","setPreviewMoves","gameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","pieceSound","Audio","pieceCapture","volume","minX","current","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","style","width","squareHeight","height","player2Color","player1Color","classList","contains","lastMove","pieceCode","currBoard","newIdx","oldPieceCode","newNextMoves","slice","newPrevMoves","getPossibleMoves","coords","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","element","target","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheck","play","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","pause","newPiece","skipComputerMove","containers","leftContainers","map","pawnTransformPiece","rookSquare","rookInit","oppositeKingSquare","checkEqual","checkPat","getContainers","mySquaresClone","mySquares","filter","result","elementIdx","count","allMoves","currPossMoves","currMoves","currPieceMove","oldPreviewVirtualBoard","rowIdx","squareIdx","isCheck","computerMoveFirst","transformPieceCode","Object","keys","key","piece1","piece2","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","some","possibleMovesCheck","checkCheckmate","checkCheckOptimised","sameRowSquare","squareMoves","squareMovePiece","sameColumnSquare","constantBoard","checkMate","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rows","realIdx","squareComponent","ref","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function ComputerBoard({ color, prevButtons, random, difficulty }) {\r\n\r\n    const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\r\n    localStorage.setItem(\"set-color\", setColor);\r\n\r\n    const computerMoveEasy = (newBoard) => {\r\n        console.log('none', currentMove);\r\n        let currMove = currentMove;\r\n        setCurrentMove(-currMove);\r\n\r\n        const possibleMoves = getAllMoves(-currMove, newBoard);\r\n        if (possibleMoves.length === 0) setGameRunning(false);\r\n        else {\r\n            const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n            const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n            console.log(randomMove);\r\n            let cloneVirtualBoard = cloneDeep(newBoard);\r\n\r\n            const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n            const oldY = randomPossibleMoves.idx % 8;\r\n            const newX = parseInt(randomMove / 8);\r\n            const newY = randomMove % 8;\r\n            console.log(newX, newY);\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n            localStorage.setItem(\"computer-current-move\", setColor);\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n\r\n            setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \r\n\r\n            setCurrentMove(currMove);\r\n        }\r\n        \r\n    };\r\n\r\n    const computerMoveMedium = () => {\r\n\r\n    };\r\n\r\n    const computerMoveHard = () => {\r\n        \r\n    };\r\n\r\n    const computerMoveDifficulty = difficulty === \"easy\" ? () => computerMoveEasy() : difficulty === \"medium\" ? () => computerMoveMedium() : difficulty === \"hard\" ? () => computerMoveHard() : () => window.location.href=\"\";\r\n\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\r\n \r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n        console.log(prevButtons, prevMoves, lastMove.pieceCode);\r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n        setNewVirtualBoard(currBoard);\r\n\r\n        if (prevButtons.classList.contains('prev-button')) {\r\n            const newNextMoves = [...nextMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\r\n\r\n            setPrevMoves(prevMoves.slice(0, -1));\r\n            setNextMoves(newNextMoves);\r\n\r\n        } else  {\r\n            console.log('ok from here');\r\n            const newPrevMoves = [...prevMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n            setNextMoves(nextMoves.slice(0, -1));\r\n            setPrevMoves(newPrevMoves);\r\n        }\r\n\r\n        localStorage.setItem(\"computer-current-move\", -currentMove);\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\r\n        \r\n        setCurrentMove(-currentMove);\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0) possibleMoves.push(newFrontCoords);\r\n                \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n\r\n        \r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        if (setColor != currentMove) {\r\n            console.log('here', setColor, currentMove);\r\n            return;\r\n        }\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n        const otherBoard = cloneDeep(previewVirtualBoard.current);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === currentMove * 6 && !checkOppositeColor(iconColor, currentMove)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove);\r\n        const check = checkCheck(kingSquare, currentMove * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n            console.log(cloneIcon, prevMoves);\r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n\r\n            let skipComputerMove = false;\r\n    \r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1) || (squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1) || (squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1) || (squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n                skipComputerMove = true;\r\n\r\n            } else setPawnTransform(null);\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n\r\n            console.log(oldX, oldY, currentX, currentY);\r\n\r\n            console.log(cloneVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n\r\n            console.log(cloneVirtualBoard);\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            // console.log(checkMateOpponent);\r\n            // if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            localStorage.setItem(\"computer-current-move\", -currentMove);\r\n            // setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            if (!skipComputerMove) computerMoveDifficulty(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n   \r\n    const getAllMoves = (color, newBoard) => {\r\n        let currBoard = [];\r\n\r\n        newBoard.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        let possibleMoves = [], allMoves = [];\r\n\r\n        currBoard.forEach((square, idx) => {\r\n            if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\r\n                piece: square, \r\n                idx: idx\r\n            });\r\n        });\r\n\r\n        possibleMoves.forEach(move => {\r\n            const currPossMoves = getPossibleMoves(move.piece, move.idx, newVirtualBoard);\r\n            \r\n            const currMoves = currPossMoves.filter(currPieceMove => {\r\n                let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\r\n                previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\r\n                previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\r\n                let kingSquare;\r\n                newVirtualBoard.forEach((row, rowIdx) => {\r\n                    row.forEach((square, squareIdx) => {\r\n                        if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\r\n                    });\r\n                });\r\n                \r\n                const isCheck = checkCheck(kingSquare, -setColor * 6);\r\n                previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\r\n                \r\n\r\n                return !isCheck;\r\n            });\r\n            \r\n            if (currMoves.length !== 0) {\r\n                allMoves.push({\r\n                    piece: move.piece,\r\n                    idx: move.idx, \r\n                    moves: currMoves\r\n                });\r\n            }\r\n        });\r\n\r\n        return allMoves;\r\n    };\r\n\r\n    const computerMoveFirst = (newBoard) => {\r\n\r\n        const possibleMoves = getAllMoves(currentMove, newBoard);\r\n        const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n        console.log(randomMove);\r\n        let cloneVirtualBoard = cloneDeep(newBoard);\r\n\r\n        const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n        const oldY = randomPossibleMoves.idx % 8;\r\n        const newX = parseInt(randomMove / 8);\r\n        const newY = randomMove % 8;\r\n        console.log(newX, newY);\r\n        cloneVirtualBoard[oldX][oldY] = 0;\r\n        cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n        // setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \r\n        setCurrentMove(-currentMove);\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (setColor === -1) computerMoveFirst(newVirtualBoard);\r\n        console.log('effect');\r\n    }, []);\r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        console.log(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        console.log(kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        console.log(oppositeSquaresClone);\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(oppositeSquares, kingSquare);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n            console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMoves);\r\n            return possibleMovesCheck.some(currSquare => {\r\n                \r\n                console.log(currSquare, kingSquare);\r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n   \r\n        // Checking same row\r\n        \r\n        for (let i = 0; i < COLUMNS; i++) {\r\n            if (i === currentY) continue;\r\n            const sameRowSquare = previewVirtualBoard.current[currentX][i];\r\n            if (!checkOppositeColor(sameRowSquare, kingSquare)) continue;\r\n            if (Math.abs(sameRowSquare) !== 2 && Math.abs(sameRowSquare) !== 5) continue;\r\n\r\n            const newCoords = currentX * 8 + i;\r\n            const squareMoves = getPossibleMoves(sameRowSquare, newCoords, previewVirtualBoard.current);\r\n            \r\n\r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n\r\n        for (let i = 0; i < ROWS; i++) {\r\n            if (i === currentX) continue;\r\n            const sameColumnSquare = previewVirtualBoard.current[i][currentY];\r\n            if (!checkOppositeColor(sameColumnSquare, kingSquare)) continue;\r\n            if (Math.abs(sameColumnSquare) !== 2 && Math.abs(sameColumnSquare) !== 5) continue;\r\n            const newCoords = i * 8 + currentY;\r\n            const squareMoves = getPossibleMoves(sameColumnSquare, newCoords, previewVirtualBoard.current);\r\n        \r\n            squareMoves.forEach(move => {\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const squareMovePiece = previewVirtualBoard.current[newX][newY];\r\n                if (squareMovePiece === kCode) return true;\r\n            });\r\n        }\r\n    };\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                console.log(previewVirtualBoard.current, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheck(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n       console.log(checkMate);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}