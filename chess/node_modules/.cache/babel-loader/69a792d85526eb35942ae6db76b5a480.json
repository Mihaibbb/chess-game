{"ast":null,"code":"var _jsxFileName = \"A:\\\\Js\\\\Chess\\\\chess-1.3\\\\chess\\\\src\\\\Components\\\\ComputerBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\nimport '../styles/board.css';\nimport { isArray } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HEIGHT = 85 * window.innerHeight / 100;\nconst SQUARES = 64;\nconst ROWS = 8;\nconst COLUMNS = 8;\nexport default function ComputerBoard({\n  color,\n  prevButtons,\n  random,\n  difficulty\n}) {\n  _s();\n\n  var _boardRef$current, _boardRef$current2, _boardRef$current3, _boardRef$current4, _boardRef$current5, _boardRef$current6, _boardRef$current7, _boardRef$current8;\n\n  const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\n  localStorage.setItem(\"set-color\", setColor);\n  const currDifficulty = localStorage.getItem(\"computer-difficulty\") !== null ? difficulty : JSON.parse(localStorage.getItem(\"computer-difficulty\"));\n  localStorage.setItem(\"computer-difficulty\", JSON.stringify(difficulty));\n\n  const createVirtualBoard = () => {\n    let board = [];\n\n    for (let i = 0; i < 8; i++) {\n      let row = [];\n\n      for (let j = 0; j < 8; j++) if (i === 1) row.push(-setColor * 1);else if (i === 6) row.push(setColor * 1);else if (i !== 7 && i !== 0) row.push(0);\n\n      if (color < 0) {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);\n      } else {\n        if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  };\n\n  const boardRef = useRef(null);\n  const squareRef = useRef(null);\n  const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\n  const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\n  const [oldIdx, setOldIdx] = useState(null);\n  const [possibleMoves, setPossibleMoves] = useState(null);\n  const [activePiece, setActivePiece] = useState(null);\n  const [dropPiecer, setActiveDrop] = useState(null);\n  const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\n  const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\n  const [previewMoves, setPreviewMoves] = useState([]);\n  const [gameRunning, setGameRunning] = useState(true);\n  const [pawnTransform, setPawnTransform] = useState(null);\n  const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\n  const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\n  const [movedFirst, setMovedFirst] = useState(false);\n  const previewVirtualBoard = useRef(virtualBoard);\n  const squareElements = useRef(null);\n  const currSquareElement = useRef([]);\n  const oldChildren = useRef([]);\n  const kingsMoved = useRef({\n    \"6\": false,\n    \"-6\": false\n  });\n  const rookMoved = useRef({\n    \"2\": {\n      \"left\": false,\n      \"right\": false\n    },\n    \"-2\": {\n      \"left\": false,\n      \"right\": false\n    }\n  });\n  const piecesCode = {\n    1: faChessPawn,\n    2: faChessRook,\n    3: faChessKnight,\n    4: faChessBishop,\n    5: faChessQueen,\n    6: faChessKing\n  };\n  console.log(virtualBoard);\n  const pieceSound = new Audio(pieceMoveSound);\n  const pieceCapture = new Audio(pieceCaptureSound);\n  pieceCapture.volume = 0.3;\n  const minX = (_boardRef$current = boardRef.current) === null || _boardRef$current === void 0 ? void 0 : _boardRef$current.offsetLeft;\n  const maxX = ((_boardRef$current2 = boardRef.current) === null || _boardRef$current2 === void 0 ? void 0 : _boardRef$current2.offsetLeft) + ((_boardRef$current3 = boardRef.current) === null || _boardRef$current3 === void 0 ? void 0 : _boardRef$current3.offsetWidth) - 25;\n  const minY = (_boardRef$current4 = boardRef.current) === null || _boardRef$current4 === void 0 ? void 0 : _boardRef$current4.offsetTop;\n  const maxY = ((_boardRef$current5 = boardRef.current) === null || _boardRef$current5 === void 0 ? void 0 : _boardRef$current5.offsetTop) + ((_boardRef$current6 = boardRef.current) === null || _boardRef$current6 === void 0 ? void 0 : _boardRef$current6.offsetHeight) - 50;\n  const squareWidth = parseInt((_boardRef$current7 = boardRef.current) === null || _boardRef$current7 === void 0 ? void 0 : _boardRef$current7.style.width) / 8;\n  const squareHeight = parseInt((_boardRef$current8 = boardRef.current) === null || _boardRef$current8 === void 0 ? void 0 : _boardRef$current8.style.height) / 8;\n  console.log(squareWidth, squareHeight);\n  const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\n  const player1Color = player2Color === \"white\" ? \"black\" : \"white\"; // Checking everytime prev/next button is pressed\n\n  useEffect(() => {\n    if (!prevButtons) return;\n    if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\n    if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\n    const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\n    console.log(prevButtons, prevMoves, lastMove.pieceCode);\n    const currBoard = cloneDeep(newVirtualBoard);\n    const oldX = parseInt(lastMove.oldIdx / 8);\n    const oldY = lastMove.oldIdx % 8;\n    const newX = parseInt(lastMove.newIdx / 8);\n    const newY = lastMove.newIdx % 8;\n    currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\n    currBoard[newX][newY] = lastMove.oldPieceCode;\n    setNewVirtualBoard(currBoard);\n\n    if (prevButtons.classList.contains('prev-button')) {\n      const newNextMoves = [...nextMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\n      localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\n      setPrevMoves(prevMoves.slice(0, -1));\n      setNextMoves(newNextMoves);\n    } else {\n      console.log('ok from here');\n      const newPrevMoves = [...prevMoves, {\n        oldIdx: lastMove.oldIdx,\n        newIdx: lastMove.newIdx,\n        oldPieceCode: lastMove.pieceCode,\n        pieceCode: lastMove.oldPieceCode\n      }];\n      localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\n      localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\n      setNextMoves(nextMoves.slice(0, -1));\n      setPrevMoves(newPrevMoves);\n    }\n\n    localStorage.setItem(\"computer-current-move\", -currentMove);\n    localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\n    setCurrentMove(-currentMove);\n  }, [random]); // Function for checking the check \n\n  const getPossibleMoves = (pieceCode, coords, board) => {\n    const piece = Math.abs(pieceCode);\n    let possibleMoves = []; // Current coordonates\n\n    const currentX = parseInt(coords / 8);\n    const currentY = coords % 8;\n    console.log(currentX, currentY); // Code for pawn\n\n    if (piece === 1) {\n      // Coordonates for possible moves\n      const newDiagX = currentX - pieceCode * setColor;\n      const newDiagY = currentY + pieceCode * setColor;\n      const newDiagY2 = currentY - pieceCode * setColor;\n      const newCoords = newDiagX * 8 + newDiagY;\n      const newCoords2 = newDiagX * 8 + newDiagY2;\n      const newFrontCoords = newDiagX * 8 + currentY;\n      const frontElement = board[newDiagX] && board[newDiagX][currentY] && board[newDiagX][currentY];\n      console.log(frontElement);\n      if (frontElement === 0) possibleMoves.push(newFrontCoords);\n      console.log(possibleMoves);\n      const diagonalElement = board[newDiagX] && board[newDiagX][newDiagY] && board[newDiagX][newDiagY];\n      const diagonalElement2 = board[newDiagX] && board[newDiagX][newDiagY2] && board[newDiagX][newDiagY2];\n\n      if (pieceCode * setColor < 0 && currentX === 1 || pieceCode * setColor > 0 && currentX === 6) {\n        const newFrontX = currentX - pieceCode * 2 * setColor;\n        console.log(newFrontX);\n        const newFrontCoords = newFrontX * 8 + currentY;\n        const newCoordsSquare = board[newFrontX][currentY];\n        if (newCoordsSquare === 0 && frontElement === 0) possibleMoves.push(newFrontCoords);\n      }\n\n      if (diagonalElement2 !== 0) {\n        if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\n      }\n\n      if (diagonalElement === 0) return possibleMoves;\n      if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\n    } else if (piece === 2) {\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n    } else if (piece === 3) {\n      const pieceMoves = [{\n        x: currentX - 2,\n        y: currentY - 1\n      }, {\n        x: currentX - 2,\n        y: currentY + 1\n      }, {\n        x: currentX + 2,\n        y: currentY - 1\n      }, {\n        x: currentX + 2,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY - 2\n      }, {\n        x: currentX - 1,\n        y: currentY + 2\n      }, {\n        x: currentX + 1,\n        y: currentY - 2\n      }, {\n        x: currentX + 1,\n        y: currentY + 2\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      });\n    } else if (piece === 4) {\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              console.log(possibleMoves, newSquare, board, newX, newY);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, newCoords);\n          }\n        }\n      }\n    } else if (piece === 5) {\n      console.log(board);\n\n      if (currentY > 1) {\n        for (let i = currentY - 1; i >= 0; i--) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare);\n          }\n        }\n      }\n\n      if (currentY < 7) {\n        for (let i = currentY + 1; i < 8; i++) {\n          const newCoords = currentX * 8 + i;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', possibleMoves);\n          }\n        }\n      }\n\n      if (currentX > 1) {\n        for (let i = currentX - 1; i >= 0; i--) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              console.log(board, board[newX][newY], pieceCode, newCoords);\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newCoords, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX < 7) {\n        for (let i = currentX + 1; i < 8; i++) {\n          const newCoords = i * 8 + currentY;\n          const newX = parseInt(newCoords / 8);\n          const newY = parseInt(newCoords % 8);\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY >= 1) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY, pieceCode);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX >= 1 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX - i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n          console.log(newSquare, newX, newY);\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY >= 0) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY - i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n\n      if (currentX <= 7 && currentY <= 7) {\n        for (let i = 1; i < 8; i++) {\n          const newX = currentX + i;\n          const newY = currentY + i;\n          const newCoords = newX * 8 + newY;\n          const newSquare = board[newX] && board[newX][newY] && board[newX][newY];\n\n          if (newSquare !== undefined) {\n            console.log(newX, newY);\n\n            if (newSquare !== 0) {\n              if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n              break;\n            } else possibleMoves.push(newCoords);\n\n            console.log('empty text just for fun', newSquare, possibleMoves);\n          }\n        }\n      }\n    } else if (piece === 6) {\n      const pieceMoves = [{\n        x: currentX,\n        y: currentY - 1\n      }, {\n        x: currentX,\n        y: currentY + 1\n      }, {\n        x: currentX - 1,\n        y: currentY\n      }, {\n        x: currentX + 1,\n        y: currentY\n      }, {\n        x: currentX - 1,\n        y: currentY - 1\n      }, {\n        x: currentX - 1,\n        y: currentY + 1\n      }, {\n        x: currentX + 1,\n        y: currentY - 1\n      }, {\n        x: currentX + 1,\n        y: currentY + 1\n      }];\n      pieceMoves.forEach(pieceMove => {\n        const newCoords = pieceMove.x * 8 + pieceMove.y;\n        const newSquare = board[pieceMove.x] && board[pieceMove.x][pieceMove.y] && board[pieceMove.x][pieceMove.y];\n\n        if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\n          if (newSquare !== 0) {\n            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\n          } else possibleMoves.push(newCoords);\n\n          console.log(newSquare, pieceMove.x, pieceMove.y);\n        }\n      }); // Movement for rocade\n\n      console.log(kingsMoved.current[pieceCode]);\n\n      if (!kingsMoved.current[pieceCode]) {\n        console.log('rocade', rookMoved);\n        const smallRocadeCoords = currentX * 8 + currentY + 2;\n        const bigRocadeCoords = currentX * 8 + currentY - 3;\n        const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\n        const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\n        const smallRocadeSquare = board[currentX] && board[currentX][currentY + 2] && board[currentX][currentY + 2];\n        const bigRocadeSquare = board[currentX] && board[currentX][currentY - 3] && board[currentX][currentY - 3];\n        let smallRocadeEmpty = true,\n            bigRocadeEmpty = true; // Checking if the squares between king and rook are empty \n\n        for (let i = coords + 1; i <= smallRocadeCoords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\n        }\n\n        for (let i = bigRocadeCoords; i < coords; i++) {\n          const rocadeX = parseInt(i / 8);\n          const rocadeY = i % 8;\n          console.log('gdjigdfjhh');\n          if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\n        }\n\n        console.log(smallRocadeEmpty, bigRocadeEmpty);\n\n        if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\n          possibleMoves.push({\n            king: smallRocadeCoords,\n            rook: smallRocadeRookCoords,\n            rocade: \"s\"\n          });\n        }\n\n        if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\n          possibleMoves.push({\n            king: bigRocadeCoords,\n            rook: bigRocadeRookCoords,\n            rocade: \"b\"\n          });\n        } // possibleMoves.push(smallRocade);\n        // possibleMoves.push(bigRocade);\n\n      }\n    }\n\n    return possibleMoves;\n  };\n\n  const dragPiece = (e, square) => {\n    if (!gameRunning) return;\n    if (pawnTransform && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.elements.length) > 1) return;\n    const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\n    const containerElement = element.parentElement;\n    console.log(containerElement, square);\n    const x = e.clientX - 20;\n    const y = e.clientY - 20;\n    console.log(x, y, square, currentMove);\n    containerElement.style.position = 'absolute';\n    containerElement.style.left = `${x}px`;\n    containerElement.style.top = `${y}px`;\n    setActivePiece(containerElement);\n    setActiveDrop(parseInt(containerElement.classList[2]));\n    let newTotalCoords;\n    currSquareElement.current.forEach((square, idx) => {\n      if (square === containerElement.parentElement) newTotalCoords = idx;\n    });\n    setOldIdx(newTotalCoords);\n    const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\n    console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\n    if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);else {\n      setPossibleMoves(currPossibleMoves); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n        console.log(move, oldPreviewMoves);\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n      let newPreviewMoves = [];\n      currPossibleMoves.forEach((move, idx) => {\n        setTimeout(() => {\n          const currSquare = currSquareElement.current[move];\n\n          if (currSquare && currSquare.firstChild == null) {\n            const dotElement = document.createElement('div');\n            dotElement.classList.add('possible-move');\n            currSquare.appendChild(dotElement);\n            console.log(currSquare);\n            newPreviewMoves.push(currSquare);\n          } else if (currSquare && currSquare.firstChild.firstChild !== null) {\n            currSquare.firstChild.firstChild.classList.add('attacked');\n            newPreviewMoves.push(currSquare);\n          }\n        }, idx * 0);\n      });\n      setPreviewMoves(newPreviewMoves);\n    }\n  };\n\n  const movePiece = e => {\n    var _boardRef$current9, _boardRef$current10;\n\n    if (!activePiece) return;\n    const x = e.clientX - 15;\n    const y = e.clientY - 15;\n    activePiece.style.position = 'absolute';\n    activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\n    activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\n    activePiece.style.zIndex = 3;\n    const ySquare = (parseInt(activePiece.style.left) - ((_boardRef$current9 = boardRef.current) === null || _boardRef$current9 === void 0 ? void 0 : _boardRef$current9.offsetLeft)) / squareWidth;\n    const xSquare = (parseInt(activePiece.style.top) - ((_boardRef$current10 = boardRef.current) === null || _boardRef$current10 === void 0 ? void 0 : _boardRef$current10.offsetTop)) / squareHeight;\n    squareRef.current = {\n      x: Math.round(xSquare),\n      y: Math.round(ySquare)\n    };\n    console.log(squareRef.current);\n  };\n\n  const dropPiece = (e, pieceCode) => {\n    var _squareRef$current, _squareRef$current2, _squareRef$current3, _squareRef$current4;\n\n    if (!activePiece || !squareRef.current || oldIdx === null) return;\n    if (!possibleMoves) return;\n    setActivePiece(null);\n    console.log((_squareRef$current = squareRef.current) === null || _squareRef$current === void 0 ? void 0 : _squareRef$current.x, (_squareRef$current2 = squareRef.current) === null || _squareRef$current2 === void 0 ? void 0 : _squareRef$current2.y);\n    const currentX = (_squareRef$current3 = squareRef.current) === null || _squareRef$current3 === void 0 ? void 0 : _squareRef$current3.x;\n    const currentY = (_squareRef$current4 = squareRef.current) === null || _squareRef$current4 === void 0 ? void 0 : _squareRef$current4.y;\n    let rocade = false;\n    const idx = currentX * 8 + currentY;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const sameIndex = possibleMoves.find(move => {\n      if (typeof move === 'object') rocade = move;\n      return idx === (typeof move === 'object' ? move.king : move);\n    });\n    activePiece.style.left = 'initial';\n    activePiece.style.top = 'initial';\n    activePiece.position = 'relative';\n    activePiece.style.zIndex = 'initial';\n    console.log(previewVirtualBoard.current);\n\n    if (setColor != currentMove) {\n      console.log('here', setColor, currentMove);\n      return;\n    }\n\n    const oldBoard = cloneDeep(newVirtualBoard);\n    const otherBoard = cloneDeep(newVirtualBoard);\n    otherBoard[oldX][oldY] = 0;\n    otherBoard[currentX][currentY] = pieceCode;\n    previewVirtualBoard.current = otherBoard;\n    console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\n    let squaresVirtualBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => squaresVirtualBoard.push(square));\n    });\n    let kingSquare;\n    squaresVirtualBoard.forEach((square, totalIdx) => {\n      const iconColor = square && square < 0 ? -1 : 1;\n      const x = parseInt(totalIdx / 8);\n      const y = parseInt(totalIdx % 8);\n      if (square === setColor * 6 && !checkOppositeColor(iconColor, setColor)) kingSquare = totalIdx;\n    });\n    console.log(kingSquare, currentMove, previewVirtualBoard.current);\n    const check = checkCheckOptimised(kingSquare, setColor * 6);\n    console.log(check);\n\n    if (sameIndex !== undefined && !check) {\n      // Sound of piece moving\n      pieceSound.play();\n      const squareDOM = currSquareElement.current[idx];\n      const squarePiece = squareDOM && squareDOM.querySelector('[code]');\n      const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\n      squareRef.current = null;\n      const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ? squareDOM.firstChild.cloneNode(true) : null;\n      console.log(cloneIcon, prevMoves);\n      if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && (pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7)) {\n        // squareDOM.innerHTML = '';\n        pieceSound.pause();\n        pieceCapture.play();\n      }\n      let newPiece = pieceCode;\n      let skipComputerMove = false; // Piece being moved to new square\n\n      if (squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1 || squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1 || squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1 || squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1) {\n        console.log('here');\n        const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\n        const leftContainers = containers;\n        console.log(leftContainers);\n        const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`,\n            onClick: e => pawnTransformPiece(piece, idx, oldIdx),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piece,\n              className: `mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pieceCode > 0 ? \"#fff\" : \"#000\",\n              code: pieceCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 921,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 25\n          }, this);\n        }) : activePiece;\n        setPawnTransform({\n          idx: idx,\n          elements: elements\n        });\n        skipComputerMove = true;\n      } else setPawnTransform(null);\n\n      setPrevMoves([...prevMoves, {\n        oldIdx: oldIdx,\n        newIdx: idx,\n        pieceCode: pieceCode,\n        oldPieceCode: newVirtualBoard[currentX][currentY]\n      }]);\n      setNextMoves([]); // Removing old preview dots\n\n      previewMoves && previewMoves.forEach(move => {\n        const oldPreviewMoves = move.firstChild;\n\n        if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\n          move.removeChild(oldPreviewMoves);\n        } else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\n      });\n\n      if (rocade) {\n        if (rocade.rocade === 's') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\n          rookSquare.appendChild(rookInit);\n        } else if (rocade.rocade === 'b') {\n          const rookSquare = currSquareElement.current[rocade.rook];\n          const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\n          rookSquare.appendChild(rookInit);\n        }\n      }\n\n      if (Math.abs(dropPiecer) === 6) {\n        kingsMoved.current[dropPiecer] = true;\n        console.log(kingsMoved.current[dropPiecer]);\n      } else if (dropPiecer === 2) {\n        rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\n        console.log(rookMoved.current[2][\"right\"]);\n      } else if (dropPiecer === -2) {\n        rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\n      }\n\n      let cloneVirtualBoard = cloneDeep(newVirtualBoard);\n      console.log(oldX, oldY, currentX, currentY);\n      console.log(cloneVirtualBoard);\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[currentX][currentY] = pieceCode;\n      console.log(cloneVirtualBoard); // Checking if it's giving checkmate to the opponent\n\n      let oppositeKingSquare,\n          newBoard = [];\n      cloneVirtualBoard.forEach(row => {\n        row.forEach(square => newBoard.push(square));\n      });\n      newBoard.forEach((square, totalIdx) => {\n        if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\n      });\n      console.log(oppositeKingSquare); // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\n      // console.log(checkMateOpponent);\n      // if (checkMateOpponent) setGameRunning(false);\n\n      const checkEqual = checkPat(currentMove, cloneVirtualBoard);\n      console.log(checkEqual);\n      if (checkEqual) setGameRunning(false);\n      localStorage.setItem(\"computer-current-move\", -currentMove); // setCurrentMove(-currentMove);\n\n      localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n      if (!skipComputerMove) computerMove(cloneVirtualBoard);\n      console.log(cloneVirtualBoard); // console.log(checkMateOpponent);\n    } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\n  };\n\n  const getContainers = (elements, piece) => {\n    let currBoard = [];\n    console.log(piece);\n    newVirtualBoard.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, piece) && square !== 0) return square;\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    const result = elements.filter((element, elementIdx) => {\n      let count = 0;\n      mySquares.forEach(square => {\n        if (square - 2 === elementIdx) count++;\n      });\n      console.log(count, elementIdx);\n\n      if (count < 1 && elementIdx === 3) {\n        console.log('queen not working');\n        return element;\n      } else if (count < 2 && elementIdx !== 3) return element;\n    });\n    return result;\n  };\n\n  const computerMove = newBoard => {\n    console.log('none', currentMove);\n    let currMove = currentMove;\n    setCurrentMove(-currMove);\n    const possibleMoves = getAllMoves(-currMove, newBoard);\n    console.log(possibleMoves);\n\n    if (possibleMoves.length === 0) {\n      setGameRunning(false);\n      return;\n    }\n\n    let newPossibleMoves, newMove;\n\n    if (currDifficulty === \"easy\") {\n      newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n      newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\n    } else if (currDifficulty === \"medium\") {\n      let minNum = {\n        number: Number.POSITIVE_INFINITY\n      };\n      possibleMoves.forEach(move => {\n        move.moves.forEach(possMove => {\n          if (newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < minNum.number) {\n            minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]);\n            newMove = possMove;\n            newPossibleMoves = move;\n          }\n        });\n      });\n\n      if (minNum.number === Number.POSITIVE_INFINITY) {\n        newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n        newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\n      }\n    } else if (currDifficulty === \"hard\") {\n      let minNum = {\n        number: Number.POSITIVE_INFINITY\n      };\n      possibleMoves.forEach(move => {\n        move.moves.forEach(possMove => {\n          if (newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < minNum.number) {\n            if (Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < 0) {\n              minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]);\n              newMove = possMove;\n              newPossibleMoves = move;\n            } else if (!isDefensed(newBoard, move.idx, possMove)) {\n              console.log('no, is not defensed');\n              minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]);\n              newMove = possMove;\n              newPossibleMoves = move;\n            }\n          }\n        });\n      });\n\n      if (minNum.number === Number.POSITIVE_INFINITY) {\n        newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n        newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\n      }\n    } else if (currDifficulty === \"very hard\") {}\n\n    console.log(newMove);\n    let cloneVirtualBoard = cloneDeep(newBoard);\n    const oldX = parseInt(newPossibleMoves.idx / 8);\n    const oldY = newPossibleMoves.idx % 8;\n    const newX = parseInt(newMove / 8);\n    const newY = newMove % 8;\n    const iconContainerElement = currSquareElement.current[newPossibleMoves.idx].firstChild;\n    const newSquareBounding = currSquareElement.current[newMove].getBoundingClientRect();\n    const rectBounding = iconContainerElement.getBoundingClientRect();\n    const top = rectBounding.top - (boardRef === null || boardRef === void 0 ? void 0 : boardRef.current.offsetTop);\n    const left = rectBounding.left - (boardRef === null || boardRef === void 0 ? void 0 : boardRef.current.offsetLeft);\n    console.log(newSquareBounding.top, newSquareBounding.left, newX, newY);\n    console.log(iconContainerElement, currSquareElement.current[newMove]);\n    iconContainerElement.classList.add('opponent'); // iconContainerElement.style.transition = 'all 350ms ease-in-out';\n\n    setTimeout(() => {\n      // iconContainerElement.style.opacity = 0.5;\n      iconContainerElement.style.opacity = 0.5; // iconContainerElement.style.left = `${newSquareBounding.left + (newSquareBounding.width / 4)}px`;\n      // iconContainerElement.style.top = `${newSquareBounding.top + (newSquareBounding.height / 4)}px`;\n\n      iconContainerElement.style.setProperty(\"--element-top\", `${newSquareBounding.top + newSquareBounding.height / 4}px`);\n      iconContainerElement.style.setProperty(\"--element-left\", `${newSquareBounding.left + newSquareBounding.width / 4}px`);\n      iconContainerElement.classList.add('changed-move');\n    }, 100);\n    setTimeout(() => {\n      // iconContainerElement.classList.remove('opponent');\n      // iconContainerElement.style.zIndex = 'initial';\n      // iconContainerElement.style.position = 'initial';\n      // iconContainerElement.style.left = `initial`;\n      // iconContainerElement.style.top = `initial`;\n      let sound;\n      if (cloneVirtualBoard[newX][newY] !== 0) sound = pieceCapture;else sound = pieceSound;\n      cloneVirtualBoard[oldX][oldY] = 0;\n      cloneVirtualBoard[newX][newY] = newPossibleMoves.piece;\n      localStorage.setItem(\"computer-current-move\", setColor);\n      localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\n      setNewVirtualBoard(cloneVirtualBoard);\n      sound.play();\n      setCurrentMove(currMove);\n    }, 750);\n  };\n\n  const isDefensed = (board, computerIdx, playerIdx) => {\n    const computerPiece = board[parseInt(computerIdx / 8)][computerIdx % 8];\n    const playerPiece = board[parseInt(playerIdx / 8)][playerIdx % 8];\n    let squareBoard = [];\n    board.forEach(row => {\n      row.forEach(square => squareBoard.push(square));\n    });\n    const playerPiecesUnfiltered = squareBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, setColor) && square !== 0) return {\n        piece: square,\n        idx: idx\n      };\n    });\n    const playerPieces = playerPiecesUnfiltered.filter(square => square !== undefined);\n    console.log(playerPieces);\n    let cloneBoard = cloneDeep(board);\n    cloneBoard[parseInt(playerIdx / 8)][playerIdx % 8] = 0; // Get possible moves for each piece\n\n    return playerPieces.some(piece => {\n      const playerPossibleMoves = getPossibleMoves(piece.piece, piece.idx, cloneBoard);\n      return playerPossibleMoves.some(move => move === playerIdx);\n    });\n  };\n\n  const getAllMoves = (color, newBoard) => {\n    let currBoard = [];\n    newBoard.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    let possibleMoves = [],\n        allMoves = [];\n    currBoard.forEach((square, idx) => {\n      if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\n        piece: square,\n        idx: idx\n      });\n    });\n    possibleMoves.length !== 0 && possibleMoves.forEach(move => {\n      const currPossMoves = getPossibleMoves(move.piece, move.idx, newBoard);\n      console.log(move);\n      const currMoves = currPossMoves.length !== 0 && isArray(currPossMoves) ? currPossMoves.filter(currPieceMove => {\n        if (currPieceMove.rocade != null) return false;\n        let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\n        console.log(move.idx, currPieceMove);\n        previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\n        previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\n        let kingSquare;\n        console.log(newVirtualBoard);\n        previewVirtualBoard.current.forEach((row, rowIdx) => {\n          row.forEach((square, squareIdx) => {\n            if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\n          });\n        });\n        const isCheck = checkCheckOptimised(kingSquare, -setColor * 6);\n        previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\n        return !isCheck;\n      }) : [];\n      console.log(currMoves);\n\n      if (currMoves.length !== 0) {\n        allMoves.push({\n          piece: move.piece,\n          idx: move.idx,\n          moves: currMoves\n        });\n      }\n    });\n    console.log(allMoves);\n    return allMoves;\n  };\n\n  const computerMoveFirst = () => {\n    let newBoard1 = cloneDeep(newVirtualBoard);\n    newBoard1[2][0] = 0;\n    newBoard1[0][1] = 3;\n    setNewVirtualBoard(newBoard1);\n    const possibleMoves = getAllMoves(currentMove, newBoard1);\n    console.log(possibleMoves, Math.random() * possibleMoves.length);\n    const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\n    console.log(randomMove);\n    let cloneVirtualBoard = cloneDeep(newBoard1);\n    const oldX = parseInt(randomPossibleMoves.idx / 8);\n    const oldY = randomPossibleMoves.idx % 8;\n    const newX = parseInt(randomMove / 8);\n    const newY = randomMove % 8;\n    console.log(newX, newY);\n    cloneVirtualBoard[oldX][oldY] = 0;\n    cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\n    setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750);\n    setCurrentMove(-currentMove);\n  };\n\n  useEffect(() => {\n    if (setColor === -1) computerMoveFirst();\n  }, []);\n\n  const pawnTransformPiece = (piece, idx, oldIdx) => {\n    // Get transformed piece's code\n    const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\n    const newBoard = cloneDeep(newVirtualBoard);\n    const currentX = parseInt(idx / 8);\n    const currentY = idx % 8;\n    const oldX = parseInt(oldIdx / 8);\n    const oldY = oldIdx % 8;\n    const totalIdx = currentX * 8 + currentY + +(currentX % 2 !== 0 ? 1 : 0);\n    newBoard[currentX][currentY] = transformPieceCode;\n    newBoard[oldX][oldY] = 0;\n    setNewVirtualBoard(newBoard);\n    console.log(newBoard);\n    previewVirtualBoard.current = newBoard;\n    console.log(newBoard);\n    setPawnTransform({\n      idx: idx,\n      piece: transformPieceCode,\n      elements: []\n    });\n    localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\n  };\n\n  const checkOppositeColor = (piece1, piece2) => {\n    if (piece1 < 0 && piece2 > 0) return true;else if (piece1 > 0 && piece2 < 0) return true;\n    return false;\n  };\n\n  const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\n    console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\n    console.log(kingSquare);\n    let currBoard = [];\n    previewVirtualBoard.current.forEach(row => {\n      row.forEach(square => {\n        currBoard.push(square);\n      });\n    });\n    const oppositeSquaresClone = currBoard.map((square, idx) => {\n      if (checkOppositeColor(kCode, square)) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    console.log(oppositeSquaresClone);\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    console.log(oppositeSquares, kingSquare); // Checking if king is attacked\n\n    const check = oppositeSquares.some(square => {\n      console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\n      const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMoves);\n      return possibleMovesCheck.some(currSquare => {\n        console.log(currSquare, kingSquare);\n        return currSquare === kingSquare;\n      });\n    });\n    const oldBoard = cloneDeep(previewVirtualBoard.current);\n    if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n    previewVirtualBoard.current = oldBoard;\n    return check;\n  };\n\n  const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\n    // Getting coords\n    const currentX = parseInt(kingSquare / 8);\n    const currentY = kingSquare % 8;\n    const pieceCode = kCode / -6;\n    let check = false;\n    const kingPossibleSquares = [[currentX - 1, currentY - 1], [currentX - 1, currentY], [currentX - 1, currentY + 1], [currentX, currentY - 1], [currentX, currentY + 1], [currentX + 1, currentY - 1], [currentX + 1, currentY], [currentX + 1, currentY + 1]];\n    console.log(previewVirtualBoard.current, pieceCode);\n    kingPossibleSquares.forEach(move => {\n      const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n      if (square === -kCode && square !== null) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        check = true;\n      }\n    }); // Pawns \n\n    const pawnPossibleSquares = [[currentX + pieceCode * setColor, currentY - pieceCode * setColor], [currentX + pieceCode * setColor, currentY + pieceCode * setColor]];\n    console.log(pawnPossibleSquares);\n    pawnPossibleSquares.forEach(move => {\n      const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n      if (square === pieceCode) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        console.log('check');\n        check = true;\n      }\n    }); // Rows\n\n    if (currentX > 0) {\n      for (let i = currentX - 1; i >= 0; i--) {\n        const rowSquare = previewVirtualBoard.current[i] && previewVirtualBoard.current[i][currentY] && previewVirtualBoard.current[i][currentY];\n\n        if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (rowSquare !== 0) break;\n      }\n    }\n\n    if (currentX < ROWS - 1) {\n      for (let i = currentX + 1; i < ROWS; i++) {\n        const rowSquare = previewVirtualBoard.current[i] && previewVirtualBoard.current[i][currentY] && previewVirtualBoard.current[i][currentY];\n        console.log(rowSquare, pieceCode, previewVirtualBoard.current);\n\n        if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n\n          if (!isFromCheckMate) {\n            const checkMate = checkCheckmate(kCode, newVirtualBoard);\n            console.log(checkMate);\n          }\n\n          console.log(\"here in if\");\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (rowSquare !== 0) break;\n      }\n    } // Columns \n\n\n    if (currentY > 0) {\n      for (let i = currentY - 1; i >= 0; i--) {\n        const columnSquare = previewVirtualBoard.current[currentX] && previewVirtualBoard.current[currentX][i] && previewVirtualBoard.current[currentX][i];\n\n        if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (columnSquare !== 0) break;\n      }\n    }\n\n    if (currentY < COLUMNS - 1) {\n      for (let i = currentX + 1; i < COLUMNS; i++) {\n        const columnSquare = previewVirtualBoard.current[currentX] && previewVirtualBoard.current[currentX][i] && previewVirtualBoard.current[currentX][i];\n\n        if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (columnSquare !== 0) break;\n      }\n    } // Diagonal top left\n\n\n    if (currentX > 0 && currentY > 0) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX - i;\n        const newY = currentY - i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Diagonal top right\n\n\n    if (currentX > 0 && currentY < COLUMNS - 1) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX - i;\n        const newY = currentY + i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Diagonal bottom left\n\n\n    if (currentX < ROWS - 1 && currentY > 0) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX + i;\n        const newY = currentY - i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Diagonal bottom right\n\n\n    if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\n      for (let i = 1; i < 8; i++) {\n        const newX = currentX + i;\n        const newY = currentY + i;\n        const square = previewVirtualBoard.current[newX] && previewVirtualBoard.current[newX][newY] && previewVirtualBoard.current[newX][newY];\n        if (square == null) break;\n\n        if (square === 4 * pieceCode || square === 5 * pieceCode) {\n          const oldBoard = cloneDeep(previewVirtualBoard.current);\n          if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n          previewVirtualBoard.current = oldBoard;\n          return true;\n        } else if (square !== 0) break;\n      }\n    } // Knight moves\n\n\n    const knightPossibleMoves = [[currentX - 2, currentY - 1], [currentX - 2, currentY + 1], [currentX + 2, currentY - 1], [currentX + 2, currentY + 1], [currentX - 1, currentY - 2], [currentX - 1, currentY + 2], [currentX + 1, currentY - 2], [currentX + 1, currentY + 2]];\n    knightPossibleMoves.forEach(move => {\n      const square = previewVirtualBoard.current[move[0]] && previewVirtualBoard.current[move[0]][move[1]] && previewVirtualBoard.current[move[0]][move[1]];\n\n      if (square === pieceCode * 3) {\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\n        if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\n        previewVirtualBoard.current = oldBoard;\n        check = true;\n      }\n    });\n    return check;\n  }; // Checking the check-mate\n\n\n  const checkCheckmate = (kCode, board) => {\n    console.log(board);\n    const constantBoard = board;\n    let currBoard = [];\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const mySquaresClone = currBoard.map((square, idx) => {\n      if (!checkOppositeColor(square, kCode) && square !== 0) return {\n        pieceCode: square,\n        coords: idx\n      };\n    });\n    const mySquares = mySquaresClone.filter(square => square !== undefined);\n    console.log(mySquares);\n    let checkMate = true;\n    mySquares.forEach(square => {\n      // Next possible moves to check if it's checkmate\n      const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\n      console.log(possibleMovesCheckmate);\n      possibleMovesCheckmate.forEach(move => {\n        const currX = parseInt(square.coords / 8);\n        const currY = square.coords % 8;\n        const newX = parseInt(move / 8);\n        const newY = move % 8;\n        const newBoard = cloneDeep(constantBoard);\n        newBoard[currX][currY] = 0;\n\n        if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\n          if (newBoard[newX][newY] !== 0) {\n            const enemyPieceNumber = newBoard[newX][newY];\n            if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\n          } else newBoard[newX][newY] = square.pieceCode;\n        }\n\n        previewVirtualBoard.current = cloneDeep(newBoard);\n        let allInOneBoard = [];\n        previewVirtualBoard.current.forEach(row => {\n          row.forEach(square => allInOneBoard.push(square));\n        });\n        console.log(previewVirtualBoard.current, kCode);\n        console.log(allInOneBoard);\n        let kingSquare = [];\n        allInOneBoard.forEach((square, idx) => {\n          if (square === kCode) kingSquare = idx;\n        });\n        console.log(kingSquare);\n        const newBoardCheck = checkCheckOptimised(kingSquare, kCode, true);\n        console.log(newBoardCheck, kingSquare, kCode);\n        if (!newBoardCheck) checkMate = false;\n      });\n    });\n    console.log(checkMate);\n    return checkMate;\n  };\n\n  const checkPat = (pieceCode, board) => {\n    let currBoard = [];\n    console.log(board, pieceCode);\n    board.forEach(row => {\n      row.forEach(square => currBoard.push(square));\n    });\n    const oppositeSquaresClone = currBoard.map((square, coords) => {\n      if (checkOppositeColor(pieceCode, square)) return {\n        pieceCode: square,\n        coords: coords\n      };\n    });\n    const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\n    return oppositeSquares.every(square => {\n      const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\n      console.log(oppPossibleMoves);\n      return oppPossibleMoves.length === 0;\n    });\n  };\n\n  const addSquares = () => {\n    let squareComponents = [];\n    console.log(virtualBoard);\n    const board = newVirtualBoard.map((row, rowIdx) => {\n      const rows = row.map((square, squareIdx) => {\n        const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\n        const realIdx = rowIdx * 8 + squareIdx;\n\n        const squareComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`,\n          ref: ref => {\n            currSquareElement.current[realIdx] = ref;\n          },\n          children: square !== 0 && (pawnTransform === null || pawnTransform === void 0 ? void 0 : pawnTransform.idx) === realIdx ? pawnTransform.elements.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `replace-container ${square < 0 ? -1 : 1} ${square}`,\n            children: pawnTransform.elements\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1751,\n            columnNumber: 66\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`,\n            onMouseDown: e => dragPiece(e, pawnTransform.piece, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, pawnTransform.piece),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(pawnTransform.piece).toString()],\n              className: `piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: pawnTransform.piece > 0 ? \"#fff\" : \"initial\",\n              code: pawnTransform.piece\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1765,\n              columnNumber: 37\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1758,\n            columnNumber: 33\n          }, this) : square !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `icon-container ${square < 0 ? -1 : 1} ${square}`,\n            onMouseDown: e => dragPiece(e, square, totalIdx),\n            onMouseMove: e => movePiece(e),\n            onMouseUp: e => dropPiece(e, square),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: piecesCode[Math.abs(square).toString()],\n              className: `piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`,\n              color: square > 0 ? \"#fff\" : \"initial\",\n              code: square\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1781,\n              columnNumber: 33\n            }, this)\n          }, totalIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1774,\n            columnNumber: 29\n          }, this) : \"\"\n        }, squareIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1747,\n          columnNumber: 21\n        }, this);\n\n        return squareComponent;\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          height: `${100 / rows.length}%`\n        },\n        children: rows\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1794,\n        columnNumber: 17\n      }, this);\n    });\n    squareElements.current = squareComponents;\n    return board;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${HEIGHT}px`,\n      height: `${HEIGHT}px`\n    },\n    ref: boardRef,\n    children: [addSquares(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"letters\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1809,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1810,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1811,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1812,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1813,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1814,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"G\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1815,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"H\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1816,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1808,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1806,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ComputerBoard, \"9aZD6jFgmC4eZFn2k+r0pAuaqpY=\");\n\n_c = ComputerBoard;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ComputerBoard\");","map":{"version":3,"sources":["A:/Js/Chess/chess-1.3/chess/src/Components/ComputerBoard.jsx"],"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faChessPawn","faChessKnight","faChessRook","faChessBishop","faChessKing","faChessQueen","cloneDeep","pieceMoveSound","pieceCaptureSound","isArray","HEIGHT","window","innerHeight","SQUARES","ROWS","COLUMNS","ComputerBoard","color","prevButtons","random","difficulty","setColor","localStorage","getItem","parseInt","setItem","currDifficulty","JSON","parse","stringify","createVirtualBoard","board","i","row","j","push","boardRef","squareRef","currentMove","setCurrentMove","currentTotalCoords","setCurrentTotalCoords","oldIdx","setOldIdx","possibleMoves","setPossibleMoves","activePiece","setActivePiece","dropPiecer","setActiveDrop","virtualBoard","setVirtualBoard","newVirtualBoard","setNewVirtualBoard","previewMoves","setPreviewMoves","gameRunning","setGameRunning","pawnTransform","setPawnTransform","prevMoves","setPrevMoves","nextMoves","setNextMoves","movedFirst","setMovedFirst","previewVirtualBoard","squareElements","currSquareElement","oldChildren","kingsMoved","rookMoved","piecesCode","console","log","pieceSound","Audio","pieceCapture","volume","minX","current","offsetLeft","maxX","offsetWidth","minY","offsetTop","maxY","offsetHeight","squareWidth","style","width","squareHeight","height","player2Color","player1Color","classList","contains","length","lastMove","pieceCode","currBoard","oldX","oldY","newX","newIdx","newY","oldPieceCode","newNextMoves","slice","newPrevMoves","getPossibleMoves","coords","piece","Math","abs","currentX","currentY","newDiagX","newDiagY","newDiagY2","newCoords","newCoords2","newFrontCoords","frontElement","diagonalElement","diagonalElement2","newFrontX","newCoordsSquare","checkOppositeColor","newSquare","undefined","pieceMoves","x","y","forEach","pieceMove","smallRocadeCoords","bigRocadeCoords","smallRocadeRookCoords","bigRocadeRookCoords","smallRocadeSquare","bigRocadeSquare","smallRocadeEmpty","bigRocadeEmpty","rocadeX","rocadeY","king","rook","rocade","dragPiece","e","square","elements","element","target","parentElement","containerElement","clientX","clientY","position","left","top","newTotalCoords","idx","currPossibleMoves","move","oldPreviewMoves","firstChild","removeChild","remove","newPreviewMoves","setTimeout","currSquare","dotElement","document","createElement","add","appendChild","movePiece","zIndex","ySquare","xSquare","round","dropPiece","sameIndex","find","oldBoard","otherBoard","squaresVirtualBoard","kingSquare","totalIdx","iconColor","check","checkCheckOptimised","play","squareDOM","squarePiece","querySelector","dropPieceCode","getAttribute","cloneIcon","cloneNode","pause","newPiece","skipComputerMove","containers","leftContainers","map","pawnTransformPiece","rookSquare","rookInit","cloneVirtualBoard","oppositeKingSquare","newBoard","checkEqual","checkPat","computerMove","getContainers","mySquaresClone","mySquares","filter","result","elementIdx","count","currMove","getAllMoves","newPossibleMoves","newMove","floor","moves","minNum","number","Number","POSITIVE_INFINITY","possMove","isDefensed","iconContainerElement","newSquareBounding","getBoundingClientRect","rectBounding","opacity","setProperty","sound","computerIdx","playerIdx","computerPiece","playerPiece","squareBoard","playerPiecesUnfiltered","playerPieces","cloneBoard","some","playerPossibleMoves","allMoves","currPossMoves","currMoves","currPieceMove","oldPreviewVirtualBoard","rowIdx","squareIdx","isCheck","computerMoveFirst","newBoard1","randomPossibleMoves","randomMove","transformPieceCode","Object","keys","key","piece1","piece2","checkCheck","kCode","isFromCheckMate","oppositeSquaresClone","oppositeSquares","possibleMovesCheck","checkCheckmate","kingPossibleSquares","pawnPossibleSquares","rowSquare","checkMate","columnSquare","knightPossibleMoves","constantBoard","possibleMovesCheckmate","currX","currY","enemyPieceNumber","allInOneBoard","newBoardCheck","every","oppPossibleMoves","addSquares","squareComponents","rows","realIdx","squareComponent","ref","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChessPawn, faChessKnight, faChessRook, faChessBishop, faChessKing, faChessQueen } from '@fortawesome/free-solid-svg-icons';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport pieceMoveSound from \"../sounds/piece-move.wav\";\r\nimport pieceCaptureSound from \"../sounds/piece-taken.mp3\";\r\n\r\nimport '../styles/board.css';\r\nimport { isArray } from \"lodash\";\r\n\r\nconst HEIGHT = 85 * window.innerHeight / 100;\r\nconst SQUARES = 64;\r\nconst ROWS = 8;\r\nconst COLUMNS = 8;\r\n\r\nexport default function ComputerBoard({ color, prevButtons, random, difficulty }) {\r\n\r\n    const setColor = localStorage.getItem(\"set-color\") ? parseInt(localStorage.getItem(\"set-color\")) : color;\r\n    localStorage.setItem(\"set-color\", setColor);\r\n    const currDifficulty = localStorage.getItem(\"computer-difficulty\") !== null ? difficulty : JSON.parse(localStorage.getItem(\"computer-difficulty\"));\r\n    localStorage.setItem(\"computer-difficulty\", JSON.stringify(difficulty));\r\n\r\n    const createVirtualBoard = () => {\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 8; j++)\r\n                if (i === 1) row.push(-setColor * 1);\r\n                else if (i === 6) row.push(setColor * 1);\r\n                else if (i !== 7 && i !== 0) row.push(0);\r\n\r\n            if (color < 0) {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 6, -setColor * 5, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 6, setColor * 5, setColor * 4, setColor * 3, setColor * 2);    \r\n            } else {\r\n                if (i === 0) row.push(-setColor * 2, -setColor * 3, -setColor * 4, -setColor * 5, -setColor * 6, -setColor * 4, -setColor * 3, -setColor * 2);\r\n                else if (i === 7) row.push(setColor * 2, setColor * 3, setColor * 4, setColor * 5, setColor * 6, setColor * 4, setColor * 3, setColor * 2);    \r\n            }         \r\n            board.push(row);\r\n        }\r\n\r\n        return board;\r\n    };\r\n\r\n    const boardRef = useRef(null);\r\n    const squareRef = useRef(null);\r\n    \r\n    const [currentMove, setCurrentMove] = useState(localStorage.getItem(\"computer-current-move\") === null ? 1 : localStorage.getItem(\"computer-current-move\"));\r\n    const [currentTotalCoords, setCurrentTotalCoords] = useState(null);\r\n    const [oldIdx, setOldIdx] = useState(null);\r\n    const [possibleMoves, setPossibleMoves] = useState(null);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [dropPiecer, setActiveDrop] = useState(null);\r\n    const [virtualBoard, setVirtualBoard] = useState(localStorage.getItem(\"computer-board\") === null ? createVirtualBoard() : JSON.parse(localStorage.getItem(\"computer-board\")));\r\n    const [newVirtualBoard, setNewVirtualBoard] = useState(virtualBoard);\r\n    const [previewMoves, setPreviewMoves] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [pawnTransform, setPawnTransform] = useState(null);\r\n    const [prevMoves, setPrevMoves] = useState(localStorage.getItem(\"computer-prev-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-prev-moves\")) : []);\r\n    const [nextMoves, setNextMoves] = useState(localStorage.getItem(\"computer-next-moves\") !== null ? JSON.parse(localStorage.getItem(\"computer-next-moves\")) : []);\r\n    const [movedFirst, setMovedFirst] = useState(false);\r\n\r\n    const previewVirtualBoard = useRef(virtualBoard);\r\n    const squareElements = useRef(null);\r\n    const currSquareElement = useRef([]);\r\n    const oldChildren = useRef([]);\r\n    const kingsMoved = useRef({\"6\": false, \"-6\": false});\r\n    const rookMoved = useRef({\r\n        \"2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        },\r\n\r\n        \"-2\": {\r\n            \"left\": false,\r\n            \"right\": false\r\n        }\r\n    });\r\n\r\n    const piecesCode = {\r\n        1: faChessPawn,\r\n        2: faChessRook,\r\n        3: faChessKnight,\r\n        4: faChessBishop,\r\n        5: faChessQueen,\r\n        6: faChessKing\r\n    };\r\n\r\n    console.log(virtualBoard);\r\n\r\n    const pieceSound = new Audio(pieceMoveSound);\r\n    const pieceCapture = new Audio(pieceCaptureSound);\r\n    pieceCapture.volume = 0.3;\r\n\r\n    const minX = boardRef.current?.offsetLeft;\r\n    const maxX = boardRef.current?.offsetLeft + boardRef.current?.offsetWidth - 25;\r\n\r\n    const minY = boardRef.current?.offsetTop;\r\n    const maxY = boardRef.current?.offsetTop + boardRef.current?.offsetHeight - 50;\r\n\r\n    const squareWidth = parseInt(boardRef.current?.style.width) / 8;\r\n    const squareHeight = parseInt(boardRef.current?.style.height) / 8;\r\n\r\n    console.log(squareWidth, squareHeight);\r\n    const player2Color = virtualBoard[0][0] > 0 ? \"white\" : \"black\";\r\n    const player1Color = player2Color === \"white\" ? \"black\" : \"white\";\r\n\r\n    // Checking everytime prev/next button is pressed\r\n    \r\n    useEffect(() => {\r\n       \r\n        if (!prevButtons) return;\r\n        if (prevButtons.classList.contains('prev-button') && prevMoves.length === 0) return;\r\n        if (prevButtons.classList.contains('next-button') && nextMoves.length === 0) return;\r\n        \r\n        const lastMove = prevButtons.classList.contains('prev-button') ? prevMoves[prevMoves.length - 1] : nextMoves[nextMoves.length - 1];\r\n        console.log(prevButtons, prevMoves, lastMove.pieceCode);\r\n        const currBoard = cloneDeep(newVirtualBoard);\r\n        const oldX = parseInt(lastMove.oldIdx / 8);\r\n        const oldY = lastMove.oldIdx % 8;\r\n        const newX = parseInt(lastMove.newIdx / 8);\r\n        const newY = lastMove.newIdx % 8;\r\n        currBoard[oldX][oldY] = prevButtons.classList.contains('prev-button') ? lastMove.pieceCode : 0;\r\n        currBoard[newX][newY] = lastMove.oldPieceCode;\r\n    \r\n        setNewVirtualBoard(currBoard);\r\n\r\n        if (prevButtons.classList.contains('prev-button')) {\r\n            const newNextMoves = [...nextMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(prevMoves.slice(0, -1)));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(newNextMoves));\r\n\r\n            setPrevMoves(prevMoves.slice(0, -1));\r\n            setNextMoves(newNextMoves);\r\n\r\n        } else  {\r\n            console.log('ok from here');\r\n            const newPrevMoves = [...prevMoves,\r\n                {\r\n                    oldIdx: lastMove.oldIdx,\r\n                    newIdx: lastMove.newIdx,\r\n                    oldPieceCode: lastMove.pieceCode,\r\n                    pieceCode: lastMove.oldPieceCode\r\n                }\r\n            ];\r\n\r\n            localStorage.setItem(\"computer-prev-moves\", JSON.stringify(newPrevMoves));\r\n            localStorage.setItem(\"computer-next-moves\", JSON.stringify(nextMoves.slice(0, -1)));\r\n        \r\n            setNextMoves(nextMoves.slice(0, -1));\r\n            setPrevMoves(newPrevMoves);\r\n        }\r\n\r\n        localStorage.setItem(\"computer-current-move\", -currentMove);\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(currBoard));\r\n        \r\n        setCurrentMove(-currentMove);\r\n\r\n    }, [random]);\r\n\r\n    // Function for checking the check \r\n\r\n    const getPossibleMoves = (pieceCode, coords, board) => {\r\n        const piece = Math.abs(pieceCode);\r\n        let possibleMoves = [];\r\n\r\n        // Current coordonates\r\n        const currentX = parseInt(coords / 8);\r\n        const currentY = coords % 8; \r\n\r\n        console.log(currentX, currentY);\r\n\r\n        // Code for pawn\r\n        if (piece === 1) {\r\n\r\n            // Coordonates for possible moves\r\n            const newDiagX = currentX - (pieceCode * setColor);\r\n            const newDiagY = currentY + (pieceCode * setColor);\r\n            const newDiagY2 = currentY - (pieceCode * setColor);\r\n            \r\n            const newCoords = newDiagX * 8 + newDiagY;\r\n            const newCoords2 = newDiagX * 8 + newDiagY2;\r\n            const newFrontCoords = newDiagX * 8 + currentY;\r\n            const frontElement = board[newDiagX] &&\r\n                                 board[newDiagX][currentY] &&\r\n                                 board[newDiagX][currentY];\r\n\r\n            console.log(frontElement);\r\n\r\n            if (frontElement === 0) possibleMoves.push(newFrontCoords);\r\n\r\n            console.log(possibleMoves);\r\n            \r\n            const diagonalElement = board[newDiagX] &&\r\n                                    board[newDiagX][newDiagY] &&\r\n                                    board[newDiagX][newDiagY];\r\n\r\n            const diagonalElement2 = board[newDiagX] &&\r\n                                     board[newDiagX][newDiagY2] &&\r\n                                     board[newDiagX][newDiagY2];\r\n            \r\n            if ((pieceCode * setColor < 0 && currentX === 1) || (pieceCode * setColor > 0 && currentX === 6)) {\r\n                const newFrontX = currentX - (pieceCode * 2 * setColor);\r\n                console.log(newFrontX);\r\n                const newFrontCoords = newFrontX * 8 + currentY;\r\n\r\n                const newCoordsSquare = board[newFrontX][currentY];\r\n                if (newCoordsSquare === 0 && frontElement === 0) possibleMoves.push(newFrontCoords);\r\n            \r\n            }\r\n\r\n            if (diagonalElement2 !== 0) {\r\n                if (checkOppositeColor(pieceCode, diagonalElement2)) possibleMoves.push(newCoords2);\r\n            }\r\n           \r\n            if (diagonalElement === 0) return possibleMoves;\r\n            \r\n            if (checkOppositeColor(pieceCode, diagonalElement)) possibleMoves.push(newCoords);\r\n\r\n        } else if (piece === 2) {\r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    \r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);    \r\n \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                             break;\r\n                        } else possibleMoves.push(newCoords);    \r\n\r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                                           \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n                        \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 3) {\r\n\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX - 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 2,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 2\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 2\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    }\r\n                    else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n        } else if (piece === 4) {\r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n  \r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined && newX >= 0 && newY >= 0 && newX < 8 && newY < 8) {\r\n                       \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            console.log(possibleMoves, newSquare, board, newX, newY);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, newCoords);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 5) {\r\n            console.log(board); \r\n\r\n            if (currentY > 1) {\r\n                for (let i = currentY - 1; i >= 0; i--) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);   \r\n                                         \r\n                        console.log('empty text just for fun', newSquare);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentY < 7) {\r\n                for (let i = currentY + 1; i < 8; i++) {\r\n                    const newCoords = currentX * 8 + i;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {   \r\n\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX > 1) {\r\n                for (let i = currentX - 1; i >= 0; i--) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            console.log(board, board[newX][newY], pieceCode, newCoords);\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newCoords, possibleMoves);\r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (currentX < 7) {\r\n                for (let i = currentX + 1; i < 8; i++) {\r\n                    const newCoords = i * 8 + currentY;\r\n                    const newX = parseInt(newCoords / 8);\r\n                    const newY = parseInt(newCoords % 8);\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n        \r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            }\r\n            \r\n            if (currentX >= 1 && currentY >= 1) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY, pieceCode);\r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX >= 1 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX - i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                    console.log(newSquare, newX, newY);\r\n                    if (newSquare !== undefined) {\r\n                        \r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            } \r\n\r\n            if (currentX <= 7 && currentY >= 0) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY - i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n        \r\n                    if (newSquare !== undefined) {\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (currentX <= 7 && currentY <= 7) {\r\n                for (let i = 1; i < 8; i++) {\r\n                    const newX = currentX + i;\r\n                    const newY = currentY + i;\r\n                    const newCoords = newX * 8 + newY;\r\n                    const newSquare = board[newX] &&\r\n                                      board[newX][newY] &&\r\n                                      board[newX][newY];\r\n                   \r\n                    if (newSquare !== undefined) {\r\n                        console.log(newX, newY);\r\n                        if (newSquare !== 0) {\r\n                            if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                            break;\r\n                        } else possibleMoves.push(newCoords);\r\n\r\n                        console.log('empty text just for fun', newSquare, possibleMoves);\r\n                    }\r\n\r\n                }\r\n            } \r\n        } else if (piece === 6) {\r\n            const pieceMoves = [\r\n                {\r\n                    x: currentX,\r\n                    y: currentY - 1\r\n                },\r\n                \r\n                {\r\n                    x: currentX,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY \r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX - 1,\r\n                    y: currentY + 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY - 1\r\n                },\r\n\r\n                {\r\n                    x: currentX + 1,\r\n                    y: currentY + 1\r\n                }\r\n            ];\r\n\r\n            pieceMoves.forEach(pieceMove => {\r\n                const newCoords = pieceMove.x * 8 + pieceMove.y;\r\n                const newSquare = board[pieceMove.x] &&\r\n                                  board[pieceMove.x][pieceMove.y] &&\r\n                                  board[pieceMove.x][pieceMove.y];\r\n                if (newSquare !== undefined && pieceMove.x >= 0 && pieceMove.y >= 0 && pieceMove.x < 8 && pieceMove.y < 8) {\r\n                    if (newSquare !== 0) {\r\n                        if (checkOppositeColor(pieceCode, newSquare)) possibleMoves.push(newCoords);\r\n                    } else possibleMoves.push(newCoords);\r\n\r\n                    console.log(newSquare, pieceMove.x, pieceMove.y)\r\n                }\r\n            });\r\n\r\n            // Movement for rocade\r\n            console.log(kingsMoved.current[pieceCode]);\r\n            if (!kingsMoved.current[pieceCode]) {\r\n                console.log('rocade', rookMoved);\r\n                const smallRocadeCoords = currentX * 8 + currentY + 2;\r\n                const bigRocadeCoords = currentX * 8 + currentY - 3;\r\n                const smallRocadeRookCoords = pieceCode < 0 ? 5 : 61;\r\n                const bigRocadeRookCoords = pieceCode < 0 ? 2 : 58;\r\n\r\n                const smallRocadeSquare = board[currentX] &&\r\n                                          board[currentX][currentY + 2] &&\r\n                                          board[currentX][currentY + 2];\r\n\r\n                const bigRocadeSquare = board[currentX] &&\r\n                                        board[currentX][currentY - 3] &&\r\n                                        board[currentX][currentY - 3];\r\n\r\n                let smallRocadeEmpty = true, bigRocadeEmpty = true;\r\n\r\n                // Checking if the squares between king and rook are empty \r\n                for (let i = coords + 1; i <= smallRocadeCoords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                   \r\n                    if (board[rocadeX][rocadeY] !== 0) smallRocadeEmpty = false;\r\n                } \r\n\r\n                for (let i = bigRocadeCoords; i < coords; i++) {\r\n                    const rocadeX = parseInt(i / 8);\r\n                    const rocadeY = i % 8;\r\n                    console.log('gdjigdfjhh');\r\n                    if (board[rocadeX][rocadeY] !== 0) bigRocadeEmpty = false;\r\n                } \r\n\r\n                console.log(smallRocadeEmpty, bigRocadeEmpty)\r\n\r\n                if (smallRocadeSquare !== undefined && smallRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"right\"]) {\r\n                    possibleMoves.push({\r\n                        king: smallRocadeCoords,\r\n                        rook: smallRocadeRookCoords,\r\n                        rocade: \"s\"\r\n                    });\r\n                } \r\n\r\n                if (bigRocadeSquare !== undefined && bigRocadeEmpty && !rookMoved.current[pieceCode < 0 ? \"-2\" : \"2\"][\"left\"]) {\r\n                    possibleMoves.push({\r\n                        king: bigRocadeCoords,\r\n                        rook: bigRocadeRookCoords,\r\n                        rocade: \"b\"\r\n                    });\r\n                }\r\n\r\n                \r\n\r\n                // possibleMoves.push(smallRocade);\r\n                // possibleMoves.push(bigRocade);\r\n            }\r\n        }\r\n      \r\n        return possibleMoves;\r\n    };\r\n\r\n    const dragPiece = (e, square) => {\r\n        \r\n        if (!gameRunning) return;\r\n        if (pawnTransform && pawnTransform?.elements.length > 1) return;\r\n\r\n        const element = e.target.classList.contains('piece') ? e.target : e.target.parentElement;\r\n        const containerElement = element.parentElement;\r\n        console.log(containerElement, square);\r\n        const x = e.clientX - 20;\r\n        const y = e.clientY - 20;\r\n        console.log(x, y, square, currentMove);\r\n        containerElement.style.position = 'absolute';\r\n        containerElement.style.left = `${x}px`;\r\n        containerElement.style.top = `${y}px`;\r\n\r\n        \r\n        \r\n        setActivePiece(containerElement);\r\n        setActiveDrop(parseInt(containerElement.classList[2]));\r\n        let newTotalCoords;\r\n        currSquareElement.current.forEach((square, idx) => {\r\n            if (square === containerElement.parentElement) newTotalCoords = idx;\r\n        });\r\n\r\n        setOldIdx(newTotalCoords);\r\n\r\n        const currPossibleMoves = getPossibleMoves(square, newTotalCoords, newVirtualBoard);\r\n        console.log(currPossibleMoves, newVirtualBoard, square, currentMove, newTotalCoords);\r\n        if (checkOppositeColor(square, currentMove)) setPossibleMoves([]);\r\n        else {\r\n            setPossibleMoves(currPossibleMoves);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                console.log(move, oldPreviewMoves);\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container')) move.removeChild(oldPreviewMoves);\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n        \r\n            let newPreviewMoves = [];\r\n            currPossibleMoves.forEach((move, idx) => {\r\n                setTimeout(() => {\r\n                    const currSquare = currSquareElement.current[move];\r\n\r\n                    if (currSquare && currSquare.firstChild == null) {\r\n                        const dotElement = document.createElement('div');\r\n                        dotElement.classList.add('possible-move')\r\n\r\n                        currSquare.appendChild(dotElement);\r\n                        console.log(currSquare);\r\n                        newPreviewMoves.push(currSquare);\r\n                    } else if (currSquare && currSquare.firstChild.firstChild !== null) {\r\n                        currSquare.firstChild.firstChild.classList.add('attacked');\r\n                        newPreviewMoves.push(currSquare);\r\n                    }\r\n                }, idx * 0);\r\n            });\r\n\r\n            setPreviewMoves(newPreviewMoves);\r\n        }\r\n       \r\n    };\r\n    \r\n    const movePiece = e => {\r\n        \r\n        if (!activePiece) return;\r\n        const x = e.clientX - 15;\r\n        const y = e.clientY - 15;\r\n        activePiece.style.position = 'absolute';\r\n        activePiece.style.left = `${x > maxX ? maxX : x < minX ? minX : x}px`;\r\n        activePiece.style.top = `${y > maxY ? maxY : y < minY ? minY : y}px`;\r\n        activePiece.style.zIndex = 3;\r\n\r\n        const ySquare = (parseInt(activePiece.style.left) - boardRef.current?.offsetLeft) / squareWidth;\r\n        const xSquare = (parseInt(activePiece.style.top) - boardRef.current?.offsetTop) / squareHeight;\r\n        \r\n        squareRef.current = {x: Math.round(xSquare), y: Math.round(ySquare)};\r\n        console.log(squareRef.current);\r\n    };\r\n    \r\n    const dropPiece = (e, pieceCode) => {\r\n        \r\n        if (!activePiece || !squareRef.current || oldIdx === null) return;\r\n        if (!possibleMoves) return;\r\n        setActivePiece(null);\r\n        console.log(squareRef.current?.x, squareRef.current?.y)\r\n        const currentX = squareRef.current?.x;\r\n        const currentY = squareRef.current?.y;\r\n        let rocade = false;\r\n        const idx = currentX * 8 + currentY;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n\r\n        const sameIndex = possibleMoves.find(move => {\r\n            if (typeof move === 'object') rocade = move;\r\n            return idx === (typeof move === 'object' ? move.king : move);\r\n        });\r\n\r\n        activePiece.style.left = 'initial';\r\n        activePiece.style.top= 'initial';\r\n        activePiece.position = 'relative';\r\n        activePiece.style.zIndex = 'initial';\r\n        console.log(previewVirtualBoard.current);\r\n\r\n        if (setColor != currentMove) {\r\n            console.log('here', setColor, currentMove);\r\n            return;\r\n        }\r\n\r\n        const oldBoard = cloneDeep(newVirtualBoard);\r\n        const otherBoard = cloneDeep(newVirtualBoard);\r\n        otherBoard[oldX][oldY] = 0;\r\n        otherBoard[currentX][currentY] = pieceCode; \r\n        previewVirtualBoard.current = otherBoard;\r\n        console.log('afdsokogjfdjjhihijhpjhijhipfghjpifjhpgjhpijhpfgjh', previewVirtualBoard.current);\r\n\r\n        let squaresVirtualBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => squaresVirtualBoard.push(square));\r\n        });\r\n        \r\n        let kingSquare;\r\n\r\n        squaresVirtualBoard.forEach((square, totalIdx) => {\r\n            const iconColor = square && square < 0 ? -1 : 1;\r\n\r\n            const x = parseInt(totalIdx / 8);\r\n            const y = parseInt(totalIdx % 8);\r\n\r\n            if (square === setColor * 6 && !checkOppositeColor(iconColor, setColor)) kingSquare = totalIdx;\r\n        });  \r\n\r\n        console.log(kingSquare, currentMove,  previewVirtualBoard.current);\r\n        const check = checkCheckOptimised(kingSquare, setColor * 6);\r\n        console.log(check);\r\n\r\n        if (sameIndex !== undefined && !check) {  \r\n\r\n            // Sound of piece moving\r\n            pieceSound.play();\r\n\r\n            const squareDOM = currSquareElement.current[idx];\r\n            const squarePiece = squareDOM && squareDOM.querySelector('[code]');\r\n            const dropPieceCode = squarePiece && squarePiece.getAttribute('code');\r\n            squareRef.current = null;\r\n            const cloneIcon = squareDOM && squareDOM.firstChild && squareDOM.firstChild.classList.contains('icon-container') ?  squareDOM.firstChild.cloneNode(true) : null;\r\n            console.log(cloneIcon, prevMoves);\r\n            if (dropPieceCode && !checkOppositeColor(pieceCode, dropPieceCode)) return;\r\n            else if (dropPieceCode && checkOppositeColor(pieceCode, dropPieceCode) && ((pieceCode !== 1 || currentX !== 0) && (squareDOM && pieceCode !== -1 || currentX !== 7))) {\r\n                // squareDOM.innerHTML = '';\r\n                pieceSound.pause();\r\n                pieceCapture.play();\r\n            }\r\n            \r\n            let newPiece = pieceCode;\r\n            let skipComputerMove = false;\r\n\r\n            // Piece being moved to new square\r\n            if ((squareDOM && pieceCode === 1 && currentX === 0 && setColor === 1) || (squareDOM && pieceCode === -1 && currentX === 7 && setColor === 1) || (squareDOM && pieceCode === 1 && currentX === 7 && setColor === -1) || (squareDOM && pieceCode === -1 && currentX === 0 && setColor === -1)) {\r\n                \r\n                console.log('here'); \r\n                \r\n                const containers = [faChessRook, faChessKnight, faChessBishop, faChessQueen];\r\n                const leftContainers = containers;  \r\n                console.log(leftContainers);\r\n                const elements = leftContainers.length >= 1 ? leftContainers.map(piece => {\r\n                    return (\r\n                        <div \r\n                            className={`mini-icon-container ${pieceCode < 0 ? -1 : 1} ${pieceCode}`}\r\n                            onClick={(e) => pawnTransformPiece(piece, idx, oldIdx)}\r\n                        >\r\n                            <FontAwesomeIcon \r\n                                icon={piece} \r\n                                className={`mini-piece ${pieceCode < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                color={pieceCode > 0 ? \"#fff\" : \"#000\"} \r\n                                code={pieceCode}\r\n                                \r\n                            />\r\n                        </div>\r\n                    );\r\n                }) : activePiece;\r\n\r\n                setPawnTransform({\r\n                    idx: idx,\r\n                    elements: elements\r\n                });\r\n\r\n                skipComputerMove = true;\r\n\r\n            } else setPawnTransform(null);\r\n\r\n            setPrevMoves([...prevMoves, \r\n                {\r\n                    oldIdx: oldIdx, \r\n                    newIdx: idx, \r\n                    pieceCode: pieceCode,\r\n                    oldPieceCode: newVirtualBoard[currentX][currentY],\r\n                }\r\n            ]);\r\n\r\n            setNextMoves([]);\r\n\r\n            // Removing old preview dots\r\n            previewMoves && previewMoves.forEach(move => {\r\n                const oldPreviewMoves = move.firstChild;\r\n                if (oldPreviewMoves && !oldPreviewMoves.classList.contains('icon-container') && !oldPreviewMoves.classList.contains('mini-icon-container')) {\r\n                    move.removeChild(oldPreviewMoves);\r\n                }\r\n                else if (oldPreviewMoves) oldPreviewMoves.firstChild.classList.remove('attacked');\r\n            });\r\n\r\n            if (rocade) {\r\n                if (rocade.rocade === 's') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 7 : 63].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                } else if (rocade.rocade === 'b') {\r\n                    const rookSquare = currSquareElement.current[rocade.rook];\r\n                    const rookInit = currSquareElement.current[dropPiecer < 0 ? 0 : 56].firstChild;\r\n                    rookSquare.appendChild(rookInit);\r\n                }\r\n            }\r\n\r\n            if (Math.abs(dropPiecer) === 6) {\r\n                kingsMoved.current[dropPiecer] = true;\r\n                console.log(kingsMoved.current[dropPiecer])\r\n            } else if (dropPiecer === 2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 56 ? \"left\" : oldIdx === 63 ? \"right\" : null] = true;\r\n                console.log(rookMoved.current[2][\"right\"]);\r\n            } else if (dropPiecer === -2) {\r\n                rookMoved.current[dropPiecer][oldIdx === 0 ? \"left\" : oldIdx === 7 ? \"right\" : null] = true;\r\n            }\r\n   \r\n            let cloneVirtualBoard = cloneDeep(newVirtualBoard);\r\n            console.log(oldX, oldY, currentX, currentY);\r\n            console.log(cloneVirtualBoard);\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[currentX][currentY] = pieceCode;\r\n\r\n            console.log(cloneVirtualBoard);\r\n            \r\n            // Checking if it's giving checkmate to the opponent\r\n            let oppositeKingSquare, newBoard = [];\r\n\r\n            cloneVirtualBoard.forEach(row => {\r\n                row.forEach(square => newBoard.push(square));\r\n            });\r\n\r\n            newBoard.forEach((square, totalIdx) => {\r\n                if (square === -currentMove * 6 && checkOppositeColor(square, currentMove)) oppositeKingSquare = totalIdx;\r\n            });\r\n\r\n            console.log(oppositeKingSquare);\r\n            \r\n            // const checkMateOpponent = checkCheckmate(-currentMove * 6, cloneVirtualBoard);\r\n            // console.log(checkMateOpponent);\r\n            // if (checkMateOpponent) setGameRunning(false);\r\n\r\n            const checkEqual = checkPat(currentMove, cloneVirtualBoard);\r\n            console.log(checkEqual);\r\n            if (checkEqual) setGameRunning(false);\r\n            localStorage.setItem(\"computer-current-move\", -currentMove);\r\n            // setCurrentMove(-currentMove);\r\n\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n\r\n            if (!skipComputerMove) computerMove(cloneVirtualBoard);\r\n           \r\n            console.log(cloneVirtualBoard);\r\n\r\n            // console.log(checkMateOpponent);\r\n            \r\n        } else if (sameIndex === undefined || check) previewVirtualBoard.current = oldBoard;\r\n        \r\n    };\r\n\r\n    const getContainers = (elements, piece) => {\r\n\r\n        let currBoard = [];\r\n        console.log(piece);\r\n        newVirtualBoard.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, piece) && square !== 0) return square;\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(mySquares);\r\n\r\n        const result = elements.filter((element, elementIdx) => {\r\n            let count = 0;\r\n            mySquares.forEach(square => {\r\n                if (square - 2 === elementIdx) count++;\r\n            });\r\n\r\n            console.log(count, elementIdx);\r\n\r\n            if (count < 1 && elementIdx === 3) {\r\n                console.log('queen not working')\r\n                return element;\r\n            }\r\n            else if (count < 2 && elementIdx !== 3) return element;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    const computerMove = (newBoard) => {\r\n        console.log('none', currentMove);\r\n        let currMove = currentMove;\r\n        setCurrentMove(-currMove);\r\n\r\n        const possibleMoves = getAllMoves(-currMove, newBoard);\r\n        console.log(possibleMoves)\r\n        if (possibleMoves.length === 0) {\r\n            setGameRunning(false);\r\n            return;\r\n        }\r\n\r\n        let newPossibleMoves, newMove;\r\n\r\n        if (currDifficulty === \"easy\") {\r\n            newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n            newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\r\n           \r\n        } else if (currDifficulty === \"medium\") {\r\n            \r\n            let minNum = { number: Number.POSITIVE_INFINITY };\r\n            possibleMoves.forEach(move => {\r\n                move.moves.forEach(possMove => {\r\n                    if (newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < minNum.number) {\r\n                        minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]); \r\n                        newMove = possMove;\r\n                        newPossibleMoves = move; \r\n                    }\r\n                });\r\n            });\r\n\r\n            if (minNum.number === Number.POSITIVE_INFINITY) {\r\n                newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n                newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\r\n            }\r\n            \r\n        } else if (currDifficulty === \"hard\") {\r\n            \r\n            let minNum = { number: Number.POSITIVE_INFINITY };\r\n            possibleMoves.forEach(move => {\r\n                move.moves.forEach(possMove => {\r\n                    if (newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && newBoard[parseInt(possMove / 8)][possMove % 8] !== 0 && Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < minNum.number) {\r\n                        if (Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]) < 0) {\r\n                            minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]); \r\n                            newMove = possMove;\r\n                            newPossibleMoves = move;\r\n                        } else if (!isDefensed(newBoard, move.idx, possMove)) {\r\n                            console.log('no, is not defensed');\r\n\r\n\r\n                            minNum.number = Math.abs(move.piece) - Math.abs(newBoard[parseInt(possMove / 8)][possMove % 8]); \r\n                            newMove = possMove;\r\n                            newPossibleMoves = move;\r\n                        }\r\n                       \r\n                    }\r\n\r\n                });\r\n            });\r\n\r\n            if (minNum.number === Number.POSITIVE_INFINITY) {\r\n                newPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n                newMove = newPossibleMoves.moves[Math.floor(Math.random() * newPossibleMoves.moves.length)];\r\n            }\r\n\r\n        } else if (currDifficulty === \"very hard\") {\r\n\r\n        }\r\n       \r\n        console.log(newMove);\r\n        let cloneVirtualBoard = cloneDeep(newBoard);\r\n\r\n        const oldX = parseInt(newPossibleMoves.idx / 8);\r\n        const oldY = newPossibleMoves.idx % 8;\r\n        const newX = parseInt(newMove / 8);\r\n        const newY = newMove % 8;\r\n\r\n        const iconContainerElement = currSquareElement.current[newPossibleMoves.idx].firstChild;\r\n        const newSquareBounding = currSquareElement.current[newMove].getBoundingClientRect();\r\n\r\n        const rectBounding = iconContainerElement.getBoundingClientRect();\r\n        const top = rectBounding.top - boardRef?.current.offsetTop;\r\n\r\n        const left = rectBounding.left - boardRef?.current.offsetLeft;\r\n        console.log(newSquareBounding.top, newSquareBounding.left, newX, newY);\r\n        console.log(iconContainerElement, currSquareElement.current[newMove]);\r\n        iconContainerElement.classList.add('opponent');\r\n        // iconContainerElement.style.transition = 'all 350ms ease-in-out';\r\n        \r\n        setTimeout(() => {\r\n            // iconContainerElement.style.opacity = 0.5;\r\n            iconContainerElement.style.opacity = 0.5;\r\n            // iconContainerElement.style.left = `${newSquareBounding.left + (newSquareBounding.width / 4)}px`;\r\n            // iconContainerElement.style.top = `${newSquareBounding.top + (newSquareBounding.height / 4)}px`;\r\n            iconContainerElement.style.setProperty(\"--element-top\", `${newSquareBounding.top + (newSquareBounding.height / 4)}px`);\r\n            iconContainerElement.style.setProperty(\"--element-left\", `${newSquareBounding.left + (newSquareBounding.width / 4)}px`)\r\n            iconContainerElement.classList.add('changed-move');\r\n        }, 100);\r\n       \r\n\r\n        \r\n        setTimeout(() => {\r\n            // iconContainerElement.classList.remove('opponent');\r\n            // iconContainerElement.style.zIndex = 'initial';\r\n            // iconContainerElement.style.position = 'initial';\r\n            // iconContainerElement.style.left = `initial`;\r\n            // iconContainerElement.style.top = `initial`;\r\n            \r\n           \r\n            let sound;\r\n            if (cloneVirtualBoard[newX][newY] !== 0) sound = pieceCapture;\r\n            else sound = pieceSound;\r\n\r\n            cloneVirtualBoard[oldX][oldY] = 0;\r\n            cloneVirtualBoard[newX][newY] = newPossibleMoves.piece;\r\n\r\n            localStorage.setItem(\"computer-current-move\", setColor);\r\n            localStorage.setItem(\"computer-board\", JSON.stringify(cloneVirtualBoard));\r\n\r\n            setNewVirtualBoard(cloneVirtualBoard);\r\n            sound.play();\r\n            setCurrentMove(currMove);\r\n\r\n          \r\n        }, 750);\r\n    };\r\n\r\n    const isDefensed = (board, computerIdx, playerIdx) => {\r\n        const computerPiece = board[parseInt(computerIdx / 8)][computerIdx % 8];\r\n        const playerPiece = board[parseInt(playerIdx / 8)][playerIdx % 8];\r\n        \r\n        let squareBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => squareBoard.push(square));\r\n        });\r\n\r\n        const playerPiecesUnfiltered = squareBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, setColor) && square !== 0) return {\r\n                piece: square,\r\n                idx: idx\r\n            }\r\n        });\r\n\r\n        const playerPieces = playerPiecesUnfiltered.filter(square => square !== undefined);\r\n\r\n        console.log(playerPieces);\r\n\r\n        let cloneBoard = cloneDeep(board);\r\n        cloneBoard[parseInt(playerIdx / 8)][playerIdx % 8] = 0;\r\n\r\n        // Get possible moves for each piece\r\n\r\n        return playerPieces.some(piece => {\r\n            const playerPossibleMoves = getPossibleMoves(piece.piece, piece.idx, cloneBoard);\r\n            return playerPossibleMoves.some(move => move === playerIdx);\r\n        });\r\n    };\r\n\r\n\r\n    const getAllMoves = (color, newBoard) => {\r\n        let currBoard = [];\r\n\r\n        newBoard.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        let possibleMoves = [], allMoves = [];\r\n\r\n        currBoard.forEach((square, idx) => {\r\n            if (!checkOppositeColor(color, square) && square !== 0) possibleMoves.push({\r\n                piece: square, \r\n                idx: idx\r\n            });\r\n        });\r\n\r\n        possibleMoves.length !== 0 && possibleMoves.forEach(move => {\r\n            const currPossMoves = getPossibleMoves(move.piece, move.idx, newBoard);\r\n            console.log(move);\r\n            const currMoves = currPossMoves.length !== 0 && isArray(currPossMoves) ? currPossMoves.filter(currPieceMove => {\r\n                if (currPieceMove.rocade != null) return false;\r\n                let oldPreviewVirtualBoard = cloneDeep(previewVirtualBoard.current);\r\n                console.log(move.idx, currPieceMove);\r\n                previewVirtualBoard.current[parseInt(move.idx / 8)][move.idx % 8] = 0;\r\n                previewVirtualBoard.current[parseInt(currPieceMove / 8)][currPieceMove % 8] = move.piece;\r\n                let kingSquare;\r\n                console.log(newVirtualBoard);\r\n                previewVirtualBoard.current.forEach((row, rowIdx) => {\r\n                    row.forEach((square, squareIdx) => {\r\n                        if (square === -setColor * 6) kingSquare = rowIdx * 8 + squareIdx;\r\n                    });\r\n                });\r\n                \r\n                const isCheck = checkCheckOptimised(kingSquare, -setColor * 6);\r\n                previewVirtualBoard.current = cloneDeep(oldPreviewVirtualBoard);\r\n                \r\n                return !isCheck;\r\n            }) : [];\r\n\r\n            console.log(currMoves);\r\n            \r\n            if (currMoves.length !== 0) {\r\n                allMoves.push({\r\n                    piece: move.piece,\r\n                    idx: move.idx, \r\n                    moves: currMoves\r\n                });\r\n            }\r\n        });\r\n\r\n        console.log(allMoves);\r\n\r\n        return allMoves;\r\n    };\r\n\r\n    const computerMoveFirst = () => {\r\n        let newBoard1 = cloneDeep(newVirtualBoard);\r\n        newBoard1[2][0] = 0;\r\n        newBoard1[0][1] = 3;\r\n        setNewVirtualBoard(newBoard1);\r\n        const possibleMoves = getAllMoves(currentMove, newBoard1);\r\n        console.log(possibleMoves, Math.random() * possibleMoves.length);\r\n        const randomPossibleMoves = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\r\n        const randomMove = randomPossibleMoves.moves[Math.floor(Math.random() * randomPossibleMoves.moves.length)];\r\n        console.log(randomMove);\r\n        let cloneVirtualBoard = cloneDeep(newBoard1);\r\n\r\n        const oldX = parseInt(randomPossibleMoves.idx / 8);\r\n        const oldY = randomPossibleMoves.idx % 8;\r\n        const newX = parseInt(randomMove / 8);\r\n        const newY = randomMove % 8;\r\n        console.log(newX, newY);\r\n        cloneVirtualBoard[oldX][oldY] = 0;\r\n        cloneVirtualBoard[newX][newY] = randomPossibleMoves.piece;\r\n        setTimeout(() => setNewVirtualBoard(cloneVirtualBoard), 750); \r\n        setCurrentMove(-currentMove);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (setColor === -1) computerMoveFirst();\r\n    }, []);\r\n    \r\n       \r\n \r\n\r\n    const pawnTransformPiece = (piece, idx, oldIdx) => {\r\n\r\n        // Get transformed piece's code\r\n        const transformPieceCode = currentMove * Object.keys(piecesCode).find(key => piecesCode[key] === piece);\r\n        const newBoard = cloneDeep(newVirtualBoard);\r\n        const currentX = parseInt(idx / 8);\r\n        const currentY = idx % 8;\r\n        const oldX = parseInt(oldIdx / 8);\r\n        const oldY = oldIdx % 8;\r\n        const totalIdx = currentX * 8 + currentY + + (currentX % 2 !== 0 ? 1 : 0)\r\n        newBoard[currentX][currentY] = transformPieceCode;\r\n        newBoard[oldX][oldY] = 0;\r\n        setNewVirtualBoard(newBoard);\r\n        console.log(newBoard);\r\n        previewVirtualBoard.current = newBoard;\r\n        console.log(newBoard);\r\n        \r\n        setPawnTransform({\r\n            idx: idx,\r\n            piece: transformPieceCode,\r\n            elements: []\r\n        });\r\n\r\n        localStorage.setItem(\"computer-board\", JSON.stringify(newBoard));\r\n    };\r\n\r\n    const checkOppositeColor = (piece1, piece2) => {\r\n        if (piece1 < 0 && piece2 > 0) return true;\r\n        else if (piece1 > 0 && piece2 < 0) return true;\r\n        return false;\r\n    }\r\n\r\n    const checkCheck = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        console.log('lalalalaalaallapgdkkdfpgogjodjfgjdp', previewVirtualBoard.current, kingSquare);\r\n        console.log(kingSquare);\r\n        let currBoard = [];\r\n\r\n        previewVirtualBoard.current.forEach(row => {\r\n            row.forEach(square => {\r\n                currBoard.push(square);\r\n            });\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, idx) => {\r\n            if (checkOppositeColor(kCode, square)) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            };\r\n        });\r\n\r\n        console.log(oppositeSquaresClone);\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        console.log(oppositeSquares, kingSquare);\r\n\r\n        // Checking if king is attacked\r\n\r\n        const check = oppositeSquares.some(square => {\r\n            console.log(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            const possibleMovesCheck = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMoves);\r\n            return possibleMovesCheck.some(currSquare => {\r\n                \r\n                console.log(currSquare, kingSquare);\r\n                return currSquare === kingSquare;\r\n            });\r\n        });\r\n\r\n        const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n\r\n        if (check && !isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n\r\n        previewVirtualBoard.current = oldBoard;\r\n\r\n        return check;\r\n    };\r\n\r\n    const checkCheckOptimised = (kingSquare, kCode, isFromCheckMate = false) => {\r\n\r\n        // Getting coords\r\n        const currentX = parseInt(kingSquare / 8);\r\n        const currentY = kingSquare % 8;\r\n        const pieceCode = kCode / (-6);\r\n\r\n        let check = false;\r\n\r\n        const kingPossibleSquares = [\r\n            [currentX - 1, currentY - 1],\r\n            [currentX - 1, currentY],\r\n            [currentX - 1, currentY + 1],\r\n            [currentX, currentY - 1],\r\n            [currentX, currentY + 1],\r\n            [currentX + 1, currentY - 1],\r\n            [currentX + 1, currentY],\r\n            [currentX + 1, currentY + 1]\r\n        ];\r\n\r\n        console.log(previewVirtualBoard.current, pieceCode);\r\n\r\n        kingPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === -kCode && square !== null) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        // Pawns \r\n\r\n        const pawnPossibleSquares = [\r\n            [currentX + (pieceCode * setColor), currentY - (pieceCode * setColor)],\r\n            [currentX + (pieceCode * setColor), currentY + (pieceCode * setColor)]\r\n        ];\r\n        \r\n        console.log(pawnPossibleSquares);\r\n\r\n        pawnPossibleSquares.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode) {\r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                console.log('check');\r\n                check = true;\r\n            }\r\n        });\r\n        \r\n        // Rows\r\n\r\n        if (currentX > 0) {\r\n            for (let i = currentX - 1; i >= 0; i--) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentX < ROWS - 1) {\r\n            for (let i = currentX + 1; i < ROWS; i++) {\r\n                const rowSquare =   previewVirtualBoard.current[i] && \r\n                                    previewVirtualBoard.current[i][currentY] &&\r\n                                    previewVirtualBoard.current[i][currentY];\r\n\r\n                console.log(rowSquare, pieceCode, previewVirtualBoard.current);\r\n                \r\n                if (rowSquare === 2 * pieceCode || rowSquare * pieceCode === 5) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) {\r\n                        const checkMate = checkCheckmate(kCode, newVirtualBoard);\r\n                        console.log(checkMate);\r\n                    }\r\n                    console.log(\"here in if\")\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (rowSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Columns \r\n\r\n        if (currentY > 0) {\r\n            for (let i = currentY - 1; i >= 0; i--) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        if (currentY < COLUMNS - 1) {\r\n            for (let i = currentX + 1; i < COLUMNS; i++) {\r\n                const columnSquare = previewVirtualBoard.current[currentX] &&\r\n                                     previewVirtualBoard.current[currentX][i] && \r\n                                     previewVirtualBoard.current[currentX][i];\r\n                \r\n                if (columnSquare === 2 * pieceCode || columnSquare === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (columnSquare !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top left\r\n        \r\n        if (currentX > 0 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal top right\r\n\r\n        if (currentX > 0 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX - i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom left\r\n\r\n        if (currentX < ROWS - 1 && currentY > 0) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY - i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Diagonal bottom right\r\n\r\n        if (currentX < ROWS - 1 && currentY < COLUMNS - 1) {\r\n            for (let i = 1; i < 8; i++) {\r\n                const newX = currentX + i;\r\n                const newY = currentY + i;\r\n                const square = previewVirtualBoard.current[newX] &&\r\n                               previewVirtualBoard.current[newX][newY] && \r\n                               previewVirtualBoard.current[newX][newY];\r\n                if (square == null) break;\r\n                \r\n                if (square === 4 * pieceCode || square === 5 * pieceCode) {\r\n                    const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                    if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                    previewVirtualBoard.current = oldBoard;\r\n                    return true;\r\n                }\r\n                else if (square !== 0) break;\r\n            }\r\n        }\r\n\r\n        // Knight moves\r\n\r\n        const knightPossibleMoves = [\r\n            [currentX - 2, currentY - 1],\r\n            [currentX - 2, currentY + 1],\r\n            [currentX + 2, currentY - 1],\r\n            [currentX + 2, currentY + 1],\r\n            [currentX - 1, currentY - 2],\r\n            [currentX - 1, currentY + 2],\r\n            [currentX + 1, currentY - 2],\r\n            [currentX + 1, currentY + 2]\r\n        ];\r\n\r\n        \r\n        \r\n        knightPossibleMoves.forEach(move => {\r\n            const square = previewVirtualBoard.current[move[0]] && \r\n                           previewVirtualBoard.current[move[0]][move[1]] &&\r\n                           previewVirtualBoard.current[move[0]][move[1]];\r\n\r\n            if (square === pieceCode * 3) { \r\n                const oldBoard = cloneDeep(previewVirtualBoard.current);\r\n                if (!isFromCheckMate) checkCheckmate(kCode, newVirtualBoard);\r\n                previewVirtualBoard.current = oldBoard;\r\n                check = true;\r\n            }\r\n        });\r\n\r\n        return check;\r\n    };\r\n\r\n\r\n    // Checking the check-mate\r\n\r\n    const checkCheckmate = (kCode, board) => {\r\n\r\n        console.log(board);\r\n        const constantBoard = board;\r\n        let currBoard = [];\r\n\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const mySquaresClone = currBoard.map((square, idx) => {\r\n            if (!checkOppositeColor(square, kCode) && square !== 0) return {\r\n                pieceCode: square,\r\n                coords: idx\r\n            }\r\n        });\r\n\r\n        const mySquares = mySquaresClone.filter(square => square !== undefined);\r\n        console.log(mySquares);\r\n        let checkMate = true;\r\n        mySquares.forEach(square => {\r\n\r\n            // Next possible moves to check if it's checkmate\r\n            const possibleMovesCheckmate = getPossibleMoves(square.pieceCode, square.coords, previewVirtualBoard.current);\r\n            console.log(possibleMovesCheckmate);\r\n\r\n            possibleMovesCheckmate.forEach(move => {\r\n                const currX = parseInt(square.coords / 8);\r\n                const currY = square.coords % 8;\r\n                const newX = parseInt(move / 8);\r\n                const newY = move % 8;\r\n                const newBoard = cloneDeep(constantBoard);\r\n\r\n                newBoard[currX][currY] = 0;\r\n                \r\n                if (newBoard && newBoard[newX] && newBoard[newX][newY]) {\r\n                    if (newBoard[newX][newY] !== 0) {\r\n                        const enemyPieceNumber = newBoard[newX][newY];\r\n                        if (checkOppositeColor(enemyPieceNumber, square.pieceCode)) newBoard[newX][newY] = square.pieceCode;\r\n                    } else newBoard[newX][newY] = square.pieceCode;\r\n                }\r\n\r\n                previewVirtualBoard.current = cloneDeep(newBoard);\r\n\r\n                let allInOneBoard = [];\r\n\r\n                previewVirtualBoard.current.forEach(row => {\r\n                    row.forEach(square => allInOneBoard.push(square));\r\n                });\r\n\r\n                console.log(previewVirtualBoard.current, kCode);\r\n\r\n                console.log(allInOneBoard);\r\n\r\n                let kingSquare = [];\r\n\r\n                allInOneBoard.forEach((square, idx) => {\r\n                    if (square === kCode) kingSquare = idx;\r\n                });\r\n\r\n                console.log(kingSquare);\r\n                \r\n                const newBoardCheck = checkCheckOptimised(kingSquare, kCode, true);\r\n                console.log(newBoardCheck, kingSquare, kCode);\r\n                if (!newBoardCheck) checkMate = false;\r\n            \r\n            });\r\n        });\r\n        \r\n       console.log(checkMate);\r\n       return checkMate;\r\n        \r\n    };\r\n\r\n    const checkPat = (pieceCode, board) => {\r\n        let currBoard = [];\r\n        console.log(board, pieceCode);\r\n        board.forEach(row => {\r\n            row.forEach(square => currBoard.push(square));\r\n        });\r\n\r\n        const oppositeSquaresClone = currBoard.map((square, coords) => {\r\n            if (checkOppositeColor(pieceCode, square)) return {\r\n                pieceCode: square,\r\n                coords: coords\r\n            };\r\n        });\r\n\r\n        const oppositeSquares = oppositeSquaresClone.filter(square => square !== undefined);\r\n\r\n        return oppositeSquares.every(square => {\r\n            const oppPossibleMoves = getPossibleMoves(square.pieceCode, square.coords, board);\r\n            console.log(oppPossibleMoves);\r\n            return oppPossibleMoves.length === 0;\r\n        });\r\n    };\r\n\r\n\r\n    const addSquares = () => {\r\n        let squareComponents = [];\r\n        console.log(virtualBoard);\r\n        const board = newVirtualBoard.map((row, rowIdx) => {\r\n\r\n            const rows = row.map((square, squareIdx) => {\r\n                const totalIdx = rowIdx * 8 + squareIdx + (rowIdx % 2 !== 0 ? 1 : 0);\r\n                const realIdx = rowIdx * 8 + squareIdx;\r\n               \r\n                const squareComponent = \r\n                    <div className={`square ${totalIdx % 2 === 0 ? \"even\" : \"\"}`} key={squareIdx} ref={ref => { \r\n                        currSquareElement.current[realIdx] = ref;\r\n                    }}>\r\n                        {square !== 0 && pawnTransform?.idx === realIdx ? (\r\n                            pawnTransform.elements.length > 0 ? (<div \r\n                                className={`replace-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                key={totalIdx}\r\n                            >   \r\n                                {pawnTransform.elements}  \r\n                            </div>)\r\n                            : (\r\n                                <div \r\n                                    className={`icon-container ${pawnTransform.piece < 0 ? -1 : 1} ${pawnTransform.piece}`}\r\n                                    onMouseDown={e => dragPiece(e, pawnTransform.piece, totalIdx)}\r\n                                    onMouseMove={e => movePiece(e)}\r\n                                    onMouseUp={e => dropPiece(e, pawnTransform.piece)} \r\n                                    key={totalIdx}\r\n                                >   \r\n                                    <FontAwesomeIcon \r\n                                        icon={piecesCode[Math.abs(pawnTransform.piece).toString()]} \r\n                                        className={`piece ${pawnTransform.piece < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                        color={pawnTransform.piece > 0 ? \"#fff\" : \"initial\"} \r\n                                        code={pawnTransform.piece}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        ) : square !== 0 ? (\r\n                            <div \r\n                                className={`icon-container ${square < 0 ? -1 : 1} ${square}`}\r\n                                onMouseDown={e => dragPiece(e, square, totalIdx)}\r\n                                onMouseMove={e => movePiece(e)}\r\n                                onMouseUp={e => dropPiece(e, square)} \r\n                                key={totalIdx}\r\n                            >   \r\n                                <FontAwesomeIcon \r\n                                    icon={piecesCode[Math.abs(square).toString()]} \r\n                                    className={`piece ${square < 0 ? \"stroke_white\" : \"stroke_black\"}`}\r\n                                    color={square > 0 ? \"#fff\" : \"initial\"} \r\n                                    code={square}\r\n                                />\r\n                            </div>\r\n                        ) : \"\"}\r\n                    </div>;\r\n\r\n                return squareComponent;\r\n            });\r\n            return (\r\n                <div className=\"row\" key={rowIdx} style={{height: `${100 / rows.length}%`}}>\r\n                    {rows}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        squareElements.current = squareComponents;\r\n\r\n        return board;\r\n    };\r\n\r\n    return (\r\n        <div className=\"board\" style={{width: `${HEIGHT}px`, height: `${HEIGHT}px`}} ref={boardRef}>\r\n            {addSquares()}\r\n            <div className=\"letters\">\r\n                <p>A</p>\r\n                <p>B</p>\r\n                <p>C</p>\r\n                <p>D</p>\r\n                <p>E</p>\r\n                <p>F</p>\r\n                <p>G</p>\r\n                <p>H</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}